

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Jul 09 00:46:36 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18LF46K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,keep,inline
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1
   113                           	psect	text96,global,reloc=2,class=CODE,delta=1
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1
   115                           	psect	text98,global,reloc=2,class=CODE,delta=1
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1
   117                           	psect	text100,global,reloc=2,class=CODE,delta=1
   118                           	psect	text101,global,reloc=2,class=CODE,delta=1
   119                           	psect	text102,global,reloc=2,class=CODE,delta=1
   120                           	psect	text103,global,reloc=2,class=CODE,delta=1
   121                           	psect	text104,global,reloc=2,class=CODE,delta=1
   122                           	psect	text105,global,reloc=2,class=CODE,delta=1
   123                           	psect	text106,global,reloc=2,class=CODE,delta=1
   124                           	psect	text107,global,reloc=2,class=CODE,delta=1
   125                           	psect	text108,global,reloc=2,class=CODE,delta=1
   126                           	psect	text109,global,reloc=2,class=CODE,delta=1
   127                           	psect	text110,global,reloc=2,class=CODE,delta=1
   128                           	psect	text111,global,reloc=2,class=CODE,delta=1
   129                           	psect	text112,global,reloc=2,class=CODE,delta=1
   130                           	psect	text113,global,reloc=2,class=CODE,delta=1
   131                           	psect	text114,global,reloc=2,class=CODE,delta=1
   132                           	psect	text115,global,reloc=2,class=CODE,delta=1
   133                           	psect	text116,global,reloc=2,class=CODE,delta=1
   134                           	psect	text117,global,reloc=2,class=CODE,delta=1
   135                           	psect	text118,global,reloc=2,class=CODE,delta=1
   136                           	psect	text119,global,reloc=2,class=CODE,delta=1
   137                           	psect	text120,global,reloc=2,class=CODE,delta=1
   138                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   139                           	psect	text121,global,reloc=2,class=CODE,delta=1
   140                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   141                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   142  0000                     
   143                           ; Version 2.05
   144                           ; Generated 20/12/2018 GMT
   145                           ; 
   146                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   147                           ; All rights reserved.
   148                           ; 
   149                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   150                           ; 
   151                           ; Redistribution and use in source and binary forms, with or without modification, are
   152                           ; permitted provided that the following conditions are met:
   153                           ; 
   154                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   155                           ;        conditions and the following disclaimer.
   156                           ; 
   157                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   158                           ;        of conditions and the following disclaimer in the documentation and/or other
   159                           ;        materials provided with the distribution.
   160                           ; 
   161                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   162                           ;        software without specific prior written permission.
   163                           ; 
   164                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   165                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   166                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   167                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   168                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   169                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   170                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   171                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   172                           ; 
   173                           ; 
   174                           ; Code-generator required, PIC18LF46K40 Definitions
   175                           ; 
   176                           ; SFR Addresses
   177  0000                     
   178 ;; Function _spi2_close is unused but had its address taken
   179  0000                     
   180 ;; Function _spi2_exchangeBlock is unused but had its address taken
   181  0000                     
   182 ;; Function _spi2_writeBlock is unused but had its address taken
   183  0000                     
   184 ;; Function _spi2_readBlock is unused but had its address taken
   185  0000                     
   186 ;; Function _spi2_writeByte is unused but had its address taken
   187  0000                     
   188 ;; Function _spi2_readByte is unused but had its address taken
   189  0000                     
   190 ;; Function _spi2_setSpiISR is unused but had its address taken
   191  0000                     
   192                           	psect	idataCOMRAM
   193  0029D8                     __pidataCOMRAM:
   194                           	opt callstack 0
   195                           
   196                           ;initializer for _RGB_B_State
   197  0029D8  0003               	dw	3
   198                           
   199                           ;initializer for _RGB_G_State
   200  0029DA  0003               	dw	3
   201                           
   202                           ;initializer for _RGB_R_State
   203  0029DC  0003               	dw	3
   204                           
   205                           ;initializer for _B_State
   206  0029DE  0003               	dw	3
   207                           
   208                           ;initializer for _G_State
   209  0029E0  0003               	dw	3
   210                           
   211                           ;initializer for _R_State
   212  0029E2  0003               	dw	3
   213                           
   214                           	psect	smallconst
   215  000F00                     __psmallconst:
   216                           	opt callstack 0
   217  000F00  00                 	db	0
   218  000F01                     _spiMaster:
   219                           	opt callstack 0
   220  000F01  00                 	db	0
   221  000F02  00                 	db	0
   222  000F03  2C                 	db	low _MASTER_open
   223  000F04  2B                 	db	high _MASTER_open
   224  000F05  E8                 	db	low _spi2_exchangeByte
   225  000F06  28                 	db	high _spi2_exchangeByte
   226  000F07  00                 	db	0
   227  000F08  00                 	db	0
   228  000F09  00                 	db	0
   229  000F0A  00                 	db	0
   230  000F0B  00                 	db	0
   231  000F0C  00                 	db	0
   232  000F0D  00                 	db	0
   233  000F0E  00                 	db	0
   234  000F0F  00                 	db	0
   235  000F10  00                 	db	0
   236  000F11  00                 	db	0
   237  000F12  00                 	db	0
   238  000F13  E6                 	db	low _spi2_isr
   239  000F14  2A                 	db	high _spi2_isr
   240  000F15                     __end_of_spiMaster:
   241                           	opt callstack 0
   242  000F15                     _spi2_configuration:
   243                           	opt callstack 0
   244  000F15  0A                 	db	10
   245  000F16  40                 	db	64
   246  000F17  3B                 	db	59
   247  000F18  00                 	db	0
   248  000F19  0A                 	db	10
   249  000F1A  40                 	db	64
   250  000F1B  3B                 	db	59
   251  000F1C  00                 	db	0
   252  000F1D                     __end_of_spi2_configuration:
   253                           	opt callstack 0
   254  000F1D  00                 	db	0	; dummy byte at the end
   255  0000                     
   256                           	psect	nvCOMRAM
   257  000051                     __pnvCOMRAM:
   258                           	opt callstack 0
   259  000051                     _eusart1TxBufferRemaining:
   260                           	opt callstack 0
   261  000051                     	ds	1
   262                           
   263                           	psect	nvBANK0
   264  0000D0                     __pnvBANK0:
   265                           	opt callstack 0
   266  0000D0                     _TMR4_InterruptHandler:
   267                           	opt callstack 0
   268  0000D0                     	ds	2
   269  0000D2                     _EUSART1_ErrorHandler:
   270                           	opt callstack 0
   271  0000D2                     	ds	2
   272  0000D4                     _EUSART1_OverrunErrorHandler:
   273                           	opt callstack 0
   274  0000D4                     	ds	2
   275  0000D6                     _EUSART1_FramingErrorHandler:
   276                           	opt callstack 0
   277  0000D6                     	ds	2
   278  0000D8                     _IOCCF7_InterruptHandler:
   279                           	opt callstack 0
   280  0000D8                     	ds	2
   281  0000DA                     _IOCCF6_InterruptHandler:
   282                           	opt callstack 0
   283  0000DA                     	ds	2
   284  0000DC                     _IOCCF5_InterruptHandler:
   285                           	opt callstack 0
   286  0000DC                     	ds	2
   287  0000DE                     _IOCCF4_InterruptHandler:
   288                           	opt callstack 0
   289  0000DE                     	ds	2
   290  0000E0                     _IOCCF3_InterruptHandler:
   291                           	opt callstack 0
   292  0000E0                     	ds	2
   293  0000E2                     _IOCBF5_InterruptHandler:
   294                           	opt callstack 0
   295  0000E2                     	ds	2
   296  0000E4                     _IOCAF4_InterruptHandler:
   297                           	opt callstack 0
   298  0000E4                     	ds	2
   299  0000E6                     _IOCAF3_InterruptHandler:
   300                           	opt callstack 0
   301  0000E6                     	ds	2
   302  0000E8                     _IOCAF1_InterruptHandler:
   303                           	opt callstack 0
   304  0000E8                     	ds	2
   305  0000EA                     _IOCAF0_InterruptHandler:
   306                           	opt callstack 0
   307  0000EA                     	ds	2
   308  0000EC                     _EUSART1_RxDefaultInterruptHandler:
   309                           	opt callstack 0
   310  0000EC                     	ds	2
   311  0000EE                     _EUSART1_TxDefaultInterruptHandler:
   312                           	opt callstack 0
   313  0000EE                     	ds	2
   314  0000F0                     _INT2_InterruptHandler:
   315                           	opt callstack 0
   316  0000F0                     	ds	2
   317  0000F2                     _INT1_InterruptHandler:
   318                           	opt callstack 0
   319  0000F2                     	ds	2
   320  0000F4                     _INT0_InterruptHandler:
   321                           	opt callstack 0
   322  0000F4                     	ds	2
   323  0000F6                     _TMR2_InterruptHandler:
   324                           	opt callstack 0
   325  0000F6                     	ds	2
   326  0000                     _RB3PPS	set	3826
   327  0000                     _SSP1DATPPS	set	3768
   328  0000                     _RB2PPS	set	3825
   329  0000                     _SSP1CLKPPS	set	3767
   330  0000                     _SSP2BUF	set	3730
   331  0000                     _SSP2ADD	set	3731
   332  0000                     _SSP2CON2	set	3735
   333  0000                     _SSP2CON1	set	3734
   334  0000                     _SSP2STAT	set	3733
   335  0000                     _SSP2CON1bits	set	3734
   336  0000                     _SSP2CLKPPS	set	3727
   337  0000                     _INT1PPS	set	3746
   338  0000                     _INT2PPS	set	3747
   339  0000                     _RD0PPS	set	3839
   340  0000                     _RB4PPS	set	3827
   341  0000                     _INT0PPS	set	3745
   342  0000                     _RB1PPS	set	3824
   343  0000                     _SSP2DATPPS	set	3728
   344  0000                     _RX1PPS	set	3765
   345  0000                     _PMD5	set	3814
   346  0000                     _PMD4	set	3813
   347  0000                     _PMD3	set	3812
   348  0000                     _PMD2	set	3811
   349  0000                     _PMD1	set	3810
   350  0000                     _PMD0	set	3809
   351  0000                     _OSCTUNE	set	3805
   352  0000                     _OSCFRQ	set	3806
   353  0000                     _OSCEN	set	3804
   354  0000                     _OSCCON3	set	3802
   355  0000                     _OSCCON1	set	3800
   356  0000                     _PIR3bits	set	3789
   357  0000                     _PIE3bits	set	3781
   358  0000                     _PIE0bits	set	3778
   359  0000                     _PIR0bits	set	3786
   360  0000                     _PIE4bits	set	3782
   361  0000                     _PIR4bits	set	3790
   362  0000                     _ANSELBbits	set	3865
   363  0000                     _CLKRCON	set	3902
   364  0000                     _CLKRCLK	set	3903
   365  0000                     _FVRCONbits	set	3889
   366  0000                     _FVRCON	set	3889
   367  0000                     _DAC1CON1	set	3892
   368  0000                     _DAC1CON0	set	3891
   369  0000                     _RD2PPS	set	3841
   370  0000                     _IOCCPbits	set	3868
   371  0000                     _IOCCNbits	set	3867
   372  0000                     _IOCCFbits	set	3866
   373  0000                     _IOCBPbits	set	3860
   374  0000                     _IOCBNbits	set	3859
   375  0000                     _IOCBFbits	set	3858
   376  0000                     _IOCAPbits	set	3852
   377  0000                     _IOCANbits	set	3851
   378  0000                     _IOCAFbits	set	3850
   379  0000                     _SLRCONE	set	3883
   380  0000                     _SLRCOND	set	3875
   381  0000                     _SLRCONC	set	3870
   382  0000                     _SLRCONB	set	3862
   383  0000                     _SLRCONA	set	3854
   384  0000                     _ODCOND	set	3876
   385  0000                     _ODCONC	set	3871
   386  0000                     _ODCONB	set	3863
   387  0000                     _ODCONA	set	3855
   388  0000                     _ODCONE	set	3884
   389  0000                     _WPUC	set	3872
   390  0000                     _WPUA	set	3856
   391  0000                     _WPUB	set	3864
   392  0000                     _WPUE	set	3885
   393  0000                     _WPUD	set	3877
   394  0000                     _ANSELA	set	3857
   395  0000                     _ANSELE	set	3886
   396  0000                     _ANSELB	set	3865
   397  0000                     _ANSELC	set	3873
   398  0000                     _ANSELD	set	3878
   399  0000                     _SSP1STATbits	set	3989
   400  0000                     _SSP1CON1bits	set	3990
   401  0000                     _SSP1BUF	set	3986
   402  0000                     _SSP1CON2bits	set	3991
   403  0000                     _SSP1CON3bits	set	3992
   404  0000                     _SSP1MSK	set	3988
   405  0000                     _SSP1ADD	set	3987
   406  0000                     _SSP1CON3	set	3992
   407  0000                     _SSP1CON2	set	3991
   408  0000                     _SSP1CON1	set	3990
   409  0000                     _SSP1STAT	set	3989
   410  0000                     _TRISBbits	set	3977
   411  0000                     _LATEbits	set	3975
   412  0000                     _LATCbits	set	3973
   413  0000                     _LATDbits	set	3974
   414  0000                     _PORTCbits	set	3983
   415  0000                     _TRISDbits	set	3979
   416  0000                     _PR4	set	4022
   417  0000                     _TMR4	set	4021
   418  0000                     _T4CONbits	set	4023
   419  0000                     _T4RSTbits	set	4026
   420  0000                     _T4HLTbits	set	4024
   421  0000                     _T4CON	set	4023
   422  0000                     _T4TMR	set	4021
   423  0000                     _T4PR	set	4022
   424  0000                     _T4RST	set	4026
   425  0000                     _T4HLT	set	4024
   426  0000                     _T4CLKCON	set	4025
   427  0000                     _RC1REG	set	3993
   428  0000                     _RC1STAbits	set	3997
   429  0000                     _TX1REG	set	3994
   430  0000                     _TX1STAbits	set	3998
   431  0000                     _SP1BRGH	set	3996
   432  0000                     _SP1BRGL	set	3995
   433  0000                     _TX1STA	set	3998
   434  0000                     _RC1STA	set	3997
   435  0000                     _BAUD1CON	set	3999
   436  0000                     _TRISD	set	3979
   437  0000                     _TRISC	set	3978
   438  0000                     _TRISB	set	3977
   439  0000                     _TRISA	set	3976
   440  0000                     _TRISE	set	3980
   441  0000                     _LATC	set	3973
   442  0000                     _LATB	set	3972
   443  0000                     _LATA	set	3971
   444  0000                     _LATD	set	3974
   445  0000                     _LATE	set	3975
   446  0000                     _INTCONbits	set	4082
   447  0000                     _PR2	set	4028
   448  0000                     _TMR2	set	4027
   449  0000                     _T2CONbits	set	4029
   450  0000                     _T2RSTbits	set	4032
   451  0000                     _T2HLTbits	set	4030
   452  0000                     _T2CON	set	4029
   453  0000                     _T2TMR	set	4027
   454  0000                     _T2PR	set	4028
   455  0000                     _T2RST	set	4032
   456  0000                     _T2HLT	set	4030
   457  0000                     _T2CLKCON	set	4031
   458                           
   459                           ; #config settings
   460  0000                     
   461                           	psect	cinit
   462  0022E2                     __pcinit:
   463                           	opt callstack 0
   464  0022E2                     start_initialization:
   465                           	opt callstack 0
   466  0022E2                     __initialization:
   467                           	opt callstack 0
   468                           
   469                           ; Initialize objects allocated to COMRAM (12 bytes)
   470                           ; load TBLPTR registers with __pidataCOMRAM
   471  0022E2  0ED8               	movlw	low __pidataCOMRAM
   472  0022E4  6EF6               	movwf	tblptrl,c
   473  0022E6  0E29               	movlw	high __pidataCOMRAM
   474  0022E8  6EF7               	movwf	tblptrh,c
   475  0022EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   476  0022EC  6EF8               	movwf	tblptru,c
   477  0022EE  EE00  F045         	lfsr	0,__pdataCOMRAM
   478  0022F2  EE10 F00C          	lfsr	1,12
   479  0022F6                     copy_data0:
   480  0022F6  0009               	tblrd		*+
   481  0022F8  CFF5 FFEE          	movff	tablat,postinc0
   482  0022FC  50E5               	movf	postdec1,w,c
   483  0022FE  50E1               	movf	fsr1l,w,c
   484  002300  E1FA               	bnz	copy_data0
   485                           
   486                           ; Clear objects allocated to BANK1 (128 bytes)
   487  002302  EE01  F000         	lfsr	0,__pbssBANK1
   488  002306  0E80               	movlw	128
   489  002308                     clear_0:
   490  002308  6AEE               	clrf	postinc0,c
   491  00230A  06E8               	decf	wreg,f,c
   492  00230C  E1FD               	bnz	clear_0
   493                           
   494                           ; Clear objects allocated to BANK0 (112 bytes)
   495  00230E  EE00  F060         	lfsr	0,__pbssBANK0
   496  002312  0E70               	movlw	112
   497  002314                     clear_1:
   498  002314  6AEE               	clrf	postinc0,c
   499  002316  06E8               	decf	wreg,f,c
   500  002318  E1FD               	bnz	clear_1
   501                           
   502                           ; Clear objects allocated to COMRAM (48 bytes)
   503  00231A  EE00  F001         	lfsr	0,__pbssCOMRAM
   504  00231E  0E30               	movlw	48
   505  002320                     clear_2:
   506  002320  6AEE               	clrf	postinc0,c
   507  002322  06E8               	decf	wreg,f,c
   508  002324  E1FD               	bnz	clear_2
   509  002326                     end_of_initialization:
   510                           	opt callstack 0
   511  002326                     __end_of__initialization:
   512                           	opt callstack 0
   513  002326  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   514  002328  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   515  00232A  0100               	movlb	0
   516  00232C  EF15  F00C         	goto	_main	;jump to C main() function
   517                           
   518                           	psect	bssCOMRAM
   519  000001                     __pbssCOMRAM:
   520                           	opt callstack 0
   521  000001                     TMR4_ISR@CountCallBack:
   522                           	opt callstack 0
   523  000001                     	ds	2
   524  000003                     _RGB_B_BlinkCount:
   525                           	opt callstack 0
   526  000003                     	ds	2
   527  000005                     _RGB_B_Counter:
   528                           	opt callstack 0
   529  000005                     	ds	2
   530  000007                     _RGB_G_BlinkCount:
   531                           	opt callstack 0
   532  000007                     	ds	2
   533  000009                     _RGB_G_Counter:
   534                           	opt callstack 0
   535  000009                     	ds	2
   536  00000B                     _RGB_R_BlinkCount:
   537                           	opt callstack 0
   538  00000B                     	ds	2
   539  00000D                     _RGB_R_Counter:
   540                           	opt callstack 0
   541  00000D                     	ds	2
   542  00000F                     _B_BlinkCount:
   543                           	opt callstack 0
   544  00000F                     	ds	2
   545  000011                     _B_Counter:
   546                           	opt callstack 0
   547  000011                     	ds	2
   548  000013                     _G_BlinkCount:
   549                           	opt callstack 0
   550  000013                     	ds	2
   551  000015                     _G_Counter:
   552                           	opt callstack 0
   553  000015                     	ds	2
   554  000017                     _G_OffTime:
   555                           	opt callstack 0
   556  000017                     	ds	2
   557  000019                     _G_OnTime:
   558                           	opt callstack 0
   559  000019                     	ds	2
   560  00001B                     _R_BlinkCounter:
   561                           	opt callstack 0
   562  00001B                     	ds	2
   563  00001D                     _R_BlinkCount:
   564                           	opt callstack 0
   565  00001D                     	ds	2
   566  00001F                     _R_StartAfter:
   567                           	opt callstack 0
   568  00001F                     	ds	2
   569  000021                     _R_Counter:
   570                           	opt callstack 0
   571  000021                     	ds	2
   572  000023                     _R_Enabled:
   573                           	opt callstack 0
   574  000023                     	ds	2
   575  000025                     _R_OffTime:
   576                           	opt callstack 0
   577  000025                     	ds	2
   578  000027                     _R_OnTime:
   579                           	opt callstack 0
   580  000027                     	ds	2
   581  000029                     _SentI2CCmd:
   582                           	opt callstack 0
   583  000029                     	ds	1
   584  00002A                     _EXT_TARGET_RF_RX:
   585                           	opt callstack 0
   586  00002A                     	ds	1
   587  00002B                     _eusart1RxLastError:
   588                           	opt callstack 0
   589  00002B                     	ds	1
   590  00002C                     _eusart1RxCount:
   591                           	opt callstack 0
   592  00002C                     	ds	1
   593  00002D                     _eusart1RxTail:
   594                           	opt callstack 0
   595  00002D                     	ds	1
   596  00002E                     _eusart1RxHead:
   597                           	opt callstack 0
   598  00002E                     	ds	1
   599  00002F                     _eusart1TxTail:
   600                           	opt callstack 0
   601  00002F                     	ds	1
   602  000030                     _eusart1TxHead:
   603                           	opt callstack 0
   604  000030                     	ds	1
   605                           
   606                           	psect	dataCOMRAM
   607  000045                     __pdataCOMRAM:
   608                           	opt callstack 0
   609  000045                     _RGB_B_State:
   610                           	opt callstack 0
   611  000045                     	ds	2
   612  000047                     _RGB_G_State:
   613                           	opt callstack 0
   614  000047                     	ds	2
   615  000049                     _RGB_R_State:
   616                           	opt callstack 0
   617  000049                     	ds	2
   618  00004B                     _B_State:
   619                           	opt callstack 0
   620  00004B                     	ds	2
   621  00004D                     _G_State:
   622                           	opt callstack 0
   623  00004D                     	ds	2
   624  00004F                     _R_State:
   625                           	opt callstack 0
   626  00004F                     	ds	2
   627                           
   628                           	psect	bssBANK0
   629  000060                     __pbssBANK0:
   630                           	opt callstack 0
   631  000060                     _eusart1RxStatusBuffer:
   632                           	opt callstack 0
   633  000060                     	ds	64
   634  0000A0                     _spi2_interruptHandler:
   635                           	opt callstack 0
   636  0000A0                     	ds	2
   637  0000A2                     _RGB_B_BlinkCounter:
   638                           	opt callstack 0
   639  0000A2                     	ds	2
   640  0000A4                     _RGB_B_StartAfter:
   641                           	opt callstack 0
   642  0000A4                     	ds	2
   643  0000A6                     _RGB_B_Enabled:
   644                           	opt callstack 0
   645  0000A6                     	ds	2
   646  0000A8                     _RGB_B_OffTime:
   647                           	opt callstack 0
   648  0000A8                     	ds	2
   649  0000AA                     _RGB_B_OnTime:
   650                           	opt callstack 0
   651  0000AA                     	ds	2
   652  0000AC                     _RGB_G_BlinkCounter:
   653                           	opt callstack 0
   654  0000AC                     	ds	2
   655  0000AE                     _RGB_G_StartAfter:
   656                           	opt callstack 0
   657  0000AE                     	ds	2
   658  0000B0                     _RGB_G_Enabled:
   659                           	opt callstack 0
   660  0000B0                     	ds	2
   661  0000B2                     _RGB_G_OffTime:
   662                           	opt callstack 0
   663  0000B2                     	ds	2
   664  0000B4                     _RGB_G_OnTime:
   665                           	opt callstack 0
   666  0000B4                     	ds	2
   667  0000B6                     _RGB_R_BlinkCounter:
   668                           	opt callstack 0
   669  0000B6                     	ds	2
   670  0000B8                     _RGB_R_StartAfter:
   671                           	opt callstack 0
   672  0000B8                     	ds	2
   673  0000BA                     _RGB_R_Enabled:
   674                           	opt callstack 0
   675  0000BA                     	ds	2
   676  0000BC                     _RGB_R_OffTime:
   677                           	opt callstack 0
   678  0000BC                     	ds	2
   679  0000BE                     _RGB_R_OnTime:
   680                           	opt callstack 0
   681  0000BE                     	ds	2
   682  0000C0                     _B_BlinkCounter:
   683                           	opt callstack 0
   684  0000C0                     	ds	2
   685  0000C2                     _B_StartAfter:
   686                           	opt callstack 0
   687  0000C2                     	ds	2
   688  0000C4                     _B_Enabled:
   689                           	opt callstack 0
   690  0000C4                     	ds	2
   691  0000C6                     _B_OffTime:
   692                           	opt callstack 0
   693  0000C6                     	ds	2
   694  0000C8                     _B_OnTime:
   695                           	opt callstack 0
   696  0000C8                     	ds	2
   697  0000CA                     _G_BlinkCounter:
   698                           	opt callstack 0
   699  0000CA                     	ds	2
   700  0000CC                     _G_StartAfter:
   701                           	opt callstack 0
   702  0000CC                     	ds	2
   703  0000CE                     _G_Enabled:
   704                           	opt callstack 0
   705  0000CE                     	ds	2
   706                           
   707                           	psect	bssBANK1
   708  000100                     __pbssBANK1:
   709                           	opt callstack 0
   710  000100                     _eusart1RxBuffer:
   711                           	opt callstack 0
   712  000100                     	ds	64
   713  000140                     _eusart1TxBuffer:
   714                           	opt callstack 0
   715  000140                     	ds	64
   716                           
   717                           	psect	cstackBANK1
   718  000180                     __pcstackBANK1:
   719                           	opt callstack 0
   720  000180                     MRF89XA_SetMode@mask:
   721                           	opt callstack 0
   722  000180                     MRF89XA_SetModulation@Modulation:
   723                           	opt callstack 0
   724  000180                     SetLedBlink@ledIndex:
   725                           	opt callstack 0
   726  000180                     Delay_Xms@i:
   727                           	opt callstack 0
   728                           
   729                           ; 4 bytes @ 0x0
   730  000180                     	ds	1
   731  000181                     MRF89XA_SetMode@Mode:
   732                           	opt callstack 0
   733  000181                     MRF89XA_SetModulation@mask:
   734                           	opt callstack 0
   735                           
   736                           ; 1 bytes @ 0x1
   737  000181                     	ds	1
   738  000182                     MRF89XA_Initialize@Mode:
   739                           	opt callstack 0
   740  000182                     SetLedBlink@OnTime:
   741                           	opt callstack 0
   742                           
   743                           ; 2 bytes @ 0x2
   744  000182                     	ds	1
   745  000183                     MRF89XA_Initialize@Modulation:
   746                           	opt callstack 0
   747                           
   748                           ; 1 bytes @ 0x3
   749  000183                     	ds	1
   750  000184                     MRF89XA_Initialize@Address:
   751                           	opt callstack 0
   752  000184                     SetLedBlink@OffTime:
   753                           	opt callstack 0
   754                           
   755                           ; 2 bytes @ 0x4
   756  000184                     	ds	2
   757  000186                     SetLedBlink@StartAfter:
   758                           	opt callstack 0
   759                           
   760                           ; 2 bytes @ 0x6
   761  000186                     	ds	2
   762  000188                     SetLedBlink@BlinkCount:
   763                           	opt callstack 0
   764                           
   765                           ; 2 bytes @ 0x8
   766  000188                     	ds	2
   767                           
   768                           	psect	cstackBANK0
   769  0000F8                     __pcstackBANK0:
   770                           	opt callstack 0
   771  0000F8                     ??_spi2_open:
   772  0000F8                     EUSART1_Read@readValue:
   773                           	opt callstack 0
   774  0000F8                     EUSART1_Write@txData:
   775                           	opt callstack 0
   776  0000F8                     spi2_exchangeByte@b:
   777                           	opt callstack 0
   778  0000F8                     GetTarget@Address:
   779                           	opt callstack 0
   780  0000F8                     MRF89XA_GetAddress@Read:
   781                           	opt callstack 0
   782  0000F8                     TMR2_SetInterruptHandler@InterruptHandler:
   783                           	opt callstack 0
   784  0000F8                     INT0_SetInterruptHandler@InterruptHandler:
   785                           	opt callstack 0
   786  0000F8                     INT1_SetInterruptHandler@InterruptHandler:
   787                           	opt callstack 0
   788  0000F8                     INT2_SetInterruptHandler@InterruptHandler:
   789                           	opt callstack 0
   790  0000F8                     IOCAF0_SetInterruptHandler@InterruptHandler:
   791                           	opt callstack 0
   792  0000F8                     IOCAF1_SetInterruptHandler@InterruptHandler:
   793                           	opt callstack 0
   794  0000F8                     IOCAF3_SetInterruptHandler@InterruptHandler:
   795                           	opt callstack 0
   796  0000F8                     IOCAF4_SetInterruptHandler@InterruptHandler:
   797                           	opt callstack 0
   798  0000F8                     IOCBF5_SetInterruptHandler@InterruptHandler:
   799                           	opt callstack 0
   800  0000F8                     IOCCF3_SetInterruptHandler@InterruptHandler:
   801                           	opt callstack 0
   802  0000F8                     IOCCF4_SetInterruptHandler@InterruptHandler:
   803                           	opt callstack 0
   804  0000F8                     IOCCF5_SetInterruptHandler@InterruptHandler:
   805                           	opt callstack 0
   806  0000F8                     IOCCF6_SetInterruptHandler@InterruptHandler:
   807                           	opt callstack 0
   808  0000F8                     IOCCF7_SetInterruptHandler@InterruptHandler:
   809                           	opt callstack 0
   810  0000F8                     EUSART1_SetFramingErrorHandler@interruptHandler:
   811                           	opt callstack 0
   812  0000F8                     EUSART1_SetOverrunErrorHandler@interruptHandler:
   813                           	opt callstack 0
   814  0000F8                     EUSART1_SetErrorHandler@interruptHandler:
   815                           	opt callstack 0
   816  0000F8                     EUSART1_SetTxInterruptHandler@interruptHandler:
   817                           	opt callstack 0
   818  0000F8                     EUSART1_SetRxInterruptHandler@interruptHandler:
   819                           	opt callstack 0
   820  0000F8                     TMR4_SetInterruptHandler@InterruptHandler:
   821                           	opt callstack 0
   822  0000F8                     SetLed@ledIndex:
   823                           	opt callstack 0
   824  0000F8                     Delay_Xms@delay:
   825                           	opt callstack 0
   826                           
   827                           ; 4 bytes @ 0x0
   828  0000F8                     	ds	1
   829  0000F9                     spi2_open@spiUniqueConfiguration:
   830                           	opt callstack 0
   831  0000F9                     GetTarget@ret:
   832                           	opt callstack 0
   833  0000F9                     MRF89XA_SPI_ExchangeByte@byte:
   834                           	opt callstack 0
   835  0000F9                     MRF89XA_GetAddress@Address:
   836                           	opt callstack 0
   837                           
   838                           ; 1 bytes @ 0x1
   839  0000F9                     	ds	1
   840  0000FA                     spi_master_open@config:
   841                           	opt callstack 0
   842  0000FA                     MRF89XA_GetAddress@ret:
   843                           	opt callstack 0
   844  0000FA                     SetLed@Mode:
   845                           	opt callstack 0
   846                           
   847                           ; 2 bytes @ 0x2
   848  0000FA                     	ds	1
   849  0000FB                     MRF89XA_ExchangeConfig_A@Data:
   850                           	opt callstack 0
   851                           
   852                           ; 1 bytes @ 0x3
   853  0000FB                     	ds	1
   854  0000FC                     ??_Delay_Xms:
   855  0000FC                     MRF89XA_ExchangeConfig_A@Address:
   856                           	opt callstack 0
   857  0000FC                     SetLed@mode2:
   858                           	opt callstack 0
   859                           
   860                           ; 2 bytes @ 0x4
   861  0000FC                     	ds	1
   862  0000FD                     MRF89XA_ExchangeConfig_A@ret:
   863                           	opt callstack 0
   864                           
   865                           ; 1 bytes @ 0x5
   866  0000FD                     	ds	1
   867  0000FE                     MRF89XA_WriteConfig@Data:
   868                           	opt callstack 0
   869                           
   870                           ; 1 bytes @ 0x6
   871  0000FE                     	ds	1
   872  0000FF                     MRF89XA_WriteConfig@Address:
   873                           	opt callstack 0
   874                           
   875                           ; 1 bytes @ 0x7
   876  0000FF                     	ds	1
   877  000100                     
   878                           ; 1 bytes @ 0x8
   879                           
   880                           	psect	cstackCOMRAM
   881  000031                     __pcstackCOMRAM:
   882                           	opt callstack 0
   883  000031                     ??_I2C_Master_Send_ACK:
   884  000031                     i2spi2_exchangeByte@b:
   885                           	opt callstack 0
   886  000031                     i2MRF89XA_GetAddress@Read:
   887                           	opt callstack 0
   888  000031                     ToggleLed@ledIndex:
   889                           	opt callstack 0
   890  000031                     i2SetLed@ledIndex:
   891                           	opt callstack 0
   892  000031                     i2SetLedBlink@ledIndex:
   893                           	opt callstack 0
   894  000031                     i2Delay_Xms@delay:
   895                           	opt callstack 0
   896                           
   897                           ; 4 bytes @ 0x0
   898  000031                     	ds	1
   899  000032                     I2C_Master_Send_ACK@Ack:
   900                           	opt callstack 0
   901  000032                     i2MRF89XA_SPI_ExchangeByte@byte:
   902                           	opt callstack 0
   903  000032                     i2MRF89XA_GetAddress@Address:
   904                           	opt callstack 0
   905                           
   906                           ; 1 bytes @ 0x1
   907  000032                     	ds	1
   908  000033                     ??_ToggleLed:
   909  000033                     MRF89XA_ExchangeFifo@Data:
   910                           	opt callstack 0
   911  000033                     i2MRF89XA_GetAddress@ret:
   912                           	opt callstack 0
   913  000033                     i2SetLed@Mode:
   914                           	opt callstack 0
   915  000033                     i2SetLedBlink@OnTime:
   916                           	opt callstack 0
   917                           
   918                           ; 2 bytes @ 0x2
   919  000033                     	ds	1
   920  000034                     MRF89XA_ExchangeFifo@ret:
   921                           	opt callstack 0
   922  000034                     i2MRF89XA_ExchangeConfig_A@Data:
   923                           	opt callstack 0
   924                           
   925                           ; 1 bytes @ 0x3
   926  000034                     	ds	1
   927  000035                     ??i2_Delay_Xms:
   928  000035                     MRF89XA_WriteFifo@Data:
   929                           	opt callstack 0
   930  000035                     i2MRF89XA_ExchangeConfig_A@Address:
   931                           	opt callstack 0
   932  000035                     i2SetLed@mode2:
   933                           	opt callstack 0
   934  000035                     i2SetLedBlink@OffTime:
   935                           	opt callstack 0
   936                           
   937                           ; 2 bytes @ 0x4
   938  000035                     	ds	1
   939  000036                     i2MRF89XA_ExchangeConfig_A@ret:
   940                           	opt callstack 0
   941  000036                     i2Delay_Xms@i:
   942                           	opt callstack 0
   943                           
   944                           ; 4 bytes @ 0x5
   945  000036                     	ds	1
   946  000037                     MRF89XA_ReadConfig@Address:
   947                           	opt callstack 0
   948  000037                     i2SetLedBlink@StartAfter:
   949                           	opt callstack 0
   950                           
   951                           ; 2 bytes @ 0x6
   952  000037                     	ds	1
   953  000038                     MRF89XA_IsTxDone@reg:
   954                           	opt callstack 0
   955                           
   956                           ; 1 bytes @ 0x7
   957  000038                     	ds	1
   958  000039                     i2SetLedBlink@BlinkCount:
   959                           	opt callstack 0
   960                           
   961                           ; 2 bytes @ 0x8
   962  000039                     	ds	1
   963  00003A                     MRF89XA_SendData@Data:
   964                           	opt callstack 0
   965                           
   966                           ; 1 bytes @ 0x9
   967  00003A                     	ds	1
   968  00003B                     I2C_Master_Write@data:
   969                           	opt callstack 0
   970  00003B                     MRF89XA_SendData@TargetAddress:
   971                           	opt callstack 0
   972                           
   973                           ; 1 bytes @ 0xA
   974  00003B                     	ds	1
   975  00003C                     I2C_SendCommand@CMD:
   976                           	opt callstack 0
   977                           
   978                           ; 1 bytes @ 0xB
   979  00003C                     	ds	1
   980  00003D                     I2C_SendCommand@result:
   981                           	opt callstack 0
   982                           
   983                           ; 1 bytes @ 0xC
   984  00003D                     	ds	1
   985  00003E                     I2C_SendCommand@Target:
   986                           	opt callstack 0
   987                           
   988                           ; 1 bytes @ 0xD
   989  00003E                     	ds	1
   990  00003F                     ext_rf_runcmd@dx:
   991                           	opt callstack 0
   992                           
   993                           ; 1 bytes @ 0xE
   994  00003F                     	ds	1
   995  000040                     INT0_Custom_ISR@index:
   996                           	opt callstack 0
   997                           
   998                           ; 1 bytes @ 0xF
   999  000040                     	ds	1
  1000  000041                     ??_INTERRUPT_InterruptManager:
  1001                           
  1002                           ; 1 bytes @ 0x10
  1003  000041                     	ds	4
  1004                           
  1005 ;;
  1006 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1007 ;;
  1008 ;; *************** function _main *****************
  1009 ;; Defined at:
  1010 ;;		line 81 in file "main.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;		None
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1028 ;;Total ram usage:        0 bytes
  1029 ;; Hardware stack levels required when called:   17
  1030 ;; This function calls:
  1031 ;;		_Delay_Xms
  1032 ;;		_INT0_SetInterruptHandler
  1033 ;;		_MRF89XA_Initialize
  1034 ;;		_RunLoop
  1035 ;;		_SYSTEM_Initialize
  1036 ;;		_SetLedBlink
  1037 ;;		_TMR2_SetInterruptHandler
  1038 ;;		_ext_rf_initialize
  1039 ;; This function is called by:
  1040 ;;		Startup code after reset
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044                           	psect	text0
  1045  00182A                     __ptext0:
  1046                           	opt callstack 0
  1047  00182A                     _main:
  1048                           	opt callstack 14
  1049                           
  1050                           ;main.c: 84: SYSTEM_Initialize();
  1051                           
  1052                           ;incstack = 0
  1053  00182A  EC1D  F011         	call	_SYSTEM_Initialize	;wreg free
  1054  00182E  9085               	bcf	3973,0,c	;volatile
  1055  001830  8285               	bsf	3973,1,c	;volatile
  1056                           
  1057                           ;main.c: 91: ext_rf_initialize();
  1058  001832  EC0A  F015         	call	_ext_rf_initialize	;wreg free
  1059                           
  1060                           ;main.c: 98: SetLedBlink(RGB_R,20,40,0,1);
  1061  001836  0E00               	movlw	0
  1062  001838  0101               	movlb	1	; () banked
  1063  00183A  6F81               	movwf	(SetLedBlink@ledIndex+1)& (0+255),b
  1064  00183C  0E03               	movlw	3
  1065  00183E  6F80               	movwf	SetLedBlink@ledIndex& (0+255),b
  1066  001840  0E00               	movlw	0
  1067  001842  6F83               	movwf	(SetLedBlink@OnTime+1)& (0+255),b
  1068  001844  0E14               	movlw	20
  1069  001846  6F82               	movwf	SetLedBlink@OnTime& (0+255),b
  1070  001848  0E00               	movlw	0
  1071  00184A  6F85               	movwf	(SetLedBlink@OffTime+1)& (0+255),b
  1072  00184C  0E28               	movlw	40
  1073  00184E  6F84               	movwf	SetLedBlink@OffTime& (0+255),b
  1074  001850  0E00               	movlw	0
  1075  001852  6F87               	movwf	(SetLedBlink@StartAfter+1)& (0+255),b
  1076  001854  0E00               	movlw	0
  1077  001856  6F86               	movwf	SetLedBlink@StartAfter& (0+255),b
  1078  001858  0E00               	movlw	0
  1079  00185A  6F89               	movwf	(SetLedBlink@BlinkCount+1)& (0+255),b
  1080  00185C  0E01               	movlw	1
  1081  00185E  6F88               	movwf	SetLedBlink@BlinkCount& (0+255),b
  1082  001860  EC46  F00A         	call	_SetLedBlink	;wreg free
  1083                           
  1084                           ;main.c: 99: SetLedBlink(RGB_G,20,40,20,1);
  1085  001864  0E00               	movlw	0
  1086  001866  0101               	movlb	1	; () banked
  1087  001868  6F81               	movwf	(SetLedBlink@ledIndex+1)& (0+255),b
  1088  00186A  0E04               	movlw	4
  1089  00186C  6F80               	movwf	SetLedBlink@ledIndex& (0+255),b
  1090  00186E  0E00               	movlw	0
  1091  001870  6F83               	movwf	(SetLedBlink@OnTime+1)& (0+255),b
  1092  001872  0E14               	movlw	20
  1093  001874  6F82               	movwf	SetLedBlink@OnTime& (0+255),b
  1094  001876  0E00               	movlw	0
  1095  001878  6F85               	movwf	(SetLedBlink@OffTime+1)& (0+255),b
  1096  00187A  0E28               	movlw	40
  1097  00187C  6F84               	movwf	SetLedBlink@OffTime& (0+255),b
  1098  00187E  0E00               	movlw	0
  1099  001880  6F87               	movwf	(SetLedBlink@StartAfter+1)& (0+255),b
  1100  001882  0E14               	movlw	20
  1101  001884  6F86               	movwf	SetLedBlink@StartAfter& (0+255),b
  1102  001886  0E00               	movlw	0
  1103  001888  6F89               	movwf	(SetLedBlink@BlinkCount+1)& (0+255),b
  1104  00188A  0E01               	movlw	1
  1105  00188C  6F88               	movwf	SetLedBlink@BlinkCount& (0+255),b
  1106  00188E  EC46  F00A         	call	_SetLedBlink	;wreg free
  1107                           
  1108                           ;main.c: 100: SetLedBlink(RGB_B,20,40,40,1);
  1109  001892  0E00               	movlw	0
  1110  001894  0101               	movlb	1	; () banked
  1111  001896  6F81               	movwf	(SetLedBlink@ledIndex+1)& (0+255),b
  1112  001898  0E05               	movlw	5
  1113  00189A  6F80               	movwf	SetLedBlink@ledIndex& (0+255),b
  1114  00189C  0E00               	movlw	0
  1115  00189E  6F83               	movwf	(SetLedBlink@OnTime+1)& (0+255),b
  1116  0018A0  0E14               	movlw	20
  1117  0018A2  6F82               	movwf	SetLedBlink@OnTime& (0+255),b
  1118  0018A4  0E00               	movlw	0
  1119  0018A6  6F85               	movwf	(SetLedBlink@OffTime+1)& (0+255),b
  1120  0018A8  0E28               	movlw	40
  1121  0018AA  6F84               	movwf	SetLedBlink@OffTime& (0+255),b
  1122  0018AC  0E00               	movlw	0
  1123  0018AE  6F87               	movwf	(SetLedBlink@StartAfter+1)& (0+255),b
  1124  0018B0  0E28               	movlw	40
  1125  0018B2  6F86               	movwf	SetLedBlink@StartAfter& (0+255),b
  1126  0018B4  0E00               	movlw	0
  1127  0018B6  6F89               	movwf	(SetLedBlink@BlinkCount+1)& (0+255),b
  1128  0018B8  0E01               	movlw	1
  1129  0018BA  6F88               	movwf	SetLedBlink@BlinkCount& (0+255),b
  1130  0018BC  EC46  F00A         	call	_SetLedBlink	;wreg free
  1131                           
  1132                           ;main.c: 101: SetLedBlink(R,20,40,0,1);
  1133  0018C0  0E00               	movlw	0
  1134  0018C2  0101               	movlb	1	; () banked
  1135  0018C4  6F81               	movwf	(SetLedBlink@ledIndex+1)& (0+255),b
  1136  0018C6  0E00               	movlw	0
  1137  0018C8  6F80               	movwf	SetLedBlink@ledIndex& (0+255),b
  1138  0018CA  0E00               	movlw	0
  1139  0018CC  6F83               	movwf	(SetLedBlink@OnTime+1)& (0+255),b
  1140  0018CE  0E14               	movlw	20
  1141  0018D0  6F82               	movwf	SetLedBlink@OnTime& (0+255),b
  1142  0018D2  0E00               	movlw	0
  1143  0018D4  6F85               	movwf	(SetLedBlink@OffTime+1)& (0+255),b
  1144  0018D6  0E28               	movlw	40
  1145  0018D8  6F84               	movwf	SetLedBlink@OffTime& (0+255),b
  1146  0018DA  0E00               	movlw	0
  1147  0018DC  6F87               	movwf	(SetLedBlink@StartAfter+1)& (0+255),b
  1148  0018DE  0E00               	movlw	0
  1149  0018E0  6F86               	movwf	SetLedBlink@StartAfter& (0+255),b
  1150  0018E2  0E00               	movlw	0
  1151  0018E4  6F89               	movwf	(SetLedBlink@BlinkCount+1)& (0+255),b
  1152  0018E6  0E01               	movlw	1
  1153  0018E8  6F88               	movwf	SetLedBlink@BlinkCount& (0+255),b
  1154  0018EA  EC46  F00A         	call	_SetLedBlink	;wreg free
  1155                           
  1156                           ;main.c: 102: SetLedBlink(G,20,40,20,1);
  1157  0018EE  0E00               	movlw	0
  1158  0018F0  0101               	movlb	1	; () banked
  1159  0018F2  6F81               	movwf	(SetLedBlink@ledIndex+1)& (0+255),b
  1160  0018F4  0E01               	movlw	1
  1161  0018F6  6F80               	movwf	SetLedBlink@ledIndex& (0+255),b
  1162  0018F8  0E00               	movlw	0
  1163  0018FA  6F83               	movwf	(SetLedBlink@OnTime+1)& (0+255),b
  1164  0018FC  0E14               	movlw	20
  1165  0018FE  6F82               	movwf	SetLedBlink@OnTime& (0+255),b
  1166  001900  0E00               	movlw	0
  1167  001902  6F85               	movwf	(SetLedBlink@OffTime+1)& (0+255),b
  1168  001904  0E28               	movlw	40
  1169  001906  6F84               	movwf	SetLedBlink@OffTime& (0+255),b
  1170  001908  0E00               	movlw	0
  1171  00190A  6F87               	movwf	(SetLedBlink@StartAfter+1)& (0+255),b
  1172  00190C  0E14               	movlw	20
  1173  00190E  6F86               	movwf	SetLedBlink@StartAfter& (0+255),b
  1174  001910  0E00               	movlw	0
  1175  001912  6F89               	movwf	(SetLedBlink@BlinkCount+1)& (0+255),b
  1176  001914  0E01               	movlw	1
  1177  001916  6F88               	movwf	SetLedBlink@BlinkCount& (0+255),b
  1178  001918  EC46  F00A         	call	_SetLedBlink	;wreg free
  1179                           
  1180                           ;main.c: 103: SetLedBlink(B,20,40,40,1);
  1181  00191C  0E00               	movlw	0
  1182  00191E  0101               	movlb	1	; () banked
  1183  001920  6F81               	movwf	(SetLedBlink@ledIndex+1)& (0+255),b
  1184  001922  0E02               	movlw	2
  1185  001924  6F80               	movwf	SetLedBlink@ledIndex& (0+255),b
  1186  001926  0E00               	movlw	0
  1187  001928  6F83               	movwf	(SetLedBlink@OnTime+1)& (0+255),b
  1188  00192A  0E14               	movlw	20
  1189  00192C  6F82               	movwf	SetLedBlink@OnTime& (0+255),b
  1190  00192E  0E00               	movlw	0
  1191  001930  6F85               	movwf	(SetLedBlink@OffTime+1)& (0+255),b
  1192  001932  0E28               	movlw	40
  1193  001934  6F84               	movwf	SetLedBlink@OffTime& (0+255),b
  1194  001936  0E00               	movlw	0
  1195  001938  6F87               	movwf	(SetLedBlink@StartAfter+1)& (0+255),b
  1196  00193A  0E28               	movlw	40
  1197  00193C  6F86               	movwf	SetLedBlink@StartAfter& (0+255),b
  1198  00193E  0E00               	movlw	0
  1199  001940  6F89               	movwf	(SetLedBlink@BlinkCount+1)& (0+255),b
  1200  001942  0E01               	movlw	1
  1201  001944  6F88               	movwf	SetLedBlink@BlinkCount& (0+255),b
  1202  001946  EC46  F00A         	call	_SetLedBlink	;wreg free
  1203                           
  1204                           ;main.c: 106: (INTCONbits.GIE = 1);
  1205  00194A  8EF2               	bsf	4082,7,c	;volatile
  1206                           
  1207                           ;main.c: 108: (INTCONbits.PEIE = 1);
  1208  00194C  8CF2               	bsf	4082,6,c	;volatile
  1209  00194E  8085               	bsf	3973,0,c	;volatile
  1210  001950  9285               	bcf	3973,1,c	;volatile
  1211                           
  1212                           ;main.c: 115: Delay_Xms(600);
  1213  001952  0E58               	movlw	88
  1214  001954  0100               	movlb	0	; () banked
  1215  001956  6FF8               	movwf	Delay_Xms@delay& (0+255),b
  1216  001958  0E02               	movlw	2
  1217  00195A  6FF9               	movwf	(Delay_Xms@delay+1)& (0+255),b
  1218  00195C  0E00               	movlw	0
  1219  00195E  6FFA               	movwf	(Delay_Xms@delay+2)& (0+255),b
  1220  001960  0E00               	movlw	0
  1221  001962  6FFB               	movwf	(Delay_Xms@delay+3)& (0+255),b
  1222  001964  ECC1  F010         	call	_Delay_Xms	;wreg free
  1223                           
  1224                           ;main.c: 118: SetLedBlink(G,5,95,0,-1);
  1225  001968  0E00               	movlw	0
  1226  00196A  0101               	movlb	1	; () banked
  1227  00196C  6F81               	movwf	(SetLedBlink@ledIndex+1)& (0+255),b
  1228  00196E  0E01               	movlw	1
  1229  001970  6F80               	movwf	SetLedBlink@ledIndex& (0+255),b
  1230  001972  0E00               	movlw	0
  1231  001974  6F83               	movwf	(SetLedBlink@OnTime+1)& (0+255),b
  1232  001976  0E05               	movlw	5
  1233  001978  6F82               	movwf	SetLedBlink@OnTime& (0+255),b
  1234  00197A  0E00               	movlw	0
  1235  00197C  6F85               	movwf	(SetLedBlink@OffTime+1)& (0+255),b
  1236  00197E  0E5F               	movlw	95
  1237  001980  6F84               	movwf	SetLedBlink@OffTime& (0+255),b
  1238  001982  0E00               	movlw	0
  1239  001984  6F87               	movwf	(SetLedBlink@StartAfter+1)& (0+255),b
  1240  001986  0E00               	movlw	0
  1241  001988  6F86               	movwf	SetLedBlink@StartAfter& (0+255),b
  1242  00198A  0EFF               	movlw	255
  1243  00198C  6F89               	movwf	(SetLedBlink@BlinkCount+1)& (0+255),b
  1244  00198E  6988               	setf	SetLedBlink@BlinkCount& (0+255),b
  1245  001990  EC46  F00A         	call	_SetLedBlink	;wreg free
  1246                           
  1247                           ;main.c: 121: MRF89XA_Initialize(0x40, MRF89XA_MODE_TX, MRF89XA_MODULATION_OOK);
  1248  001994  0E01               	movlw	1
  1249  001996  0101               	movlb	1	; () banked
  1250  001998  6F82               	movwf	MRF89XA_Initialize@Mode& (0+255),b
  1251  00199A  0E05               	movlw	5
  1252  00199C  6F83               	movwf	MRF89XA_Initialize@Modulation& (0+255),b
  1253  00199E  0E40               	movlw	64
  1254  0019A0  ECAF  F00D         	call	_MRF89XA_Initialize
  1255                           
  1256                           ;main.c: 123: Delay_Xms(5);
  1257  0019A4  0E05               	movlw	5
  1258  0019A6  0100               	movlb	0	; () banked
  1259  0019A8  6FF8               	movwf	Delay_Xms@delay& (0+255),b
  1260  0019AA  0E00               	movlw	0
  1261  0019AC  6FF9               	movwf	(Delay_Xms@delay+1)& (0+255),b
  1262  0019AE  0E00               	movlw	0
  1263  0019B0  6FFA               	movwf	(Delay_Xms@delay+2)& (0+255),b
  1264  0019B2  0E00               	movlw	0
  1265  0019B4  6FFB               	movwf	(Delay_Xms@delay+3)& (0+255),b
  1266  0019B6  ECC1  F010         	call	_Delay_Xms	;wreg free
  1267                           
  1268                           ;main.c: 126: TMR2_SetInterruptHandler(TMR2_Custom_ISR);
  1269  0019BA  0E1E               	movlw	low _TMR2_Custom_ISR
  1270  0019BC  0100               	movlb	0	; () banked
  1271  0019BE  6FF8               	movwf	TMR2_SetInterruptHandler@InterruptHandler& (0+255),b
  1272  0019C0  0E0F               	movlw	high _TMR2_Custom_ISR
  1273  0019C2  6FF9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1274  0019C4  EC14  F015         	call	_TMR2_SetInterruptHandler	;wreg free
  1275                           
  1276                           ;main.c: 127: INT0_SetInterruptHandler(INT0_Custom_ISR);
  1277  0019C8  0E34               	movlw	low _INT0_Custom_ISR
  1278  0019CA  0100               	movlb	0	; () banked
  1279  0019CC  6FF8               	movwf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  1280  0019CE  0E29               	movlw	high _INT0_Custom_ISR
  1281  0019D0  6FF9               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1282  0019D2  EC55  F015         	call	_INT0_SetInterruptHandler	;wreg free
  1283  0019D6                     l6580:
  1284                           
  1285                           ;main.c: 130: {;main.c: 131: RunLoop();
  1286  0019D6  ECF1  F010         	call	_RunLoop	;wreg free
  1287                           
  1288                           ;main.c: 132: Delay_Xms(100);
  1289  0019DA  0E64               	movlw	100
  1290  0019DC  0100               	movlb	0	; () banked
  1291  0019DE  6FF8               	movwf	Delay_Xms@delay& (0+255),b
  1292  0019E0  0E00               	movlw	0
  1293  0019E2  6FF9               	movwf	(Delay_Xms@delay+1)& (0+255),b
  1294  0019E4  0E00               	movlw	0
  1295  0019E6  6FFA               	movwf	(Delay_Xms@delay+2)& (0+255),b
  1296  0019E8  0E00               	movlw	0
  1297  0019EA  6FFB               	movwf	(Delay_Xms@delay+3)& (0+255),b
  1298  0019EC  ECC1  F010         	call	_Delay_Xms	;wreg free
  1299  0019F0  D7F2               	goto	l6580
  1300  0019F2                     __end_of_main:
  1301                           	opt callstack 0
  1302                           
  1303 ;; *************** function _ext_rf_initialize *****************
  1304 ;; Defined at:
  1305 ;;		line 15 in file "ext_rf_receiver.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;		None
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, status,2, status,0, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1323 ;;Total ram usage:        0 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:   12
  1326 ;; This function calls:
  1327 ;;		_GetTarget
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text1
  1334  002A14                     __ptext1:
  1335                           	opt callstack 0
  1336  002A14                     _ext_rf_initialize:
  1337                           	opt callstack 18
  1338                           
  1339                           ;ext_rf_receiver.c: 16: EXT_TARGET_RF_RX = GetTarget(0x70);
  1340                           
  1341                           ;incstack = 0
  1342  002A14  0E70               	movlw	112
  1343  002A16  ECB2  F014         	call	_GetTarget
  1344  002A1A  6E2A               	movwf	_EXT_TARGET_RF_RX,c
  1345  002A1C  0012               	return		;funcret
  1346  002A1E                     __end_of_ext_rf_initialize:
  1347                           	opt callstack 0
  1348                           
  1349 ;; *************** function _GetTarget *****************
  1350 ;; Defined at:
  1351 ;;		line 447 in file "iic.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;  Address         1    wreg     unsigned char 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;  Address         1    0[BANK0 ] unsigned char 
  1356 ;;  ret             1    1[BANK0 ] unsigned char 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      unsigned char 
  1359 ;; Registers used:
  1360 ;;		wreg, status,2, status,0
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1367 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1370 ;;Total ram usage:        2 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:   11
  1373 ;; This function calls:
  1374 ;;		Nothing
  1375 ;; This function is called by:
  1376 ;;		_ext_rf_initialize
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text2
  1381  002964                     __ptext2:
  1382                           	opt callstack 0
  1383  002964                     _GetTarget:
  1384                           	opt callstack 18
  1385                           
  1386                           ;incstack = 0
  1387                           ;GetTarget@Address stored from wreg
  1388  002964  0100               	movlb	0	; () banked
  1389  002966  6FF8               	movwf	GetTarget@Address& (0+255),b
  1390                           
  1391                           ;iic.c: 448: unsigned char ret = Address << 1;
  1392  002968  0100               	movlb	0	; () banked
  1393  00296A  51F8               	movf	GetTarget@Address& (0+255),w,b
  1394  00296C  25F8               	addwf	GetTarget@Address& (0+255),w,b
  1395  00296E  6FF9               	movwf	GetTarget@ret& (0+255),b
  1396                           
  1397                           ;iic.c: 449: ret = ret & 0b11111110;
  1398  002970  51F9               	movf	GetTarget@ret& (0+255),w,b
  1399  002972  0BFE               	andlw	254
  1400  002974  6FF9               	movwf	GetTarget@ret& (0+255),b
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;iic.c: 450: return ret;
  1404  002976  51F9               	movf	GetTarget@ret& (0+255),w,b
  1405                           
  1406                           ; BSR set to: 0
  1407  002978  0012               	return		;funcret
  1408  00297A                     __end_of_GetTarget:
  1409                           	opt callstack 0
  1410                           
  1411 ;; *************** function _SYSTEM_Initialize *****************
  1412 ;; Defined at:
  1413 ;;		line 51 in file "mcc_generated_files/mcc.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;		None
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      void 
  1420 ;; Registers used:
  1421 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1431 ;;Total ram usage:        0 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:   14
  1434 ;; This function calls:
  1435 ;;		_CLKREF_Initialize
  1436 ;;		_DAC1_Initialize
  1437 ;;		_EUSART1_Initialize
  1438 ;;		_EXT_INT_Initialize
  1439 ;;		_FVR_Initialize
  1440 ;;		_I2C_Master_Init
  1441 ;;		_INTERRUPT_Initialize
  1442 ;;		_OSCILLATOR_Initialize
  1443 ;;		_PIN_MANAGER_Initialize
  1444 ;;		_PMD_Initialize
  1445 ;;		_SetLed
  1446 ;;		_TMR2_Initialize
  1447 ;;		_TMR4_Initialize
  1448 ;;		_spi_master_open
  1449 ;; This function is called by:
  1450 ;;		_main
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text3
  1455  00223A                     __ptext3:
  1456                           	opt callstack 0
  1457  00223A                     _SYSTEM_Initialize:
  1458                           	opt callstack 16
  1459                           
  1460                           ;mcc.c: 53: INTERRUPT_Initialize();
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;incstack = 0
  1464  00223A  ECA7  F015         	call	_INTERRUPT_Initialize	;wreg free
  1465                           
  1466                           ;mcc.c: 54: PMD_Initialize();
  1467  00223E  EC4B  F014         	call	_PMD_Initialize	;wreg free
  1468                           
  1469                           ;mcc.c: 55: PIN_MANAGER_Initialize();
  1470  002242  ECF9  F00C         	call	_PIN_MANAGER_Initialize	;wreg free
  1471                           
  1472                           ;mcc.c: 56: OSCILLATOR_Initialize();
  1473  002246  EC8E  F014         	call	_OSCILLATOR_Initialize	;wreg free
  1474                           
  1475                           ;mcc.c: 57: FVR_Initialize();
  1476  00224A  EC9A  F015         	call	_FVR_Initialize	;wreg free
  1477                           
  1478                           ;mcc.c: 58: TMR4_Initialize();
  1479  00224E  EC91  F012         	call	_TMR4_Initialize	;wreg free
  1480                           
  1481                           ;mcc.c: 59: DAC1_Initialize();
  1482  002252  ECF2  F014         	call	_DAC1_Initialize	;wreg free
  1483                           
  1484                           ;mcc.c: 60: TMR2_Initialize();
  1485  002256  ECA8  F012         	call	_TMR2_Initialize	;wreg free
  1486                           
  1487                           ;mcc.c: 61: EXT_INT_Initialize();
  1488  00225A  ECBD  F011         	call	_EXT_INT_Initialize	;wreg free
  1489                           
  1490                           ;mcc.c: 62: EUSART1_Initialize();
  1491  00225E  EC43  F010         	call	_EUSART1_Initialize	;wreg free
  1492                           
  1493                           ;mcc.c: 63: CLKREF_Initialize();
  1494  002262  ECF8  F014         	call	_CLKREF_Initialize	;wreg free
  1495                           
  1496                           ;mcc.c: 64: I2C_Master_Init();
  1497  002266  EC22  F012         	call	_I2C_Master_Init	;wreg free
  1498                           
  1499                           ;mcc.c: 65: if(spi_master_open(MASTER) == 0) {
  1500  00226A  0E00               	movlw	0
  1501  00226C  EC3D  F014         	call	_spi_master_open
  1502  002270  0900               	iorlw	0
  1503  002272  A4D8               	btfss	status,2,c
  1504  002274  0012               	return	
  1505                           
  1506                           ;mcc.c: 66: SetLed(R,ON);
  1507  002276  0E00               	movlw	0
  1508  002278  0100               	movlb	0	; () banked
  1509  00227A  6FF9               	movwf	(SetLed@ledIndex+1)& (0+255),b
  1510  00227C  0E00               	movlw	0
  1511  00227E  6FF8               	movwf	SetLed@ledIndex& (0+255),b
  1512  002280  0E00               	movlw	0
  1513  002282  6FFB               	movwf	(SetLed@Mode+1)& (0+255),b
  1514  002284  0E01               	movlw	1
  1515  002286  6FFA               	movwf	SetLed@Mode& (0+255),b
  1516  002288  EC60  F00F         	call	_SetLed	;wreg free
  1517  00228C  0012               	return		;funcret
  1518  00228E                     __end_of_SYSTEM_Initialize:
  1519                           	opt callstack 0
  1520                           
  1521 ;; *************** function _spi_master_open *****************
  1522 ;; Defined at:
  1523 ;;		line 40 in file "mcc_generated_files/drivers/spi_master.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  config          1    wreg     enum E122
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  config          1    2[BANK0 ] enum E122
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  1    wreg      unsigned char 
  1530 ;; Registers used:
  1531 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1540 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1541 ;;Total ram usage:        1 bytes
  1542 ;; Hardware stack levels used:    1
  1543 ;; Hardware stack levels required when called:   13
  1544 ;; This function calls:
  1545 ;;		_MASTER_open
  1546 ;; This function is called by:
  1547 ;;		_SYSTEM_Initialize
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text4
  1552  00287A                     __ptext4:
  1553                           	opt callstack 0
  1554  00287A                     _spi_master_open:
  1555                           	opt callstack 16
  1556                           
  1557                           ;incstack = 0
  1558                           ;spi_master_open@config stored from wreg
  1559  00287A  0100               	movlb	0	; () banked
  1560  00287C  6FFA               	movwf	spi_master_open@config& (0+255),b
  1561                           
  1562                           ;spi_master.c: 41: switch(config){
  1563  00287E  D005               	goto	l6102
  1564  002880                     l6092:
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;spi_master.c: 43: return MASTER_open();
  1568  002880  EC96  F015         	call	_MASTER_open	;wreg free
  1569  002884  0012               	return	
  1570  002886                     l6096:
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;spi_master.c: 45: return 0;
  1574  002886  0E00               	movlw	0
  1575  002888  0012               	return	
  1576  00288A                     l6102:
  1577  00288A  0100               	movlb	0	; () banked
  1578  00288C  51FA               	movf	spi_master_open@config& (0+255),w,b
  1579                           
  1580                           ; Switch size 1, requested type "simple"
  1581                           ; Number of cases is 1, Range of values is 0 to 0
  1582                           ; switch strategies available:
  1583                           ; Name         Instructions Cycles
  1584                           ; simple_byte            4     3 (average)
  1585                           ;	Chosen strategy is simple_byte
  1586  00288E  0A00               	xorlw	0	; case 0
  1587  002890  B4D8               	btfsc	status,2,c
  1588  002892  D7F6               	goto	l6092
  1589  002894  D7F8               	goto	l6096
  1590  002896                     __end_of_spi_master_open:
  1591                           	opt callstack 0
  1592                           
  1593 ;; *************** function _MASTER_open *****************
  1594 ;; Defined at:
  1595 ;;		line 35 in file "mcc_generated_files/drivers/spi_master.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;		None
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;		None
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      unsigned char 
  1602 ;; Registers used:
  1603 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1613 ;;Total ram usage:        0 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:   12
  1616 ;; This function calls:
  1617 ;;		_spi2_open
  1618 ;; This function is called by:
  1619 ;;		_spi_master_open
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           	psect	text5
  1624  002B2C                     __ptext5:
  1625                           	opt callstack 0
  1626  002B2C                     _MASTER_open:
  1627                           	opt callstack 16
  1628                           
  1629                           ;spi_master.c: 36: return spi2_open(MASTER_CONFIG);
  1630                           
  1631                           ;incstack = 0
  1632  002B2C  0E00               	movlw	0
  1633  002B2E  ECAB  F00E         	call	_spi2_open
  1634  002B32  0012               	return		;funcret
  1635  002B34                     __end_of_MASTER_open:
  1636                           	opt callstack 0
  1637                           
  1638 ;; *************** function _spi2_open *****************
  1639 ;; Defined at:
  1640 ;;		line 46 in file "mcc_generated_files/spi2_driver.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;  spiUniqueCon    1    wreg     enum E9954
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;  spiUniqueCon    1    1[BANK0 ] enum E9954
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      unsigned char 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1658 ;;Total ram usage:        2 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:   11
  1661 ;; This function calls:
  1662 ;;		Nothing
  1663 ;; This function is called by:
  1664 ;;		_MASTER_open
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text6
  1669  001D56                     __ptext6:
  1670                           	opt callstack 0
  1671  001D56                     _spi2_open:
  1672                           	opt callstack 16
  1673                           
  1674                           ;incstack = 0
  1675                           ;spi2_open@spiUniqueConfiguration stored from wreg
  1676  001D56  0100               	movlb	0	; () banked
  1677  001D58  6FF9               	movwf	spi2_open@spiUniqueConfiguration& (0+255),b
  1678                           
  1679                           ;spi2_driver.c: 48: if(!SSP2CON1bits.SSPEN)
  1680  001D5A  010E               	movlb	14	; () banked
  1681  001D5C  BB96               	btfsc	150,5,b	;volatile
  1682  001D5E  D05A               	goto	l6020
  1683                           
  1684                           ; BSR set to: 14
  1685                           ;spi2_driver.c: 49: {;spi2_driver.c: 51: SSP2CLKPPS = 24;
  1686  001D60  0E18               	movlw	24
  1687  001D62  6F8F               	movwf	143,b	;volatile
  1688                           
  1689                           ;spi2_driver.c: 52: SSP2DATPPS = 25;
  1690  001D64  0E19               	movlw	25
  1691  001D66  6F90               	movwf	144,b	;volatile
  1692                           
  1693                           ;spi2_driver.c: 53: RD0PPS = 17;
  1694  001D68  0E11               	movlw	17
  1695  001D6A  6FFF               	movwf	255,b	;volatile
  1696                           
  1697                           ;spi2_driver.c: 54: RD2PPS = 18;
  1698  001D6C  0E12               	movlw	18
  1699  001D6E  010F               	movlb	15	; () banked
  1700  001D70  6F01               	movwf	1,b	;volatile
  1701                           
  1702                           ; BSR set to: 15
  1703                           ;spi2_driver.c: 57: SSP2STAT = spi2_configuration[spiUniqueConfiguration].stat;
  1704  001D72  0100               	movlb	0	; () banked
  1705  001D74  51F9               	movf	spi2_open@spiUniqueConfiguration& (0+255),w,b
  1706  001D76  0D04               	mullw	4
  1707  001D78  0E01               	movlw	1
  1708  001D7A  26F3               	addwf	prodl,f,c
  1709  001D7C  0E00               	movlw	0
  1710  001D7E  22F4               	addwfc	prodh,f,c
  1711  001D80  0E15               	movlw	low _spi2_configuration
  1712  001D82  24F3               	addwf	prodl,w,c
  1713  001D84  6EF6               	movwf	tblptrl,c
  1714  001D86  0E0F               	movlw	high _spi2_configuration
  1715  001D88  20F4               	addwfc	prodh,w,c
  1716  001D8A  6EF7               	movwf	tblptrh,c
  1717  001D8C                     	if	1	;There are 3 active tblptr bytes
  1718  001D8C  6AF8               	clrf	tblptru,c
  1719  001D8E  0E00               	movlw	low (__mediumconst shr (0+16))
  1720  001D90  22F8               	addwfc	tblptru,f,c
  1721  001D92                     	endif
  1722  001D92  0008               	tblrd		*
  1723  001D94  CFF5 FE95          	movff	tablat,3733	;volatile
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;spi2_driver.c: 58: SSP2CON1 = (unsigned char)(spi2_configuration[spiUniqueConfiguration
      +                          ].con1 | 0x20);
  1727  001D98  51F9               	movf	spi2_open@spiUniqueConfiguration& (0+255),w,b
  1728  001D9A  0D04               	mullw	4
  1729  001D9C  0E15               	movlw	low _spi2_configuration
  1730  001D9E  24F3               	addwf	prodl,w,c
  1731  001DA0  6EF6               	movwf	tblptrl,c
  1732  001DA2  0E0F               	movlw	high _spi2_configuration
  1733  001DA4  20F4               	addwfc	prodh,w,c
  1734  001DA6  6EF7               	movwf	tblptrh,c
  1735  001DA8                     	if	1	;There are 3 active tblptr bytes
  1736  001DA8  6AF8               	clrf	tblptru,c
  1737  001DAA  0E00               	movlw	low (__mediumconst shr (0+16))
  1738  001DAC  22F8               	addwfc	tblptru,f,c
  1739  001DAE                     	endif
  1740  001DAE  0008               	tblrd		*
  1741  001DB0  50F5               	movf	tablat,w,c
  1742  001DB2  0920               	iorlw	32
  1743  001DB4  010E               	movlb	14	; () banked
  1744  001DB6  6F96               	movwf	150,b	;volatile
  1745                           
  1746                           ; BSR set to: 14
  1747                           ;spi2_driver.c: 59: SSP2CON2 = 0x00;
  1748  001DB8  0E00               	movlw	0
  1749  001DBA  6F97               	movwf	151,b	;volatile
  1750                           
  1751                           ; BSR set to: 14
  1752                           ;spi2_driver.c: 60: SSP2ADD = (unsigned char)(spi2_configuration[spiUniqueConfiguration]
      +                          .add);
  1753  001DBC  0100               	movlb	0	; () banked
  1754  001DBE  51F9               	movf	spi2_open@spiUniqueConfiguration& (0+255),w,b
  1755  001DC0  0D04               	mullw	4
  1756  001DC2  0E02               	movlw	2
  1757  001DC4  26F3               	addwf	prodl,f,c
  1758  001DC6  0E00               	movlw	0
  1759  001DC8  22F4               	addwfc	prodh,f,c
  1760  001DCA  0E15               	movlw	low _spi2_configuration
  1761  001DCC  24F3               	addwf	prodl,w,c
  1762  001DCE  6EF6               	movwf	tblptrl,c
  1763  001DD0  0E0F               	movlw	high _spi2_configuration
  1764  001DD2  20F4               	addwfc	prodh,w,c
  1765  001DD4  6EF7               	movwf	tblptrh,c
  1766  001DD6                     	if	1	;There are 3 active tblptr bytes
  1767  001DD6  6AF8               	clrf	tblptru,c
  1768  001DD8  0E00               	movlw	low (__mediumconst shr (0+16))
  1769  001DDA  22F8               	addwfc	tblptru,f,c
  1770  001DDC                     	endif
  1771  001DDC  0008               	tblrd		*
  1772  001DDE  CFF5 FE93          	movff	tablat,3731	;volatile
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;spi2_driver.c: 62: TRISDbits.TRISD0 = (unsigned char)(spi2_configuration[spiUniqueConfi
      +                          guration].operation);
  1776  001DE2  51F9               	movf	spi2_open@spiUniqueConfiguration& (0+255),w,b
  1777  001DE4  0D04               	mullw	4
  1778  001DE6  0E03               	movlw	3
  1779  001DE8  26F3               	addwf	prodl,f,c
  1780  001DEA  0E00               	movlw	0
  1781  001DEC  22F4               	addwfc	prodh,f,c
  1782  001DEE  0E15               	movlw	low _spi2_configuration
  1783  001DF0  24F3               	addwf	prodl,w,c
  1784  001DF2  6EF6               	movwf	tblptrl,c
  1785  001DF4  0E0F               	movlw	high _spi2_configuration
  1786  001DF6  20F4               	addwfc	prodh,w,c
  1787  001DF8  6EF7               	movwf	tblptrh,c
  1788  001DFA                     	if	1	;There are 3 active tblptr bytes
  1789  001DFA  6AF8               	clrf	tblptru,c
  1790  001DFC  0E00               	movlw	low (__mediumconst shr (0+16))
  1791  001DFE  22F8               	addwfc	tblptru,f,c
  1792  001E00                     	endif
  1793  001E00  0008               	tblrd		*
  1794  001E02  CFF5 F0F8          	movff	tablat,??_spi2_open
  1795  001E06  508B               	movf	3979,w,c	;volatile
  1796  001E08  19F8               	xorwf	??_spi2_open& (0+255),w,b
  1797  001E0A  0BFE               	andlw	-2
  1798  001E0C  19F8               	xorwf	??_spi2_open& (0+255),w,b
  1799  001E0E  6E8B               	movwf	3979,c	;volatile
  1800                           
  1801                           ;spi2_driver.c: 63: return 1;
  1802  001E10  0E01               	movlw	1
  1803  001E12  0012               	return	
  1804  001E14                     l6020:
  1805                           
  1806                           ; BSR set to: 14
  1807                           ;spi2_driver.c: 64: };spi2_driver.c: 65: return 0;
  1808  001E14  0E00               	movlw	0
  1809  001E16  0012               	return		;funcret
  1810  001E18                     __end_of_spi2_open:
  1811                           	opt callstack 0
  1812                           
  1813 ;; *************** function _TMR4_Initialize *****************
  1814 ;; Defined at:
  1815 ;;		line 64 in file "mcc_generated_files/tmr4.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;		None
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;		None
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      void 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1833 ;;Total ram usage:        0 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:   12
  1836 ;; This function calls:
  1837 ;;		_TMR4_SetInterruptHandler
  1838 ;; This function is called by:
  1839 ;;		_SYSTEM_Initialize
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text7
  1844  002522                     __ptext7:
  1845                           	opt callstack 0
  1846  002522                     _TMR4_Initialize:
  1847                           	opt callstack 17
  1848                           
  1849                           ;tmr4.c: 69: T4CLKCON = 0x04;
  1850                           
  1851                           ;incstack = 0
  1852  002522  0E04               	movlw	4
  1853  002524  6EB9               	movwf	4025,c	;volatile
  1854                           
  1855                           ;tmr4.c: 72: T4HLT = 0x00;
  1856  002526  0E00               	movlw	0
  1857  002528  6EB8               	movwf	4024,c	;volatile
  1858                           
  1859                           ;tmr4.c: 75: T4RST = 0x00;
  1860  00252A  0E00               	movlw	0
  1861  00252C  6EBA               	movwf	4026,c	;volatile
  1862                           
  1863                           ;tmr4.c: 78: T4PR = 0x9A;
  1864  00252E  0E9A               	movlw	154
  1865  002530  6EB6               	movwf	4022,c	;volatile
  1866                           
  1867                           ;tmr4.c: 81: T4TMR = 0x00;
  1868  002532  0E00               	movlw	0
  1869  002534  6EB5               	movwf	4021,c	;volatile
  1870                           
  1871                           ;tmr4.c: 84: PIR4bits.TMR4IF = 0;
  1872  002536  010E               	movlb	14	; () banked
  1873  002538  97CE               	bcf	206,3,b	;volatile
  1874                           
  1875                           ; BSR set to: 14
  1876                           ;tmr4.c: 87: PIE4bits.TMR4IE = 1;
  1877  00253A  87C6               	bsf	198,3,b	;volatile
  1878                           
  1879                           ; BSR set to: 14
  1880                           ;tmr4.c: 90: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
  1881  00253C  0E5A               	movlw	low _TMR4_DefaultInterruptHandler
  1882  00253E  0100               	movlb	0	; () banked
  1883  002540  6FF8               	movwf	TMR4_SetInterruptHandler@InterruptHandler& (0+255),b
  1884  002542  0E2B               	movlw	high _TMR4_DefaultInterruptHandler
  1885  002544  6FF9               	movwf	(TMR4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1886  002546  EC0F  F015         	call	_TMR4_SetInterruptHandler	;wreg free
  1887                           
  1888                           ;tmr4.c: 93: T4CON = 0x99;
  1889  00254A  0E99               	movlw	153
  1890  00254C  6EB7               	movwf	4023,c	;volatile
  1891  00254E  0012               	return		;funcret
  1892  002550                     __end_of_TMR4_Initialize:
  1893                           	opt callstack 0
  1894                           
  1895 ;; *************** function _TMR4_SetInterruptHandler *****************
  1896 ;; Defined at:
  1897 ;;		line 193 in file "mcc_generated_files/tmr4.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  1900 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2, status,0
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1912 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1916 ;;Total ram usage:        2 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:   11
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_TMR4_Initialize
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text8
  1927  002A1E                     __ptext8:
  1928                           	opt callstack 0
  1929  002A1E                     _TMR4_SetInterruptHandler:
  1930                           	opt callstack 17
  1931                           
  1932                           ;tmr4.c: 194: TMR4_InterruptHandler = InterruptHandler;
  1933                           
  1934                           ;incstack = 0
  1935  002A1E  C0F8  F0D0         	movff	TMR4_SetInterruptHandler@InterruptHandler,_TMR4_InterruptHandler
  1936  002A22  C0F9  F0D1         	movff	TMR4_SetInterruptHandler@InterruptHandler+1,_TMR4_InterruptHandler+1
  1937  002A26  0012               	return		;funcret
  1938  002A28                     __end_of_TMR4_SetInterruptHandler:
  1939                           	opt callstack 0
  1940                           
  1941 ;; *************** function _TMR2_Initialize *****************
  1942 ;; Defined at:
  1943 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;		None
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;		None
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      void 
  1950 ;; Registers used:
  1951 ;;		wreg, status,2, status,0, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1961 ;;Total ram usage:        0 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:   12
  1964 ;; This function calls:
  1965 ;;		_TMR2_SetInterruptHandler
  1966 ;; This function is called by:
  1967 ;;		_SYSTEM_Initialize
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text9
  1972  002550                     __ptext9:
  1973                           	opt callstack 0
  1974  002550                     _TMR2_Initialize:
  1975                           	opt callstack 17
  1976                           
  1977                           ;tmr2.c: 69: T2CLKCON = 0x04;
  1978                           
  1979                           ;incstack = 0
  1980  002550  0E04               	movlw	4
  1981  002552  6EBF               	movwf	4031,c	;volatile
  1982                           
  1983                           ;tmr2.c: 72: T2HLT = 0x00;
  1984  002554  0E00               	movlw	0
  1985  002556  6EBE               	movwf	4030,c	;volatile
  1986                           
  1987                           ;tmr2.c: 75: T2RST = 0x00;
  1988  002558  0E00               	movlw	0
  1989  00255A  6EC0               	movwf	4032,c	;volatile
  1990                           
  1991                           ;tmr2.c: 78: T2PR = 0x9A;
  1992  00255C  0E9A               	movlw	154
  1993  00255E  6EBC               	movwf	4028,c	;volatile
  1994                           
  1995                           ;tmr2.c: 81: T2TMR = 0x00;
  1996  002560  0E00               	movlw	0
  1997  002562  6EBB               	movwf	4027,c	;volatile
  1998                           
  1999                           ;tmr2.c: 84: PIR4bits.TMR2IF = 0;
  2000  002564  010E               	movlb	14	; () banked
  2001  002566  93CE               	bcf	206,1,b	;volatile
  2002                           
  2003                           ; BSR set to: 14
  2004                           ;tmr2.c: 87: PIE4bits.TMR2IE = 1;
  2005  002568  83C6               	bsf	198,1,b	;volatile
  2006                           
  2007                           ; BSR set to: 14
  2008                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  2009  00256A  0E5C               	movlw	low _TMR2_DefaultInterruptHandler
  2010  00256C  0100               	movlb	0	; () banked
  2011  00256E  6FF8               	movwf	TMR2_SetInterruptHandler@InterruptHandler& (0+255),b
  2012  002570  0E2B               	movlw	high _TMR2_DefaultInterruptHandler
  2013  002572  6FF9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2014  002574  EC14  F015         	call	_TMR2_SetInterruptHandler	;wreg free
  2015                           
  2016                           ;tmr2.c: 93: T2CON = 0x90;
  2017  002578  0E90               	movlw	144
  2018  00257A  6EBD               	movwf	4029,c	;volatile
  2019  00257C  0012               	return		;funcret
  2020  00257E                     __end_of_TMR2_Initialize:
  2021                           	opt callstack 0
  2022                           
  2023 ;; *************** function _TMR2_SetInterruptHandler *****************
  2024 ;; Defined at:
  2025 ;;		line 186 in file "mcc_generated_files/tmr2.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  2028 ;;		 -> TMR2_Custom_ISR(1), TMR2_DefaultInterruptHandler(1), 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, status,2, status,0
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2040 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2043 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2044 ;;Total ram usage:        2 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:   11
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_TMR2_Initialize
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text10
  2056  002A28                     __ptext10:
  2057                           	opt callstack 0
  2058  002A28                     _TMR2_SetInterruptHandler:
  2059                           	opt callstack 19
  2060                           
  2061                           ;tmr2.c: 187: TMR2_InterruptHandler = InterruptHandler;
  2062                           
  2063                           ;incstack = 0
  2064  002A28  C0F8  F0F6         	movff	TMR2_SetInterruptHandler@InterruptHandler,_TMR2_InterruptHandler
  2065  002A2C  C0F9  F0F7         	movff	TMR2_SetInterruptHandler@InterruptHandler+1,_TMR2_InterruptHandler+1
  2066  002A30  0012               	return		;funcret
  2067  002A32                     __end_of_TMR2_SetInterruptHandler:
  2068                           	opt callstack 0
  2069                           
  2070 ;; *************** function _SetLed *****************
  2071 ;; Defined at:
  2072 ;;		line 11 in file "LedBlink.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  ledIndex        2    0[BANK0 ] int 
  2075 ;;  Mode            2    2[BANK0 ] int 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  mode2           2    4[BANK0 ] int 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2087 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2090 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2091 ;;Total ram usage:        6 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:   11
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_SYSTEM_Initialize
  2098 ;;		_SetLedBlinkMode
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text11
  2103  001EC0                     __ptext11:
  2104                           	opt callstack 0
  2105  001EC0                     _SetLed:
  2106                           	opt callstack 18
  2107                           
  2108                           ;LedBlink.c: 12: int mode2 = 1;
  2109                           
  2110                           ;incstack = 0
  2111  001EC0  0E00               	movlw	0
  2112  001EC2  0100               	movlb	0	; () banked
  2113  001EC4  6FFD               	movwf	(SetLed@mode2+1)& (0+255),b
  2114  001EC6  0E01               	movlw	1
  2115  001EC8  6FFC               	movwf	SetLed@mode2& (0+255),b
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;LedBlink.c: 13: if(Mode == ON)
  2119  001ECA  05FA               	decf	SetLed@Mode& (0+255),w,b
  2120  001ECC  11FB               	iorwf	(SetLed@Mode+1)& (0+255),w,b
  2121  001ECE  A4D8               	btfss	status,2,c
  2122  001ED0  D004               	goto	l6286
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;LedBlink.c: 14: mode2 = 0;
  2126  001ED2  0E00               	movlw	0
  2127  001ED4  6FFD               	movwf	(SetLed@mode2+1)& (0+255),b
  2128  001ED6  0E00               	movlw	0
  2129  001ED8  6FFC               	movwf	SetLed@mode2& (0+255),b
  2130  001EDA                     l6286:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;LedBlink.c: 16: if (ledIndex == R) {
  2134  001EDA  51F8               	movf	SetLed@ledIndex& (0+255),w,b
  2135  001EDC  11F9               	iorwf	(SetLed@ledIndex+1)& (0+255),w,b
  2136  001EDE  A4D8               	btfss	status,2,c
  2137  001EE0  D006               	goto	l6290
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;LedBlink.c: 17: LATDbits.LATD5 = mode2;
  2141  001EE2  B1FC               	btfsc	SetLed@mode2& (0+255),0,b
  2142  001EE4  D002               	bra	u5415
  2143  001EE6  9A86               	bcf	3974,5,c	;volatile
  2144  001EE8  D001               	bra	u5416
  2145  001EEA                     u5415:
  2146  001EEA  8A86               	bsf	3974,5,c	;volatile
  2147  001EEC                     u5416:
  2148                           
  2149                           ;LedBlink.c: 18: } else if (ledIndex == G) {
  2150  001EEC  0012               	return	
  2151  001EEE                     l6290:
  2152                           
  2153                           ; BSR set to: 0
  2154  001EEE  05F8               	decf	SetLed@ledIndex& (0+255),w,b
  2155  001EF0  11F9               	iorwf	(SetLed@ledIndex+1)& (0+255),w,b
  2156  001EF2  A4D8               	btfss	status,2,c
  2157  001EF4  D006               	goto	l6294
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;LedBlink.c: 19: LATDbits.LATD6 = mode2;
  2161  001EF6  B1FC               	btfsc	SetLed@mode2& (0+255),0,b
  2162  001EF8  D002               	bra	u5435
  2163  001EFA  9C86               	bcf	3974,6,c	;volatile
  2164  001EFC  D001               	bra	u5436
  2165  001EFE                     u5435:
  2166  001EFE  8C86               	bsf	3974,6,c	;volatile
  2167  001F00                     u5436:
  2168                           
  2169                           ;LedBlink.c: 20: } else if (ledIndex == B) {
  2170  001F00  0012               	return	
  2171  001F02                     l6294:
  2172                           
  2173                           ; BSR set to: 0
  2174  001F02  0E02               	movlw	2
  2175  001F04  19F8               	xorwf	SetLed@ledIndex& (0+255),w,b
  2176  001F06  11F9               	iorwf	(SetLed@ledIndex+1)& (0+255),w,b
  2177  001F08  A4D8               	btfss	status,2,c
  2178  001F0A  D006               	goto	l6298
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;LedBlink.c: 21: LATDbits.LATD7 = mode2;
  2182  001F0C  B1FC               	btfsc	SetLed@mode2& (0+255),0,b
  2183  001F0E  D002               	bra	u5455
  2184  001F10  9E86               	bcf	3974,7,c	;volatile
  2185  001F12  D001               	bra	u5456
  2186  001F14                     u5455:
  2187  001F14  8E86               	bsf	3974,7,c	;volatile
  2188  001F16                     u5456:
  2189                           
  2190                           ;LedBlink.c: 22: } else if (ledIndex == RGB_R) {
  2191  001F16  0012               	return	
  2192  001F18                     l6298:
  2193                           
  2194                           ; BSR set to: 0
  2195  001F18  0E03               	movlw	3
  2196  001F1A  19F8               	xorwf	SetLed@ledIndex& (0+255),w,b
  2197  001F1C  11F9               	iorwf	(SetLed@ledIndex+1)& (0+255),w,b
  2198  001F1E  A4D8               	btfss	status,2,c
  2199  001F20  D006               	goto	l6302
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;LedBlink.c: 23: LATEbits.LATE2 = mode2;
  2203  001F22  B1FC               	btfsc	SetLed@mode2& (0+255),0,b
  2204  001F24  D002               	bra	u5475
  2205  001F26  9487               	bcf	3975,2,c	;volatile
  2206  001F28  D001               	bra	u5476
  2207  001F2A                     u5475:
  2208  001F2A  8487               	bsf	3975,2,c	;volatile
  2209  001F2C                     u5476:
  2210                           
  2211                           ;LedBlink.c: 24: } else if (ledIndex == RGB_G) {
  2212  001F2C  0012               	return	
  2213  001F2E                     l6302:
  2214                           
  2215                           ; BSR set to: 0
  2216  001F2E  0E04               	movlw	4
  2217  001F30  19F8               	xorwf	SetLed@ledIndex& (0+255),w,b
  2218  001F32  11F9               	iorwf	(SetLed@ledIndex+1)& (0+255),w,b
  2219  001F34  A4D8               	btfss	status,2,c
  2220  001F36  D006               	goto	l6306
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;LedBlink.c: 25: LATEbits.LATE1 = mode2;
  2224  001F38  B1FC               	btfsc	SetLed@mode2& (0+255),0,b
  2225  001F3A  D002               	bra	u5495
  2226  001F3C  9287               	bcf	3975,1,c	;volatile
  2227  001F3E  D001               	bra	u5496
  2228  001F40                     u5495:
  2229  001F40  8287               	bsf	3975,1,c	;volatile
  2230  001F42                     u5496:
  2231                           
  2232                           ;LedBlink.c: 26: } else if (ledIndex == RGB_B) {
  2233  001F42  0012               	return	
  2234  001F44                     l6306:
  2235                           
  2236                           ; BSR set to: 0
  2237  001F44  0E05               	movlw	5
  2238  001F46  19F8               	xorwf	SetLed@ledIndex& (0+255),w,b
  2239  001F48  11F9               	iorwf	(SetLed@ledIndex+1)& (0+255),w,b
  2240  001F4A  A4D8               	btfss	status,2,c
  2241  001F4C  0012               	return	
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;LedBlink.c: 27: LATEbits.LATE0 = mode2;
  2245  001F4E  B1FC               	btfsc	SetLed@mode2& (0+255),0,b
  2246  001F50  D002               	bra	u5515
  2247  001F52  9087               	bcf	3975,0,c	;volatile
  2248  001F54  D001               	bra	u5516
  2249  001F56                     u5515:
  2250  001F56  8087               	bsf	3975,0,c	;volatile
  2251  001F58                     u5516:
  2252  001F58  0012               	return	
  2253  001F5A                     __end_of_SetLed:
  2254                           	opt callstack 0
  2255                           
  2256 ;; *************** function _PMD_Initialize *****************
  2257 ;; Defined at:
  2258 ;;		line 84 in file "mcc_generated_files/mcc.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;		None
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, status,2
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2276 ;;Total ram usage:        0 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:   11
  2279 ;; This function calls:
  2280 ;;		Nothing
  2281 ;; This function is called by:
  2282 ;;		_SYSTEM_Initialize
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text12
  2287  002896                     __ptext12:
  2288                           	opt callstack 0
  2289  002896                     _PMD_Initialize:
  2290                           	opt callstack 18
  2291                           
  2292                           ;mcc.c: 87: PMD0 = 0x00;
  2293                           
  2294                           ;incstack = 0
  2295  002896  0E00               	movlw	0
  2296  002898  010E               	movlb	14	; () banked
  2297  00289A  6FE1               	movwf	225,b	;volatile
  2298                           
  2299                           ;mcc.c: 89: PMD1 = 0x00;
  2300  00289C  0E00               	movlw	0
  2301  00289E  6FE2               	movwf	226,b	;volatile
  2302                           
  2303                           ;mcc.c: 91: PMD2 = 0x00;
  2304  0028A0  0E00               	movlw	0
  2305  0028A2  6FE3               	movwf	227,b	;volatile
  2306                           
  2307                           ;mcc.c: 93: PMD3 = 0x00;
  2308  0028A4  0E00               	movlw	0
  2309  0028A6  6FE4               	movwf	228,b	;volatile
  2310                           
  2311                           ;mcc.c: 95: PMD4 = 0x00;
  2312  0028A8  0E00               	movlw	0
  2313  0028AA  6FE5               	movwf	229,b	;volatile
  2314                           
  2315                           ;mcc.c: 97: PMD5 = 0x00;
  2316  0028AC  0E00               	movlw	0
  2317  0028AE  6FE6               	movwf	230,b	;volatile
  2318                           
  2319                           ; BSR set to: 14
  2320  0028B0  0012               	return		;funcret
  2321  0028B2                     __end_of_PMD_Initialize:
  2322                           	opt callstack 0
  2323                           
  2324 ;; *************** function _PIN_MANAGER_Initialize *****************
  2325 ;; Defined at:
  2326 ;;		line 66 in file "mcc_generated_files/pin_manager.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;		None
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;		None
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      void 
  2333 ;; Registers used:
  2334 ;;		wreg, status,2, status,0, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2344 ;;Total ram usage:        0 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:   12
  2347 ;; This function calls:
  2348 ;;		_IOCAF0_SetInterruptHandler
  2349 ;;		_IOCAF1_SetInterruptHandler
  2350 ;;		_IOCAF3_SetInterruptHandler
  2351 ;;		_IOCAF4_SetInterruptHandler
  2352 ;;		_IOCBF5_SetInterruptHandler
  2353 ;;		_IOCCF3_SetInterruptHandler
  2354 ;;		_IOCCF4_SetInterruptHandler
  2355 ;;		_IOCCF5_SetInterruptHandler
  2356 ;;		_IOCCF6_SetInterruptHandler
  2357 ;;		_IOCCF7_SetInterruptHandler
  2358 ;; This function is called by:
  2359 ;;		_SYSTEM_Initialize
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	text13
  2364  0019F2                     __ptext13:
  2365                           	opt callstack 0
  2366  0019F2                     _PIN_MANAGER_Initialize:
  2367                           	opt callstack 17
  2368                           
  2369                           ;pin_manager.c: 71: LATE = 0x07;
  2370                           
  2371                           ; BSR set to: 14
  2372                           ;incstack = 0
  2373  0019F2  0E07               	movlw	7
  2374  0019F4  6E87               	movwf	3975,c	;volatile
  2375                           
  2376                           ;pin_manager.c: 72: LATD = 0xF8;
  2377  0019F6  0EF8               	movlw	248
  2378  0019F8  6E86               	movwf	3974,c	;volatile
  2379                           
  2380                           ;pin_manager.c: 73: LATA = 0x00;
  2381  0019FA  0E00               	movlw	0
  2382  0019FC  6E83               	movwf	3971,c	;volatile
  2383                           
  2384                           ;pin_manager.c: 74: LATB = 0x00;
  2385  0019FE  0E00               	movlw	0
  2386  001A00  6E84               	movwf	3972,c	;volatile
  2387                           
  2388                           ;pin_manager.c: 75: LATC = 0x02;
  2389  001A02  0E02               	movlw	2
  2390  001A04  6E85               	movwf	3973,c	;volatile
  2391                           
  2392                           ;pin_manager.c: 80: TRISE = 0x00;
  2393  001A06  0E00               	movlw	0
  2394  001A08  6E8C               	movwf	3980,c	;volatile
  2395                           
  2396                           ;pin_manager.c: 81: TRISA = 0xFB;
  2397  001A0A  0EFB               	movlw	251
  2398  001A0C  6E88               	movwf	3976,c	;volatile
  2399                           
  2400                           ;pin_manager.c: 82: TRISB = 0xED;
  2401  001A0E  0EED               	movlw	237
  2402  001A10  6E89               	movwf	3977,c	;volatile
  2403                           
  2404                           ;pin_manager.c: 83: TRISC = 0xF8;
  2405  001A12  0EF8               	movlw	248
  2406  001A14  6E8A               	movwf	3978,c	;volatile
  2407                           
  2408                           ;pin_manager.c: 84: TRISD = 0x02;
  2409  001A16  0E02               	movlw	2
  2410  001A18  6E8B               	movwf	3979,c	;volatile
  2411                           
  2412                           ;pin_manager.c: 89: ANSELD = 0x00;
  2413  001A1A  0E00               	movlw	0
  2414  001A1C  010F               	movlb	15	; () banked
  2415  001A1E  6F26               	movwf	38,b	;volatile
  2416                           
  2417                           ;pin_manager.c: 90: ANSELC = 0x00;
  2418  001A20  0E00               	movlw	0
  2419  001A22  6F21               	movwf	33,b	;volatile
  2420                           
  2421                           ;pin_manager.c: 91: ANSELB = 0x00;
  2422  001A24  0E00               	movlw	0
  2423  001A26  6F19               	movwf	25,b	;volatile
  2424                           
  2425                           ;pin_manager.c: 92: ANSELE = 0x00;
  2426  001A28  0E00               	movlw	0
  2427  001A2A  6F2E               	movwf	46,b	;volatile
  2428                           
  2429                           ;pin_manager.c: 93: ANSELA = 0x00;
  2430  001A2C  0E00               	movlw	0
  2431  001A2E  6F11               	movwf	17,b	;volatile
  2432                           
  2433                           ;pin_manager.c: 98: WPUD = 0x00;
  2434  001A30  0E00               	movlw	0
  2435  001A32  6F25               	movwf	37,b	;volatile
  2436                           
  2437                           ;pin_manager.c: 99: WPUE = 0x00;
  2438  001A34  0E00               	movlw	0
  2439  001A36  6F2D               	movwf	45,b	;volatile
  2440                           
  2441                           ;pin_manager.c: 100: WPUB = 0x00;
  2442  001A38  0E00               	movlw	0
  2443  001A3A  6F18               	movwf	24,b	;volatile
  2444                           
  2445                           ;pin_manager.c: 101: WPUA = 0x00;
  2446  001A3C  0E00               	movlw	0
  2447  001A3E  6F10               	movwf	16,b	;volatile
  2448                           
  2449                           ;pin_manager.c: 102: WPUC = 0x00;
  2450  001A40  0E00               	movlw	0
  2451  001A42  6F20               	movwf	32,b	;volatile
  2452                           
  2453                           ;pin_manager.c: 107: ODCONE = 0x07;
  2454  001A44  0E07               	movlw	7
  2455  001A46  6F2C               	movwf	44,b	;volatile
  2456                           
  2457                           ;pin_manager.c: 108: ODCONA = 0x00;
  2458  001A48  0E00               	movlw	0
  2459  001A4A  6F0F               	movwf	15,b	;volatile
  2460                           
  2461                           ;pin_manager.c: 109: ODCONB = 0x00;
  2462  001A4C  0E00               	movlw	0
  2463  001A4E  6F17               	movwf	23,b	;volatile
  2464                           
  2465                           ;pin_manager.c: 110: ODCONC = 0x01;
  2466  001A50  0E01               	movlw	1
  2467  001A52  6F1F               	movwf	31,b	;volatile
  2468                           
  2469                           ;pin_manager.c: 111: ODCOND = 0xF8;
  2470  001A54  0EF8               	movlw	248
  2471  001A56  6F24               	movwf	36,b	;volatile
  2472                           
  2473                           ; BSR set to: 15
  2474                           ;pin_manager.c: 116: SLRCONA = 0xFF;
  2475  001A58  690E               	setf	14,b	;volatile
  2476                           
  2477                           ; BSR set to: 15
  2478                           ;pin_manager.c: 117: SLRCONB = 0xFF;
  2479  001A5A  6916               	setf	22,b	;volatile
  2480                           
  2481                           ; BSR set to: 15
  2482                           ;pin_manager.c: 118: SLRCONC = 0xFF;
  2483  001A5C  691E               	setf	30,b	;volatile
  2484                           
  2485                           ; BSR set to: 15
  2486                           ;pin_manager.c: 119: SLRCOND = 0xFF;
  2487  001A5E  6923               	setf	35,b	;volatile
  2488                           
  2489                           ;pin_manager.c: 120: SLRCONE = 0x07;
  2490  001A60  0E07               	movlw	7
  2491  001A62  6F2B               	movwf	43,b	;volatile
  2492                           
  2493                           ; BSR set to: 15
  2494                           ;pin_manager.c: 127: IOCAFbits.IOCAF0 = 0;
  2495  001A64  910A               	bcf	10,0,b	;volatile
  2496                           
  2497                           ; BSR set to: 15
  2498                           ;pin_manager.c: 129: IOCAFbits.IOCAF1 = 0;
  2499  001A66  930A               	bcf	10,1,b	;volatile
  2500                           
  2501                           ; BSR set to: 15
  2502                           ;pin_manager.c: 131: IOCAFbits.IOCAF3 = 0;
  2503  001A68  970A               	bcf	10,3,b	;volatile
  2504                           
  2505                           ; BSR set to: 15
  2506                           ;pin_manager.c: 133: IOCAFbits.IOCAF4 = 0;
  2507  001A6A  990A               	bcf	10,4,b	;volatile
  2508                           
  2509                           ; BSR set to: 15
  2510                           ;pin_manager.c: 135: IOCANbits.IOCAN0 = 1;
  2511  001A6C  810B               	bsf	11,0,b	;volatile
  2512                           
  2513                           ; BSR set to: 15
  2514                           ;pin_manager.c: 137: IOCANbits.IOCAN1 = 1;
  2515  001A6E  830B               	bsf	11,1,b	;volatile
  2516                           
  2517                           ; BSR set to: 15
  2518                           ;pin_manager.c: 139: IOCANbits.IOCAN3 = 1;
  2519  001A70  870B               	bsf	11,3,b	;volatile
  2520                           
  2521                           ; BSR set to: 15
  2522                           ;pin_manager.c: 141: IOCANbits.IOCAN4 = 1;
  2523  001A72  890B               	bsf	11,4,b	;volatile
  2524                           
  2525                           ; BSR set to: 15
  2526                           ;pin_manager.c: 143: IOCAPbits.IOCAP0 = 1;
  2527  001A74  810C               	bsf	12,0,b	;volatile
  2528                           
  2529                           ; BSR set to: 15
  2530                           ;pin_manager.c: 145: IOCAPbits.IOCAP1 = 1;
  2531  001A76  830C               	bsf	12,1,b	;volatile
  2532                           
  2533                           ; BSR set to: 15
  2534                           ;pin_manager.c: 147: IOCAPbits.IOCAP3 = 1;
  2535  001A78  870C               	bsf	12,3,b	;volatile
  2536                           
  2537                           ; BSR set to: 15
  2538                           ;pin_manager.c: 149: IOCAPbits.IOCAP4 = 1;
  2539  001A7A  890C               	bsf	12,4,b	;volatile
  2540                           
  2541                           ; BSR set to: 15
  2542                           ;pin_manager.c: 151: IOCBFbits.IOCBF5 = 0;
  2543  001A7C  9B12               	bcf	18,5,b	;volatile
  2544                           
  2545                           ; BSR set to: 15
  2546                           ;pin_manager.c: 153: IOCBNbits.IOCBN5 = 1;
  2547  001A7E  8B13               	bsf	19,5,b	;volatile
  2548                           
  2549                           ; BSR set to: 15
  2550                           ;pin_manager.c: 155: IOCBPbits.IOCBP5 = 1;
  2551  001A80  8B14               	bsf	20,5,b	;volatile
  2552                           
  2553                           ; BSR set to: 15
  2554                           ;pin_manager.c: 157: IOCCFbits.IOCCF3 = 0;
  2555  001A82  971A               	bcf	26,3,b	;volatile
  2556                           
  2557                           ; BSR set to: 15
  2558                           ;pin_manager.c: 159: IOCCFbits.IOCCF4 = 0;
  2559  001A84  991A               	bcf	26,4,b	;volatile
  2560                           
  2561                           ; BSR set to: 15
  2562                           ;pin_manager.c: 161: IOCCFbits.IOCCF5 = 0;
  2563  001A86  9B1A               	bcf	26,5,b	;volatile
  2564                           
  2565                           ; BSR set to: 15
  2566                           ;pin_manager.c: 163: IOCCFbits.IOCCF6 = 0;
  2567  001A88  9D1A               	bcf	26,6,b	;volatile
  2568                           
  2569                           ; BSR set to: 15
  2570                           ;pin_manager.c: 165: IOCCFbits.IOCCF7 = 0;
  2571  001A8A  9F1A               	bcf	26,7,b	;volatile
  2572                           
  2573                           ; BSR set to: 15
  2574                           ;pin_manager.c: 167: IOCCNbits.IOCCN3 = 1;
  2575  001A8C  871B               	bsf	27,3,b	;volatile
  2576                           
  2577                           ; BSR set to: 15
  2578                           ;pin_manager.c: 169: IOCCNbits.IOCCN4 = 1;
  2579  001A8E  891B               	bsf	27,4,b	;volatile
  2580                           
  2581                           ; BSR set to: 15
  2582                           ;pin_manager.c: 171: IOCCNbits.IOCCN5 = 1;
  2583  001A90  8B1B               	bsf	27,5,b	;volatile
  2584                           
  2585                           ; BSR set to: 15
  2586                           ;pin_manager.c: 173: IOCCNbits.IOCCN6 = 1;
  2587  001A92  8D1B               	bsf	27,6,b	;volatile
  2588                           
  2589                           ; BSR set to: 15
  2590                           ;pin_manager.c: 175: IOCCNbits.IOCCN7 = 1;
  2591  001A94  8F1B               	bsf	27,7,b	;volatile
  2592                           
  2593                           ; BSR set to: 15
  2594                           ;pin_manager.c: 177: IOCCPbits.IOCCP3 = 1;
  2595  001A96  871C               	bsf	28,3,b	;volatile
  2596                           
  2597                           ; BSR set to: 15
  2598                           ;pin_manager.c: 179: IOCCPbits.IOCCP4 = 1;
  2599  001A98  891C               	bsf	28,4,b	;volatile
  2600                           
  2601                           ; BSR set to: 15
  2602                           ;pin_manager.c: 181: IOCCPbits.IOCCP5 = 1;
  2603  001A9A  8B1C               	bsf	28,5,b	;volatile
  2604                           
  2605                           ; BSR set to: 15
  2606                           ;pin_manager.c: 183: IOCCPbits.IOCCP6 = 1;
  2607  001A9C  8D1C               	bsf	28,6,b	;volatile
  2608                           
  2609                           ; BSR set to: 15
  2610                           ;pin_manager.c: 185: IOCCPbits.IOCCP7 = 1;
  2611  001A9E  8F1C               	bsf	28,7,b	;volatile
  2612                           
  2613                           ; BSR set to: 15
  2614                           ;pin_manager.c: 190: IOCAF0_SetInterruptHandler(IOCAF0_DefaultInterruptHandler);
  2615  001AA0  0E70               	movlw	low _IOCAF0_DefaultInterruptHandler
  2616  001AA2  0100               	movlb	0	; () banked
  2617  001AA4  6FF8               	movwf	IOCAF0_SetInterruptHandler@InterruptHandler& (0+255),b
  2618  001AA6  0E2B               	movlw	high _IOCAF0_DefaultInterruptHandler
  2619  001AA8  6FF9               	movwf	(IOCAF0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2620  001AAA  EC46  F015         	call	_IOCAF0_SetInterruptHandler	;wreg free
  2621                           
  2622                           ;pin_manager.c: 191: IOCAF1_SetInterruptHandler(IOCAF1_DefaultInterruptHandler);
  2623  001AAE  0E6E               	movlw	low _IOCAF1_DefaultInterruptHandler
  2624  001AB0  0100               	movlb	0	; () banked
  2625  001AB2  6FF8               	movwf	IOCAF1_SetInterruptHandler@InterruptHandler& (0+255),b
  2626  001AB4  0E2B               	movlw	high _IOCAF1_DefaultInterruptHandler
  2627  001AB6  6FF9               	movwf	(IOCAF1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2628  001AB8  EC41  F015         	call	_IOCAF1_SetInterruptHandler	;wreg free
  2629                           
  2630                           ;pin_manager.c: 192: IOCAF3_SetInterruptHandler(IOCAF3_DefaultInterruptHandler);
  2631  001ABC  0E6C               	movlw	low _IOCAF3_DefaultInterruptHandler
  2632  001ABE  0100               	movlb	0	; () banked
  2633  001AC0  6FF8               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler& (0+255),b
  2634  001AC2  0E2B               	movlw	high _IOCAF3_DefaultInterruptHandler
  2635  001AC4  6FF9               	movwf	(IOCAF3_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2636  001AC6  EC3C  F015         	call	_IOCAF3_SetInterruptHandler	;wreg free
  2637                           
  2638                           ;pin_manager.c: 193: IOCAF4_SetInterruptHandler(IOCAF4_DefaultInterruptHandler);
  2639  001ACA  0E6A               	movlw	low _IOCAF4_DefaultInterruptHandler
  2640  001ACC  0100               	movlb	0	; () banked
  2641  001ACE  6FF8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler& (0+255),b
  2642  001AD0  0E2B               	movlw	high _IOCAF4_DefaultInterruptHandler
  2643  001AD2  6FF9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2644  001AD4  EC37  F015         	call	_IOCAF4_SetInterruptHandler	;wreg free
  2645                           
  2646                           ;pin_manager.c: 194: IOCBF5_SetInterruptHandler(IOCBF5_DefaultInterruptHandler);
  2647  001AD8  0E68               	movlw	low _IOCBF5_DefaultInterruptHandler
  2648  001ADA  0100               	movlb	0	; () banked
  2649  001ADC  6FF8               	movwf	IOCBF5_SetInterruptHandler@InterruptHandler& (0+255),b
  2650  001ADE  0E2B               	movlw	high _IOCBF5_DefaultInterruptHandler
  2651  001AE0  6FF9               	movwf	(IOCBF5_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2652  001AE2  EC32  F015         	call	_IOCBF5_SetInterruptHandler	;wreg free
  2653                           
  2654                           ;pin_manager.c: 195: IOCCF3_SetInterruptHandler(IOCCF3_DefaultInterruptHandler);
  2655  001AE6  0E66               	movlw	low _IOCCF3_DefaultInterruptHandler
  2656  001AE8  0100               	movlb	0	; () banked
  2657  001AEA  6FF8               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler& (0+255),b
  2658  001AEC  0E2B               	movlw	high _IOCCF3_DefaultInterruptHandler
  2659  001AEE  6FF9               	movwf	(IOCCF3_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2660  001AF0  EC2D  F015         	call	_IOCCF3_SetInterruptHandler	;wreg free
  2661                           
  2662                           ;pin_manager.c: 196: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
  2663  001AF4  0E64               	movlw	low _IOCCF4_DefaultInterruptHandler
  2664  001AF6  0100               	movlb	0	; () banked
  2665  001AF8  6FF8               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler& (0+255),b
  2666  001AFA  0E2B               	movlw	high _IOCCF4_DefaultInterruptHandler
  2667  001AFC  6FF9               	movwf	(IOCCF4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2668  001AFE  EC28  F015         	call	_IOCCF4_SetInterruptHandler	;wreg free
  2669                           
  2670                           ;pin_manager.c: 197: IOCCF5_SetInterruptHandler(IOCCF5_DefaultInterruptHandler);
  2671  001B02  0E62               	movlw	low _IOCCF5_DefaultInterruptHandler
  2672  001B04  0100               	movlb	0	; () banked
  2673  001B06  6FF8               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler& (0+255),b
  2674  001B08  0E2B               	movlw	high _IOCCF5_DefaultInterruptHandler
  2675  001B0A  6FF9               	movwf	(IOCCF5_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2676  001B0C  EC23  F015         	call	_IOCCF5_SetInterruptHandler	;wreg free
  2677                           
  2678                           ;pin_manager.c: 198: IOCCF6_SetInterruptHandler(IOCCF6_DefaultInterruptHandler);
  2679  001B10  0E60               	movlw	low _IOCCF6_DefaultInterruptHandler
  2680  001B12  0100               	movlb	0	; () banked
  2681  001B14  6FF8               	movwf	IOCCF6_SetInterruptHandler@InterruptHandler& (0+255),b
  2682  001B16  0E2B               	movlw	high _IOCCF6_DefaultInterruptHandler
  2683  001B18  6FF9               	movwf	(IOCCF6_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2684  001B1A  EC1E  F015         	call	_IOCCF6_SetInterruptHandler	;wreg free
  2685                           
  2686                           ;pin_manager.c: 199: IOCCF7_SetInterruptHandler(IOCCF7_DefaultInterruptHandler);
  2687  001B1E  0E5E               	movlw	low _IOCCF7_DefaultInterruptHandler
  2688  001B20  0100               	movlb	0	; () banked
  2689  001B22  6FF8               	movwf	IOCCF7_SetInterruptHandler@InterruptHandler& (0+255),b
  2690  001B24  0E2B               	movlw	high _IOCCF7_DefaultInterruptHandler
  2691  001B26  6FF9               	movwf	(IOCCF7_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2692  001B28  EC19  F015         	call	_IOCCF7_SetInterruptHandler	;wreg free
  2693                           
  2694                           ;pin_manager.c: 202: PIE0bits.IOCIE = 1;
  2695  001B2C  010E               	movlb	14	; () banked
  2696  001B2E  89C2               	bsf	194,4,b	;volatile
  2697                           
  2698                           ;pin_manager.c: 205: RD2PPS = 0x12;
  2699  001B30  0E12               	movlw	18
  2700  001B32  010F               	movlb	15	; () banked
  2701  001B34  6F01               	movwf	1,b	;volatile
  2702                           
  2703                           ;pin_manager.c: 206: RX1PPS = 0x08;
  2704  001B36  0E08               	movlw	8
  2705  001B38  010E               	movlb	14	; () banked
  2706  001B3A  6FB5               	movwf	181,b	;volatile
  2707                           
  2708                           ;pin_manager.c: 207: SSP2DATPPS = 0x19;
  2709  001B3C  0E19               	movlw	25
  2710  001B3E  6F90               	movwf	144,b	;volatile
  2711                           
  2712                           ;pin_manager.c: 208: RB1PPS = 0x09;
  2713  001B40  0E09               	movlw	9
  2714  001B42  6FF0               	movwf	240,b	;volatile
  2715                           
  2716                           ;pin_manager.c: 209: INT0PPS = 0x05;
  2717  001B44  0E05               	movlw	5
  2718  001B46  6FA1               	movwf	161,b	;volatile
  2719                           
  2720                           ;pin_manager.c: 210: RB4PPS = 0x14;
  2721  001B48  0E14               	movlw	20
  2722  001B4A  6FF3               	movwf	243,b	;volatile
  2723                           
  2724                           ;pin_manager.c: 211: RD0PPS = 0x11;
  2725  001B4C  0E11               	movlw	17
  2726  001B4E  6FFF               	movwf	255,b	;volatile
  2727                           
  2728                           ;pin_manager.c: 212: INT2PPS = 0x07;
  2729  001B50  0E07               	movlw	7
  2730  001B52  6FA3               	movwf	163,b	;volatile
  2731                           
  2732                           ;pin_manager.c: 213: INT1PPS = 0x06;
  2733  001B54  0E06               	movlw	6
  2734  001B56  6FA2               	movwf	162,b	;volatile
  2735                           
  2736                           ;pin_manager.c: 214: SSP2CLKPPS = 0x18;
  2737  001B58  0E18               	movlw	24
  2738  001B5A  6F8F               	movwf	143,b	;volatile
  2739                           
  2740                           ; BSR set to: 14
  2741  001B5C  0012               	return		;funcret
  2742  001B5E                     __end_of_PIN_MANAGER_Initialize:
  2743                           	opt callstack 0
  2744                           
  2745 ;; *************** function _IOCCF7_SetInterruptHandler *****************
  2746 ;; Defined at:
  2747 ;;		line 559 in file "mcc_generated_files/pin_manager.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  2750 ;;		 -> IOCCF7_DefaultInterruptHandler(1), 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;		None
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2762 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2766 ;;Total ram usage:        2 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:   11
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_PIN_MANAGER_Initialize
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text14
  2777  002A32                     __ptext14:
  2778                           	opt callstack 0
  2779  002A32                     _IOCCF7_SetInterruptHandler:
  2780                           	opt callstack 17
  2781                           
  2782                           ;pin_manager.c: 560: IOCCF7_InterruptHandler = InterruptHandler;
  2783                           
  2784                           ; BSR set to: 14
  2785                           ;incstack = 0
  2786  002A32  C0F8  F0D8         	movff	IOCCF7_SetInterruptHandler@InterruptHandler,_IOCCF7_InterruptHandler
  2787  002A36  C0F9  F0D9         	movff	IOCCF7_SetInterruptHandler@InterruptHandler+1,_IOCCF7_InterruptHandler+1
  2788  002A3A  0012               	return		;funcret
  2789  002A3C                     __end_of_IOCCF7_SetInterruptHandler:
  2790                           	opt callstack 0
  2791                           
  2792 ;; *************** function _IOCCF6_SetInterruptHandler *****************
  2793 ;; Defined at:
  2794 ;;		line 529 in file "mcc_generated_files/pin_manager.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  2797 ;;		 -> IOCCF6_DefaultInterruptHandler(1), 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2809 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2813 ;;Total ram usage:        2 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:   11
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_PIN_MANAGER_Initialize
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text15
  2824  002A3C                     __ptext15:
  2825                           	opt callstack 0
  2826  002A3C                     _IOCCF6_SetInterruptHandler:
  2827                           	opt callstack 17
  2828                           
  2829                           ;pin_manager.c: 530: IOCCF6_InterruptHandler = InterruptHandler;
  2830                           
  2831                           ;incstack = 0
  2832  002A3C  C0F8  F0DA         	movff	IOCCF6_SetInterruptHandler@InterruptHandler,_IOCCF6_InterruptHandler
  2833  002A40  C0F9  F0DB         	movff	IOCCF6_SetInterruptHandler@InterruptHandler+1,_IOCCF6_InterruptHandler+1
  2834  002A44  0012               	return		;funcret
  2835  002A46                     __end_of_IOCCF6_SetInterruptHandler:
  2836                           	opt callstack 0
  2837                           
  2838 ;; *************** function _IOCCF5_SetInterruptHandler *****************
  2839 ;; Defined at:
  2840 ;;		line 499 in file "mcc_generated_files/pin_manager.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  2843 ;;		 -> IOCCF5_DefaultInterruptHandler(1), 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;		None
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2855 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2859 ;;Total ram usage:        2 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:   11
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_PIN_MANAGER_Initialize
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text16
  2870  002A46                     __ptext16:
  2871                           	opt callstack 0
  2872  002A46                     _IOCCF5_SetInterruptHandler:
  2873                           	opt callstack 17
  2874                           
  2875                           ;pin_manager.c: 500: IOCCF5_InterruptHandler = InterruptHandler;
  2876                           
  2877                           ;incstack = 0
  2878  002A46  C0F8  F0DC         	movff	IOCCF5_SetInterruptHandler@InterruptHandler,_IOCCF5_InterruptHandler
  2879  002A4A  C0F9  F0DD         	movff	IOCCF5_SetInterruptHandler@InterruptHandler+1,_IOCCF5_InterruptHandler+1
  2880  002A4E  0012               	return		;funcret
  2881  002A50                     __end_of_IOCCF5_SetInterruptHandler:
  2882                           	opt callstack 0
  2883                           
  2884 ;; *************** function _IOCCF4_SetInterruptHandler *****************
  2885 ;; Defined at:
  2886 ;;		line 469 in file "mcc_generated_files/pin_manager.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  2889 ;;		 -> IOCCF4_DefaultInterruptHandler(1), 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;		None
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      void 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2901 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2905 ;;Total ram usage:        2 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:   11
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_PIN_MANAGER_Initialize
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text17
  2916  002A50                     __ptext17:
  2917                           	opt callstack 0
  2918  002A50                     _IOCCF4_SetInterruptHandler:
  2919                           	opt callstack 17
  2920                           
  2921                           ;pin_manager.c: 470: IOCCF4_InterruptHandler = InterruptHandler;
  2922                           
  2923                           ;incstack = 0
  2924  002A50  C0F8  F0DE         	movff	IOCCF4_SetInterruptHandler@InterruptHandler,_IOCCF4_InterruptHandler
  2925  002A54  C0F9  F0DF         	movff	IOCCF4_SetInterruptHandler@InterruptHandler+1,_IOCCF4_InterruptHandler+1
  2926  002A58  0012               	return		;funcret
  2927  002A5A                     __end_of_IOCCF4_SetInterruptHandler:
  2928                           	opt callstack 0
  2929                           
  2930 ;; *************** function _IOCCF3_SetInterruptHandler *****************
  2931 ;; Defined at:
  2932 ;;		line 439 in file "mcc_generated_files/pin_manager.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  2935 ;;		 -> IOCCF3_DefaultInterruptHandler(1), 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;		None
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      void 
  2940 ;; Registers used:
  2941 ;;		wreg, status,2, status,0
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2947 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2950 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2951 ;;Total ram usage:        2 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:   11
  2954 ;; This function calls:
  2955 ;;		Nothing
  2956 ;; This function is called by:
  2957 ;;		_PIN_MANAGER_Initialize
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text18
  2962  002A5A                     __ptext18:
  2963                           	opt callstack 0
  2964  002A5A                     _IOCCF3_SetInterruptHandler:
  2965                           	opt callstack 17
  2966                           
  2967                           ;pin_manager.c: 440: IOCCF3_InterruptHandler = InterruptHandler;
  2968                           
  2969                           ;incstack = 0
  2970  002A5A  C0F8  F0E0         	movff	IOCCF3_SetInterruptHandler@InterruptHandler,_IOCCF3_InterruptHandler
  2971  002A5E  C0F9  F0E1         	movff	IOCCF3_SetInterruptHandler@InterruptHandler+1,_IOCCF3_InterruptHandler+1
  2972  002A62  0012               	return		;funcret
  2973  002A64                     __end_of_IOCCF3_SetInterruptHandler:
  2974                           	opt callstack 0
  2975                           
  2976 ;; *************** function _IOCBF5_SetInterruptHandler *****************
  2977 ;; Defined at:
  2978 ;;		line 409 in file "mcc_generated_files/pin_manager.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  2981 ;;		 -> IOCBF5_DefaultInterruptHandler(1), 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;		None
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, status,2, status,0
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2993 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2996 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2997 ;;Total ram usage:        2 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; Hardware stack levels required when called:   11
  3000 ;; This function calls:
  3001 ;;		Nothing
  3002 ;; This function is called by:
  3003 ;;		_PIN_MANAGER_Initialize
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text19
  3008  002A64                     __ptext19:
  3009                           	opt callstack 0
  3010  002A64                     _IOCBF5_SetInterruptHandler:
  3011                           	opt callstack 17
  3012                           
  3013                           ;pin_manager.c: 410: IOCBF5_InterruptHandler = InterruptHandler;
  3014                           
  3015                           ;incstack = 0
  3016  002A64  C0F8  F0E2         	movff	IOCBF5_SetInterruptHandler@InterruptHandler,_IOCBF5_InterruptHandler
  3017  002A68  C0F9  F0E3         	movff	IOCBF5_SetInterruptHandler@InterruptHandler+1,_IOCBF5_InterruptHandler+1
  3018  002A6C  0012               	return		;funcret
  3019  002A6E                     __end_of_IOCBF5_SetInterruptHandler:
  3020                           	opt callstack 0
  3021                           
  3022 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  3023 ;; Defined at:
  3024 ;;		line 379 in file "mcc_generated_files/pin_manager.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3027 ;;		 -> IOCAF4_DefaultInterruptHandler(1), 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;		None
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg, status,2, status,0
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3039 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3043 ;;Total ram usage:        2 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:   11
  3046 ;; This function calls:
  3047 ;;		Nothing
  3048 ;; This function is called by:
  3049 ;;		_PIN_MANAGER_Initialize
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           	psect	text20
  3054  002A6E                     __ptext20:
  3055                           	opt callstack 0
  3056  002A6E                     _IOCAF4_SetInterruptHandler:
  3057                           	opt callstack 17
  3058                           
  3059                           ;pin_manager.c: 380: IOCAF4_InterruptHandler = InterruptHandler;
  3060                           
  3061                           ;incstack = 0
  3062  002A6E  C0F8  F0E4         	movff	IOCAF4_SetInterruptHandler@InterruptHandler,_IOCAF4_InterruptHandler
  3063  002A72  C0F9  F0E5         	movff	IOCAF4_SetInterruptHandler@InterruptHandler+1,_IOCAF4_InterruptHandler+1
  3064  002A76  0012               	return		;funcret
  3065  002A78                     __end_of_IOCAF4_SetInterruptHandler:
  3066                           	opt callstack 0
  3067                           
  3068 ;; *************** function _IOCAF3_SetInterruptHandler *****************
  3069 ;; Defined at:
  3070 ;;		line 349 in file "mcc_generated_files/pin_manager.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3073 ;;		 -> IOCAF3_DefaultInterruptHandler(1), 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      void 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3085 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3089 ;;Total ram usage:        2 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:   11
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		_PIN_MANAGER_Initialize
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text21
  3100  002A78                     __ptext21:
  3101                           	opt callstack 0
  3102  002A78                     _IOCAF3_SetInterruptHandler:
  3103                           	opt callstack 17
  3104                           
  3105                           ;pin_manager.c: 350: IOCAF3_InterruptHandler = InterruptHandler;
  3106                           
  3107                           ;incstack = 0
  3108  002A78  C0F8  F0E6         	movff	IOCAF3_SetInterruptHandler@InterruptHandler,_IOCAF3_InterruptHandler
  3109  002A7C  C0F9  F0E7         	movff	IOCAF3_SetInterruptHandler@InterruptHandler+1,_IOCAF3_InterruptHandler+1
  3110  002A80  0012               	return		;funcret
  3111  002A82                     __end_of_IOCAF3_SetInterruptHandler:
  3112                           	opt callstack 0
  3113                           
  3114 ;; *************** function _IOCAF1_SetInterruptHandler *****************
  3115 ;; Defined at:
  3116 ;;		line 319 in file "mcc_generated_files/pin_manager.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3119 ;;		 -> IOCAF1_DefaultInterruptHandler(1), 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      void 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3135 ;;Total ram usage:        2 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:   11
  3138 ;; This function calls:
  3139 ;;		Nothing
  3140 ;; This function is called by:
  3141 ;;		_PIN_MANAGER_Initialize
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text22
  3146  002A82                     __ptext22:
  3147                           	opt callstack 0
  3148  002A82                     _IOCAF1_SetInterruptHandler:
  3149                           	opt callstack 17
  3150                           
  3151                           ;pin_manager.c: 320: IOCAF1_InterruptHandler = InterruptHandler;
  3152                           
  3153                           ;incstack = 0
  3154  002A82  C0F8  F0E8         	movff	IOCAF1_SetInterruptHandler@InterruptHandler,_IOCAF1_InterruptHandler
  3155  002A86  C0F9  F0E9         	movff	IOCAF1_SetInterruptHandler@InterruptHandler+1,_IOCAF1_InterruptHandler+1
  3156  002A8A  0012               	return		;funcret
  3157  002A8C                     __end_of_IOCAF1_SetInterruptHandler:
  3158                           	opt callstack 0
  3159                           
  3160 ;; *************** function _IOCAF0_SetInterruptHandler *****************
  3161 ;; Defined at:
  3162 ;;		line 289 in file "mcc_generated_files/pin_manager.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3165 ;;		 -> IOCAF0_DefaultInterruptHandler(1), 
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;		None
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      void 
  3170 ;; Registers used:
  3171 ;;		wreg, status,2, status,0
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3177 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3180 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3181 ;;Total ram usage:        2 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:   11
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_PIN_MANAGER_Initialize
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text23
  3192  002A8C                     __ptext23:
  3193                           	opt callstack 0
  3194  002A8C                     _IOCAF0_SetInterruptHandler:
  3195                           	opt callstack 17
  3196                           
  3197                           ;pin_manager.c: 290: IOCAF0_InterruptHandler = InterruptHandler;
  3198                           
  3199                           ;incstack = 0
  3200  002A8C  C0F8  F0EA         	movff	IOCAF0_SetInterruptHandler@InterruptHandler,_IOCAF0_InterruptHandler
  3201  002A90  C0F9  F0EB         	movff	IOCAF0_SetInterruptHandler@InterruptHandler+1,_IOCAF0_InterruptHandler+1
  3202  002A94  0012               	return		;funcret
  3203  002A96                     __end_of_IOCAF0_SetInterruptHandler:
  3204                           	opt callstack 0
  3205                           
  3206 ;; *************** function _OSCILLATOR_Initialize *****************
  3207 ;; Defined at:
  3208 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3226 ;;Total ram usage:        0 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:   11
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_SYSTEM_Initialize
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text24
  3237  00291C                     __ptext24:
  3238                           	opt callstack 0
  3239  00291C                     _OSCILLATOR_Initialize:
  3240                           	opt callstack 18
  3241                           
  3242                           ;mcc.c: 73: OSCCON1 = 0x61;
  3243                           
  3244                           ;incstack = 0
  3245  00291C  0E61               	movlw	97
  3246  00291E  010E               	movlb	14	; () banked
  3247  002920  6FD8               	movwf	216,b	;volatile
  3248                           
  3249                           ;mcc.c: 75: OSCCON3 = 0x00;
  3250  002922  0E00               	movlw	0
  3251  002924  6FDA               	movwf	218,b	;volatile
  3252                           
  3253                           ;mcc.c: 77: OSCEN = 0x00;
  3254  002926  0E00               	movlw	0
  3255  002928  6FDC               	movwf	220,b	;volatile
  3256                           
  3257                           ;mcc.c: 79: OSCFRQ = 0x07;
  3258  00292A  0E07               	movlw	7
  3259  00292C  6FDE               	movwf	222,b	;volatile
  3260                           
  3261                           ;mcc.c: 81: OSCTUNE = 0x00;
  3262  00292E  0E00               	movlw	0
  3263  002930  6FDD               	movwf	221,b	;volatile
  3264                           
  3265                           ; BSR set to: 14
  3266  002932  0012               	return		;funcret
  3267  002934                     __end_of_OSCILLATOR_Initialize:
  3268                           	opt callstack 0
  3269                           
  3270 ;; *************** function _INTERRUPT_Initialize *****************
  3271 ;; Defined at:
  3272 ;;		line 53 in file "mcc_generated_files/interrupt_manager.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;		None
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      void 
  3279 ;; Registers used:
  3280 ;;		None
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3290 ;;Total ram usage:        0 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:   11
  3293 ;; This function calls:
  3294 ;;		Nothing
  3295 ;; This function is called by:
  3296 ;;		_SYSTEM_Initialize
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text25
  3301  002B4E                     __ptext25:
  3302                           	opt callstack 0
  3303  002B4E                     _INTERRUPT_Initialize:
  3304                           	opt callstack 18
  3305                           
  3306                           ;interrupt_manager.c: 56: INTCONbits.IPEN = 0;
  3307                           
  3308                           ; BSR set to: 14
  3309                           ;incstack = 0
  3310  002B4E  9AF2               	bcf	4082,5,c	;volatile
  3311  002B50  0012               	return		;funcret
  3312  002B52                     __end_of_INTERRUPT_Initialize:
  3313                           	opt callstack 0
  3314                           
  3315 ;; *************** function _I2C_Master_Init *****************
  3316 ;; Defined at:
  3317 ;;		line 38 in file "iic.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3335 ;;Total ram usage:        0 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:   11
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_SYSTEM_Initialize
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           	psect	text26
  3346  002444                     __ptext26:
  3347                           	opt callstack 0
  3348  002444                     _I2C_Master_Init:
  3349                           	opt callstack 18
  3350                           
  3351                           ;incstack = 0
  3352                           ;iic.c: 40: do { ANSELBbits.ANSELB2 = 0; } while(0);
  3353  002444  010F               	movlb	15	; () banked
  3354  002446  9519               	bcf	25,2,b	;volatile
  3355                           
  3356                           ; BSR set to: 15
  3357                           
  3358                           ;iic.c: 41: do { TRISBbits.TRISB2 = 1; } while(0);
  3359  002448  8489               	bsf	3977,2,c	;volatile
  3360                           
  3361                           ; BSR set to: 15
  3362                           ;iic.c: 42: SSP1CLKPPS = 0b00001010;
  3363  00244A  0E0A               	movlw	10
  3364  00244C  010E               	movlb	14	; () banked
  3365  00244E  6FB7               	movwf	183,b	;volatile
  3366                           
  3367                           ;iic.c: 43: RB2PPS = 0x0F;
  3368  002450  0E0F               	movlw	15
  3369  002452  6FF1               	movwf	241,b	;volatile
  3370                           
  3371                           ; BSR set to: 14
  3372  002454  010F               	movlb	15	; () banked
  3373  002456  9719               	bcf	25,3,b	;volatile
  3374                           
  3375                           ; BSR set to: 15
  3376  002458  8689               	bsf	3977,3,c	;volatile
  3377                           
  3378                           ; BSR set to: 15
  3379                           ;iic.c: 47: SSP1DATPPS = 0b00001011;
  3380  00245A  0E0B               	movlw	11
  3381  00245C  010E               	movlb	14	; () banked
  3382  00245E  6FB8               	movwf	184,b	;volatile
  3383                           
  3384                           ;iic.c: 48: RB3PPS = 0x10;
  3385  002460  0E10               	movlw	16
  3386  002462  6FF2               	movwf	242,b	;volatile
  3387                           
  3388                           ;iic.c: 50: SSP1STAT = 0b00000000;
  3389  002464  0E00               	movlw	0
  3390  002466  6E95               	movwf	3989,c	;volatile
  3391                           
  3392                           ;iic.c: 61: SSP1CON1 = 0b00101000;
  3393  002468  0E28               	movlw	40
  3394  00246A  6E96               	movwf	3990,c	;volatile
  3395                           
  3396                           ;iic.c: 68: SSP1CON2 = 0b00000000;
  3397  00246C  0E00               	movlw	0
  3398  00246E  6E97               	movwf	3991,c	;volatile
  3399                           
  3400                           ;iic.c: 79: SSP1CON3 = 0x00;
  3401  002470  0E00               	movlw	0
  3402  002472  6E98               	movwf	3992,c	;volatile
  3403                           
  3404                           ;iic.c: 81: SSP1ADD = 0xEF;
  3405  002474  0EEF               	movlw	239
  3406  002476  6E93               	movwf	3987,c	;volatile
  3407                           
  3408                           ; BSR set to: 14
  3409                           ;iic.c: 83: PIR3bits.BCL1IF = 0;
  3410  002478  93CD               	bcf	205,1,b	;volatile
  3411                           
  3412                           ; BSR set to: 14
  3413                           ;iic.c: 85: PIE3bits.BCL1IE = 1;
  3414  00247A  83C5               	bsf	197,1,b	;volatile
  3415                           
  3416                           ; BSR set to: 14
  3417  00247C  0012               	return		;funcret
  3418  00247E                     __end_of_I2C_Master_Init:
  3419                           	opt callstack 0
  3420                           
  3421 ;; *************** function _FVR_Initialize *****************
  3422 ;; Defined at:
  3423 ;;		line 58 in file "mcc_generated_files/fvr.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;		None
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;		None
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      void 
  3430 ;; Registers used:
  3431 ;;		wreg, status,2
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3441 ;;Total ram usage:        0 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:   11
  3444 ;; This function calls:
  3445 ;;		Nothing
  3446 ;; This function is called by:
  3447 ;;		_SYSTEM_Initialize
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text27
  3452  002B34                     __ptext27:
  3453                           	opt callstack 0
  3454  002B34                     _FVR_Initialize:
  3455                           	opt callstack 18
  3456                           
  3457                           ;fvr.c: 61: FVRCON = 0x84;
  3458                           
  3459                           ; BSR set to: 14
  3460                           ;incstack = 0
  3461  002B34  0E84               	movlw	132
  3462  002B36  010F               	movlb	15	; () banked
  3463  002B38  6F31               	movwf	49,b	;volatile
  3464                           
  3465                           ; BSR set to: 15
  3466  002B3A  0012               	return		;funcret
  3467  002B3C                     __end_of_FVR_Initialize:
  3468                           	opt callstack 0
  3469                           
  3470 ;; *************** function _EXT_INT_Initialize *****************
  3471 ;; Defined at:
  3472 ;;		line 113 in file "mcc_generated_files/ext_int.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;		None
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3490 ;;Total ram usage:        0 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:   12
  3493 ;; This function calls:
  3494 ;;		_INT0_SetInterruptHandler
  3495 ;;		_INT1_SetInterruptHandler
  3496 ;;		_INT2_SetInterruptHandler
  3497 ;; This function is called by:
  3498 ;;		_SYSTEM_Initialize
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text28
  3503  00237A                     __ptext28:
  3504                           	opt callstack 0
  3505  00237A                     _EXT_INT_Initialize:
  3506                           	opt callstack 17
  3507                           
  3508                           ;ext_int.c: 118: (PIR0bits.INT0IF = 0);
  3509                           
  3510                           ; BSR set to: 15
  3511                           ;incstack = 0
  3512  00237A  010E               	movlb	14	; () banked
  3513  00237C  91CA               	bcf	202,0,b	;volatile
  3514                           
  3515                           ;ext_int.c: 119: (INTCONbits.INT0EDG = 1);
  3516  00237E  80F2               	bsf	4082,0,c	;volatile
  3517                           
  3518                           ; BSR set to: 14
  3519                           ;ext_int.c: 121: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  3520  002380  0E76               	movlw	low _INT0_DefaultInterruptHandler
  3521  002382  0100               	movlb	0	; () banked
  3522  002384  6FF8               	movwf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  3523  002386  0E2B               	movlw	high _INT0_DefaultInterruptHandler
  3524  002388  6FF9               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3525  00238A  EC55  F015         	call	_INT0_SetInterruptHandler	;wreg free
  3526                           
  3527                           ;ext_int.c: 122: (PIE0bits.INT0IE = 1);
  3528  00238E  010E               	movlb	14	; () banked
  3529  002390  81C2               	bsf	194,0,b	;volatile
  3530                           
  3531                           ; BSR set to: 14
  3532                           ;ext_int.c: 127: (PIR0bits.INT1IF = 0);
  3533  002392  93CA               	bcf	202,1,b	;volatile
  3534                           
  3535                           ; BSR set to: 14
  3536                           ;ext_int.c: 128: (INTCONbits.INT1EDG = 1);
  3537  002394  82F2               	bsf	4082,1,c	;volatile
  3538                           
  3539                           ;ext_int.c: 130: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  3540  002396  0E74               	movlw	low _INT1_DefaultInterruptHandler
  3541  002398  0100               	movlb	0	; () banked
  3542  00239A  6FF8               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  3543  00239C  0E2B               	movlw	high _INT1_DefaultInterruptHandler
  3544  00239E  6FF9               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3545  0023A0  EC50  F015         	call	_INT1_SetInterruptHandler	;wreg free
  3546                           
  3547                           ;ext_int.c: 131: (PIE0bits.INT1IE = 1);
  3548  0023A4  010E               	movlb	14	; () banked
  3549  0023A6  83C2               	bsf	194,1,b	;volatile
  3550                           
  3551                           ; BSR set to: 14
  3552                           ;ext_int.c: 136: (PIR0bits.INT2IF = 0);
  3553  0023A8  95CA               	bcf	202,2,b	;volatile
  3554                           
  3555                           ; BSR set to: 14
  3556                           ;ext_int.c: 137: (INTCONbits.INT2EDG = 1);
  3557  0023AA  84F2               	bsf	4082,2,c	;volatile
  3558                           
  3559                           ;ext_int.c: 139: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  3560  0023AC  0E72               	movlw	low _INT2_DefaultInterruptHandler
  3561  0023AE  0100               	movlb	0	; () banked
  3562  0023B0  6FF8               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  3563  0023B2  0E2B               	movlw	high _INT2_DefaultInterruptHandler
  3564  0023B4  6FF9               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3565  0023B6  EC4B  F015         	call	_INT2_SetInterruptHandler	;wreg free
  3566                           
  3567                           ;ext_int.c: 140: (PIE0bits.INT2IE = 1);
  3568  0023BA  010E               	movlb	14	; () banked
  3569  0023BC  85C2               	bsf	194,2,b	;volatile
  3570                           
  3571                           ; BSR set to: 14
  3572  0023BE  0012               	return		;funcret
  3573  0023C0                     __end_of_EXT_INT_Initialize:
  3574                           	opt callstack 0
  3575                           
  3576 ;; *************** function _INT2_SetInterruptHandler *****************
  3577 ;; Defined at:
  3578 ;;		line 104 in file "mcc_generated_files/ext_int.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3581 ;;		 -> INT2_DefaultInterruptHandler(1), 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2, status,0
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3593 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3596 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3597 ;;Total ram usage:        2 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:   11
  3600 ;; This function calls:
  3601 ;;		Nothing
  3602 ;; This function is called by:
  3603 ;;		_EXT_INT_Initialize
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           	psect	text29
  3608  002A96                     __ptext29:
  3609                           	opt callstack 0
  3610  002A96                     _INT2_SetInterruptHandler:
  3611                           	opt callstack 17
  3612                           
  3613                           ;ext_int.c: 105: INT2_InterruptHandler = InterruptHandler;
  3614                           
  3615                           ; BSR set to: 14
  3616                           ;incstack = 0
  3617  002A96  C0F8  F0F0         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  3618  002A9A  C0F9  F0F1         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  3619  002A9E  0012               	return		;funcret
  3620  002AA0                     __end_of_INT2_SetInterruptHandler:
  3621                           	opt callstack 0
  3622                           
  3623 ;; *************** function _INT1_SetInterruptHandler *****************
  3624 ;; Defined at:
  3625 ;;		line 78 in file "mcc_generated_files/ext_int.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3628 ;;		 -> INT1_DefaultInterruptHandler(1), 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;		None
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  1    wreg      void 
  3633 ;; Registers used:
  3634 ;;		wreg, status,2, status,0
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3640 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3644 ;;Total ram usage:        2 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:   11
  3647 ;; This function calls:
  3648 ;;		Nothing
  3649 ;; This function is called by:
  3650 ;;		_EXT_INT_Initialize
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           	psect	text30
  3655  002AA0                     __ptext30:
  3656                           	opt callstack 0
  3657  002AA0                     _INT1_SetInterruptHandler:
  3658                           	opt callstack 17
  3659                           
  3660                           ;ext_int.c: 79: INT1_InterruptHandler = InterruptHandler;
  3661                           
  3662                           ;incstack = 0
  3663  002AA0  C0F8  F0F2         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  3664  002AA4  C0F9  F0F3         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  3665  002AA8  0012               	return		;funcret
  3666  002AAA                     __end_of_INT1_SetInterruptHandler:
  3667                           	opt callstack 0
  3668                           
  3669 ;; *************** function _INT0_SetInterruptHandler *****************
  3670 ;; Defined at:
  3671 ;;		line 52 in file "mcc_generated_files/ext_int.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3674 ;;		 -> INT0_Custom_ISR(1), INT0_DefaultInterruptHandler(1), 
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;		None
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      void 
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3686 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3689 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3690 ;;Total ram usage:        2 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:   11
  3693 ;; This function calls:
  3694 ;;		Nothing
  3695 ;; This function is called by:
  3696 ;;		_EXT_INT_Initialize
  3697 ;;		_main
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	text31
  3702  002AAA                     __ptext31:
  3703                           	opt callstack 0
  3704  002AAA                     _INT0_SetInterruptHandler:
  3705                           	opt callstack 17
  3706                           
  3707                           ;ext_int.c: 53: INT0_InterruptHandler = InterruptHandler;
  3708                           
  3709                           ;incstack = 0
  3710  002AAA  C0F8  F0F4         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  3711  002AAE  C0F9  F0F5         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  3712  002AB2  0012               	return		;funcret
  3713  002AB4                     __end_of_INT0_SetInterruptHandler:
  3714                           	opt callstack 0
  3715                           
  3716 ;; *************** function _EUSART1_Initialize *****************
  3717 ;; Defined at:
  3718 ;;		line 86 in file "mcc_generated_files/eusart1.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;		None
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3736 ;;Total ram usage:        0 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:   12
  3739 ;; This function calls:
  3740 ;;		_EUSART1_SetErrorHandler
  3741 ;;		_EUSART1_SetFramingErrorHandler
  3742 ;;		_EUSART1_SetOverrunErrorHandler
  3743 ;;		_EUSART1_SetRxInterruptHandler
  3744 ;;		_EUSART1_SetTxInterruptHandler
  3745 ;; This function is called by:
  3746 ;;		_SYSTEM_Initialize
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text32
  3751  002086                     __ptext32:
  3752                           	opt callstack 0
  3753  002086                     _EUSART1_Initialize:
  3754                           	opt callstack 17
  3755                           
  3756                           ;eusart1.c: 89: PIE3bits.RC1IE = 0;
  3757                           
  3758                           ;incstack = 0
  3759  002086  010E               	movlb	14	; () banked
  3760  002088  9BC5               	bcf	197,5,b	;volatile
  3761                           
  3762                           ; BSR set to: 14
  3763                           ;eusart1.c: 90: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  3764  00208A  0EF2               	movlw	low _EUSART1_Receive_ISR
  3765  00208C  0100               	movlb	0	; () banked
  3766  00208E  6FF8               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler& (0+255),b
  3767  002090  0E1F               	movlw	high _EUSART1_Receive_ISR
  3768  002092  6FF9               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  3769  002094  EC5F  F015         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  3770                           
  3771                           ;eusart1.c: 91: PIE3bits.TX1IE = 0;
  3772  002098  010E               	movlb	14	; () banked
  3773  00209A  99C5               	bcf	197,4,b	;volatile
  3774                           
  3775                           ;eusart1.c: 92: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  3776  00209C  0E7E               	movlw	low _EUSART1_Transmit_ISR
  3777  00209E  0100               	movlb	0	; () banked
  3778  0020A0  6FF8               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler& (0+255),b
  3779  0020A2  0E25               	movlw	high _EUSART1_Transmit_ISR
  3780  0020A4  6FF9               	movwf	(EUSART1_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  3781  0020A6  EC5A  F015         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  3782                           
  3783                           ;eusart1.c: 96: BAUD1CON = 0x08;
  3784  0020AA  0E08               	movlw	8
  3785  0020AC  6E9F               	movwf	3999,c	;volatile
  3786                           
  3787                           ;eusart1.c: 99: RC1STA = 0x90;
  3788  0020AE  0E90               	movlw	144
  3789  0020B0  6E9D               	movwf	3997,c	;volatile
  3790                           
  3791                           ;eusart1.c: 102: TX1STA = 0x04;
  3792  0020B2  0E04               	movlw	4
  3793  0020B4  6E9E               	movwf	3998,c	;volatile
  3794                           
  3795                           ;eusart1.c: 105: SP1BRGL = 0x33;
  3796  0020B6  0E33               	movlw	51
  3797  0020B8  6E9B               	movwf	3995,c	;volatile
  3798                           
  3799                           ;eusart1.c: 108: SP1BRGH = 0x00;
  3800  0020BA  0E00               	movlw	0
  3801  0020BC  6E9C               	movwf	3996,c	;volatile
  3802                           
  3803                           ;eusart1.c: 111: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
  3804  0020BE  0E78               	movlw	low _EUSART1_DefaultFramingErrorHandler
  3805  0020C0  0100               	movlb	0	; () banked
  3806  0020C2  6FF8               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler& (0+255),b
  3807  0020C4  0E2B               	movlw	high _EUSART1_DefaultFramingErrorHandler
  3808  0020C6  6FF9               	movwf	(EUSART1_SetFramingErrorHandler@interruptHandler+1)& (0+255),b
  3809  0020C8  EC69  F015         	call	_EUSART1_SetFramingErrorHandler	;wreg free
  3810                           
  3811                           ;eusart1.c: 112: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
  3812  0020CC  0E42               	movlw	low _EUSART1_DefaultOverrunErrorHandler
  3813  0020CE  0100               	movlb	0	; () banked
  3814  0020D0  6FF8               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler& (0+255),b
  3815  0020D2  0E2B               	movlw	high _EUSART1_DefaultOverrunErrorHandler
  3816  0020D4  6FF9               	movwf	(EUSART1_SetOverrunErrorHandler@interruptHandler+1)& (0+255),b
  3817  0020D6  EC64  F015         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
  3818                           
  3819                           ;eusart1.c: 113: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
  3820  0020DA  0E48               	movlw	low _EUSART1_DefaultErrorHandler
  3821  0020DC  0100               	movlb	0	; () banked
  3822  0020DE  6FF8               	movwf	EUSART1_SetErrorHandler@interruptHandler& (0+255),b
  3823  0020E0  0E2B               	movlw	high _EUSART1_DefaultErrorHandler
  3824  0020E2  6FF9               	movwf	(EUSART1_SetErrorHandler@interruptHandler+1)& (0+255),b
  3825  0020E4  EC6E  F015         	call	_EUSART1_SetErrorHandler	;wreg free
  3826                           
  3827                           ;eusart1.c: 115: eusart1RxLastError.status = 0;
  3828  0020E8  0E00               	movlw	0
  3829  0020EA  6E2B               	movwf	_eusart1RxLastError,c	;volatile
  3830                           
  3831                           ;eusart1.c: 118: eusart1TxHead = 0;
  3832  0020EC  0E00               	movlw	0
  3833  0020EE  6E30               	movwf	_eusart1TxHead,c	;volatile
  3834                           
  3835                           ;eusart1.c: 119: eusart1TxTail = 0;
  3836  0020F0  0E00               	movlw	0
  3837  0020F2  6E2F               	movwf	_eusart1TxTail,c	;volatile
  3838                           
  3839                           ;eusart1.c: 120: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  3840  0020F4  0E40               	movlw	64
  3841  0020F6  6E51               	movwf	_eusart1TxBufferRemaining,c	;volatile
  3842                           
  3843                           ;eusart1.c: 122: eusart1RxHead = 0;
  3844  0020F8  0E00               	movlw	0
  3845  0020FA  6E2E               	movwf	_eusart1RxHead,c	;volatile
  3846                           
  3847                           ;eusart1.c: 123: eusart1RxTail = 0;
  3848  0020FC  0E00               	movlw	0
  3849  0020FE  6E2D               	movwf	_eusart1RxTail,c	;volatile
  3850                           
  3851                           ;eusart1.c: 124: eusart1RxCount = 0;
  3852  002100  0E00               	movlw	0
  3853  002102  6E2C               	movwf	_eusart1RxCount,c	;volatile
  3854                           
  3855                           ;eusart1.c: 127: PIE3bits.RC1IE = 1;
  3856  002104  010E               	movlb	14	; () banked
  3857  002106  8BC5               	bsf	197,5,b	;volatile
  3858                           
  3859                           ; BSR set to: 14
  3860  002108  0012               	return		;funcret
  3861  00210A                     __end_of_EUSART1_Initialize:
  3862                           	opt callstack 0
  3863                           
  3864 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  3865 ;; Defined at:
  3866 ;;		line 275 in file "mcc_generated_files/eusart1.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  3869 ;;		 -> EUSART1_Transmit_ISR(1), 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;		None
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  1    wreg      void 
  3874 ;; Registers used:
  3875 ;;		wreg, status,2, status,0
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3881 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3884 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3885 ;;Total ram usage:        2 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:   11
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_EUSART1_Initialize
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text33
  3896  002AB4                     __ptext33:
  3897                           	opt callstack 0
  3898  002AB4                     _EUSART1_SetTxInterruptHandler:
  3899                           	opt callstack 17
  3900                           
  3901                           ;eusart1.c: 276: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  3902                           
  3903                           ; BSR set to: 14
  3904                           ;incstack = 0
  3905  002AB4  C0F8  F0EE         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  3906  002AB8  C0F9  F0EF         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  3907  002ABC  0012               	return		;funcret
  3908  002ABE                     __end_of_EUSART1_SetTxInterruptHandler:
  3909                           	opt callstack 0
  3910                           
  3911 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  3912 ;; Defined at:
  3913 ;;		line 279 in file "mcc_generated_files/eusart1.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  3916 ;;		 -> EUSART1_Receive_ISR(1), 
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;		None
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  1    wreg      void 
  3921 ;; Registers used:
  3922 ;;		wreg, status,2, status,0
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3928 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3931 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3932 ;;Total ram usage:        2 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:   11
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_EUSART1_Initialize
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text34
  3943  002ABE                     __ptext34:
  3944                           	opt callstack 0
  3945  002ABE                     _EUSART1_SetRxInterruptHandler:
  3946                           	opt callstack 17
  3947                           
  3948                           ;eusart1.c: 280: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  3949                           
  3950                           ;incstack = 0
  3951  002ABE  C0F8  F0EC         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  3952  002AC2  C0F9  F0ED         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  3953  002AC6  0012               	return		;funcret
  3954  002AC8                     __end_of_EUSART1_SetRxInterruptHandler:
  3955                           	opt callstack 0
  3956                           
  3957 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
  3958 ;; Defined at:
  3959 ;;		line 267 in file "mcc_generated_files/eusart1.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  3962 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;		None
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3974 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3977 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3978 ;;Total ram usage:        2 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:   11
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_EUSART1_Initialize
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text35
  3989  002AC8                     __ptext35:
  3990                           	opt callstack 0
  3991  002AC8                     _EUSART1_SetOverrunErrorHandler:
  3992                           	opt callstack 17
  3993                           
  3994                           ;eusart1.c: 268: EUSART1_OverrunErrorHandler = interruptHandler;
  3995                           
  3996                           ;incstack = 0
  3997  002AC8  C0F8  F0D4         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
  3998  002ACC  C0F9  F0D5         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
  3999  002AD0  0012               	return		;funcret
  4000  002AD2                     __end_of_EUSART1_SetOverrunErrorHandler:
  4001                           	opt callstack 0
  4002                           
  4003 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
  4004 ;; Defined at:
  4005 ;;		line 263 in file "mcc_generated_files/eusart1.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4008 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4020 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4024 ;;Total ram usage:        2 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:   11
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_EUSART1_Initialize
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text36
  4035  002AD2                     __ptext36:
  4036                           	opt callstack 0
  4037  002AD2                     _EUSART1_SetFramingErrorHandler:
  4038                           	opt callstack 17
  4039                           
  4040                           ;eusart1.c: 264: EUSART1_FramingErrorHandler = interruptHandler;
  4041                           
  4042                           ;incstack = 0
  4043  002AD2  C0F8  F0D6         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
  4044  002AD6  C0F9  F0D7         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
  4045  002ADA  0012               	return		;funcret
  4046  002ADC                     __end_of_EUSART1_SetFramingErrorHandler:
  4047                           	opt callstack 0
  4048                           
  4049 ;; *************** function _EUSART1_SetErrorHandler *****************
  4050 ;; Defined at:
  4051 ;;		line 271 in file "mcc_generated_files/eusart1.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4054 ;;		 -> EUSART1_DefaultErrorHandler(1), 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4066 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4070 ;;Total ram usage:        2 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:   11
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_EUSART1_Initialize
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text37
  4081  002ADC                     __ptext37:
  4082                           	opt callstack 0
  4083  002ADC                     _EUSART1_SetErrorHandler:
  4084                           	opt callstack 17
  4085                           
  4086                           ;eusart1.c: 272: EUSART1_ErrorHandler = interruptHandler;
  4087                           
  4088                           ;incstack = 0
  4089  002ADC  C0F8  F0D2         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
  4090  002AE0  C0F9  F0D3         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
  4091  002AE4  0012               	return		;funcret
  4092  002AE6                     __end_of_EUSART1_SetErrorHandler:
  4093                           	opt callstack 0
  4094                           
  4095 ;; *************** function _DAC1_Initialize *****************
  4096 ;; Defined at:
  4097 ;;		line 58 in file "mcc_generated_files/dac1.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;		None
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;		None
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      void 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4115 ;;Total ram usage:        0 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:   11
  4118 ;; This function calls:
  4119 ;;		Nothing
  4120 ;; This function is called by:
  4121 ;;		_SYSTEM_Initialize
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           	psect	text38
  4126  0029E4                     __ptext38:
  4127                           	opt callstack 0
  4128  0029E4                     _DAC1_Initialize:
  4129                           	opt callstack 18
  4130                           
  4131                           ;dac1.c: 61: DAC1CON0 = 0xA8;
  4132                           
  4133                           ;incstack = 0
  4134  0029E4  0EA8               	movlw	168
  4135  0029E6  010F               	movlb	15	; () banked
  4136  0029E8  6F33               	movwf	51,b	;volatile
  4137                           
  4138                           ;dac1.c: 63: DAC1CON1 = 0x1F;
  4139  0029EA  0E1F               	movlw	31
  4140  0029EC  6F34               	movwf	52,b	;volatile
  4141                           
  4142                           ; BSR set to: 15
  4143  0029EE  0012               	return		;funcret
  4144  0029F0                     __end_of_DAC1_Initialize:
  4145                           	opt callstack 0
  4146                           
  4147 ;; *************** function _CLKREF_Initialize *****************
  4148 ;; Defined at:
  4149 ;;		line 58 in file "mcc_generated_files/clkref.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;		None
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4167 ;;Total ram usage:        0 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:   11
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_SYSTEM_Initialize
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           	psect	text39
  4178  0029F0                     __ptext39:
  4179                           	opt callstack 0
  4180  0029F0                     _CLKREF_Initialize:
  4181                           	opt callstack 18
  4182                           
  4183                           ;clkref.c: 61: CLKRCLK = 0x01;
  4184                           
  4185                           ; BSR set to: 15
  4186                           ;incstack = 0
  4187  0029F0  0E01               	movlw	1
  4188  0029F2  010F               	movlb	15	; () banked
  4189  0029F4  6F3F               	movwf	63,b	;volatile
  4190                           
  4191                           ;clkref.c: 63: CLKRCON = 0x90;
  4192  0029F6  0E90               	movlw	144
  4193  0029F8  6F3E               	movwf	62,b	;volatile
  4194                           
  4195                           ; BSR set to: 15
  4196  0029FA  0012               	return		;funcret
  4197  0029FC                     __end_of_CLKREF_Initialize:
  4198                           	opt callstack 0
  4199                           
  4200 ;; *************** function _RunLoop *****************
  4201 ;; Defined at:
  4202 ;;		line 42 in file "main.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:   12
  4223 ;; This function calls:
  4224 ;;		_EUSART1_Read
  4225 ;;		_EUSART1_Write
  4226 ;;		_EUSART1_is_rx_ready
  4227 ;;		_EUSART1_is_tx_ready
  4228 ;;		_SetLedBlink
  4229 ;; This function is called by:
  4230 ;;		_main
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	text40
  4235  0021E2                     __ptext40:
  4236                           	opt callstack 0
  4237  0021E2                     _RunLoop:
  4238                           	opt callstack 18
  4239                           
  4240                           ;main.c: 44: if(EUSART1_is_rx_ready() != 0) {
  4241                           
  4242                           ; BSR set to: 15
  4243                           ;incstack = 0
  4244  0021E2  ECAB  F015         	call	_EUSART1_is_rx_ready	;wreg free
  4245  0021E6  0900               	iorlw	0
  4246  0021E8  B4D8               	btfsc	status,2,c
  4247  0021EA  0012               	return	
  4248                           
  4249                           ;main.c: 46: SetLedBlink(B, 5, 95, 0, 1);
  4250  0021EC  0E00               	movlw	0
  4251  0021EE  0101               	movlb	1	; () banked
  4252  0021F0  6F81               	movwf	(SetLedBlink@ledIndex+1)& (0+255),b
  4253  0021F2  0E02               	movlw	2
  4254  0021F4  6F80               	movwf	SetLedBlink@ledIndex& (0+255),b
  4255  0021F6  0E00               	movlw	0
  4256  0021F8  6F83               	movwf	(SetLedBlink@OnTime+1)& (0+255),b
  4257  0021FA  0E05               	movlw	5
  4258  0021FC  6F82               	movwf	SetLedBlink@OnTime& (0+255),b
  4259  0021FE  0E00               	movlw	0
  4260  002200  6F85               	movwf	(SetLedBlink@OffTime+1)& (0+255),b
  4261  002202  0E5F               	movlw	95
  4262  002204  6F84               	movwf	SetLedBlink@OffTime& (0+255),b
  4263  002206  0E00               	movlw	0
  4264  002208  6F87               	movwf	(SetLedBlink@StartAfter+1)& (0+255),b
  4265  00220A  0E00               	movlw	0
  4266  00220C  6F86               	movwf	SetLedBlink@StartAfter& (0+255),b
  4267  00220E  0E00               	movlw	0
  4268  002210  6F89               	movwf	(SetLedBlink@BlinkCount+1)& (0+255),b
  4269  002212  0E01               	movlw	1
  4270  002214  6F88               	movwf	SetLedBlink@BlinkCount& (0+255),b
  4271  002216  EC46  F00A         	call	_SetLedBlink	;wreg free
  4272                           
  4273                           ;main.c: 47: while(EUSART1_is_rx_ready() != 0)
  4274  00221A  D009               	goto	l6496
  4275  00221C                     l6492:
  4276  00221C  ECA9  F015         	call	_EUSART1_is_tx_ready	;wreg free
  4277  002220  0900               	iorlw	0
  4278  002222  B4D8               	btfsc	status,2,c
  4279  002224  D7FB               	goto	l6492
  4280                           
  4281                           ;main.c: 51: EUSART1_Write(EUSART1_Read());
  4282  002226  ECE0  F011         	call	_EUSART1_Read	;wreg free
  4283  00222A  EC3F  F012         	call	_EUSART1_Write
  4284  00222E                     l6496:
  4285  00222E  ECAB  F015         	call	_EUSART1_is_rx_ready	;wreg free
  4286  002232  0900               	iorlw	0
  4287  002234  B4D8               	btfsc	status,2,c
  4288  002236  0012               	return	
  4289  002238  D7F1               	goto	l6492
  4290  00223A                     __end_of_RunLoop:
  4291                           	opt callstack 0
  4292                           
  4293 ;; *************** function _SetLedBlink *****************
  4294 ;; Defined at:
  4295 ;;		line 64 in file "LedBlink.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;  ledIndex        2    0[BANK1 ] int 
  4298 ;;  OnTime          2    2[BANK1 ] int 
  4299 ;;  OffTime         2    4[BANK1 ] int 
  4300 ;;  StartAfter      2    6[BANK1 ] int 
  4301 ;;  BlinkCount      2    8[BANK1 ] int 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;		None
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  1    wreg      void 
  4306 ;; Registers used:
  4307 ;;		wreg, status,2, status,0
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4313 ;;      Params:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4316 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4317 ;;Total ram usage:       10 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:   11
  4320 ;; This function calls:
  4321 ;;		Nothing
  4322 ;; This function is called by:
  4323 ;;		_RunLoop
  4324 ;;		_main
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           	psect	text41
  4329  00148C                     __ptext41:
  4330                           	opt callstack 0
  4331  00148C                     _SetLedBlink:
  4332                           	opt callstack 19
  4333                           
  4334                           ;LedBlink.c: 65: if (ledIndex == R) {
  4335                           
  4336                           ;incstack = 0
  4337  00148C  0101               	movlb	1	; () banked
  4338  00148E  5180               	movf	SetLedBlink@ledIndex& (0+255),w,b
  4339  001490  1181               	iorwf	(SetLedBlink@ledIndex+1)& (0+255),w,b
  4340  001492  A4D8               	btfss	status,2,c
  4341  001494  D021               	goto	l6368
  4342                           
  4343                           ; BSR set to: 1
  4344                           ;LedBlink.c: 66: R_OnTime = OnTime;
  4345  001496  C182  F027         	movff	SetLedBlink@OnTime,_R_OnTime
  4346  00149A  C183  F028         	movff	SetLedBlink@OnTime+1,_R_OnTime+1
  4347                           
  4348                           ;LedBlink.c: 67: R_OffTime = OffTime;
  4349  00149E  C184  F025         	movff	SetLedBlink@OffTime,_R_OffTime
  4350  0014A2  C185  F026         	movff	SetLedBlink@OffTime+1,_R_OffTime+1
  4351                           
  4352                           ;LedBlink.c: 68: R_StartAfter = StartAfter;
  4353  0014A6  C186  F01F         	movff	SetLedBlink@StartAfter,_R_StartAfter
  4354  0014AA  C187  F020         	movff	SetLedBlink@StartAfter+1,_R_StartAfter+1
  4355                           
  4356                           ; BSR set to: 1
  4357                           ;LedBlink.c: 69: R_Enabled = ON;
  4358  0014AE  0E00               	movlw	0
  4359  0014B0  6E24               	movwf	_R_Enabled+1,c
  4360  0014B2  0E01               	movlw	1
  4361  0014B4  6E23               	movwf	_R_Enabled,c
  4362                           
  4363                           ; BSR set to: 1
  4364                           ;LedBlink.c: 70: R_BlinkCount = BlinkCount;
  4365  0014B6  C188  F01D         	movff	SetLedBlink@BlinkCount,_R_BlinkCount
  4366  0014BA  C189  F01E         	movff	SetLedBlink@BlinkCount+1,_R_BlinkCount+1
  4367                           
  4368                           ; BSR set to: 1
  4369                           ;LedBlink.c: 71: R_BlinkCounter = BlinkCount;
  4370  0014BE  C188  F01B         	movff	SetLedBlink@BlinkCount,_R_BlinkCounter
  4371  0014C2  C189  F01C         	movff	SetLedBlink@BlinkCount+1,_R_BlinkCounter+1
  4372                           
  4373                           ;LedBlink.c: 72: R_Counter = 0;
  4374  0014C6  0E00               	movlw	0
  4375  0014C8  6E22               	movwf	_R_Counter+1,c
  4376  0014CA  0E00               	movlw	0
  4377  0014CC  6E21               	movwf	_R_Counter,c
  4378                           
  4379                           ;LedBlink.c: 73: R_State = UNIDENTIFIED;
  4380  0014CE  0E00               	movlw	0
  4381  0014D0  6E50               	movwf	_R_State+1,c
  4382  0014D2  0E03               	movlw	3
  4383  0014D4  6E4F               	movwf	_R_State,c
  4384                           
  4385                           ;LedBlink.c: 74: } else if (ledIndex == G) {
  4386  0014D6  0012               	return	
  4387  0014D8                     l6368:
  4388                           
  4389                           ; BSR set to: 1
  4390  0014D8  0580               	decf	SetLedBlink@ledIndex& (0+255),w,b
  4391  0014DA  1181               	iorwf	(SetLedBlink@ledIndex+1)& (0+255),w,b
  4392  0014DC  A4D8               	btfss	status,2,c
  4393  0014DE  D022               	goto	l6378
  4394                           
  4395                           ; BSR set to: 1
  4396                           ;LedBlink.c: 75: G_OnTime = OnTime;
  4397  0014E0  C182  F019         	movff	SetLedBlink@OnTime,_G_OnTime
  4398  0014E4  C183  F01A         	movff	SetLedBlink@OnTime+1,_G_OnTime+1
  4399                           
  4400                           ;LedBlink.c: 76: G_OffTime = OffTime;
  4401  0014E8  C184  F017         	movff	SetLedBlink@OffTime,_G_OffTime
  4402  0014EC  C185  F018         	movff	SetLedBlink@OffTime+1,_G_OffTime+1
  4403                           
  4404                           ;LedBlink.c: 77: G_StartAfter = StartAfter;
  4405  0014F0  C186  F0CC         	movff	SetLedBlink@StartAfter,_G_StartAfter
  4406  0014F4  C187  F0CD         	movff	SetLedBlink@StartAfter+1,_G_StartAfter+1
  4407                           
  4408                           ; BSR set to: 1
  4409                           ;LedBlink.c: 78: G_Enabled = ON;
  4410  0014F8  0E00               	movlw	0
  4411  0014FA  0100               	movlb	0	; () banked
  4412  0014FC  6FCF               	movwf	(_G_Enabled+1)& (0+255),b
  4413  0014FE  0E01               	movlw	1
  4414  001500  6FCE               	movwf	_G_Enabled& (0+255),b
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;LedBlink.c: 79: G_BlinkCount = BlinkCount;
  4418  001502  C188  F013         	movff	SetLedBlink@BlinkCount,_G_BlinkCount
  4419  001506  C189  F014         	movff	SetLedBlink@BlinkCount+1,_G_BlinkCount+1
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;LedBlink.c: 80: G_BlinkCounter = BlinkCount;
  4423  00150A  C188  F0CA         	movff	SetLedBlink@BlinkCount,_G_BlinkCounter
  4424  00150E  C189  F0CB         	movff	SetLedBlink@BlinkCount+1,_G_BlinkCounter+1
  4425                           
  4426                           ;LedBlink.c: 81: G_Counter = 0;
  4427  001512  0E00               	movlw	0
  4428  001514  6E16               	movwf	_G_Counter+1,c
  4429  001516  0E00               	movlw	0
  4430  001518  6E15               	movwf	_G_Counter,c
  4431                           
  4432                           ;LedBlink.c: 82: G_State = UNIDENTIFIED;
  4433  00151A  0E00               	movlw	0
  4434  00151C  6E4E               	movwf	_G_State+1,c
  4435  00151E  0E03               	movlw	3
  4436  001520  6E4D               	movwf	_G_State,c
  4437                           
  4438                           ;LedBlink.c: 83: } else if (ledIndex == B) {
  4439  001522  0012               	return	
  4440  001524                     l6378:
  4441                           
  4442                           ; BSR set to: 1
  4443  001524  0E02               	movlw	2
  4444  001526  1980               	xorwf	SetLedBlink@ledIndex& (0+255),w,b
  4445  001528  1181               	iorwf	(SetLedBlink@ledIndex+1)& (0+255),w,b
  4446  00152A  A4D8               	btfss	status,2,c
  4447  00152C  D022               	goto	l6388
  4448                           
  4449                           ; BSR set to: 1
  4450                           ;LedBlink.c: 84: B_OnTime = OnTime;
  4451  00152E  C182  F0C8         	movff	SetLedBlink@OnTime,_B_OnTime
  4452  001532  C183  F0C9         	movff	SetLedBlink@OnTime+1,_B_OnTime+1
  4453                           
  4454                           ;LedBlink.c: 85: B_OffTime = OffTime;
  4455  001536  C184  F0C6         	movff	SetLedBlink@OffTime,_B_OffTime
  4456  00153A  C185  F0C7         	movff	SetLedBlink@OffTime+1,_B_OffTime+1
  4457                           
  4458                           ;LedBlink.c: 86: B_StartAfter = StartAfter;
  4459  00153E  C186  F0C2         	movff	SetLedBlink@StartAfter,_B_StartAfter
  4460  001542  C187  F0C3         	movff	SetLedBlink@StartAfter+1,_B_StartAfter+1
  4461                           
  4462                           ; BSR set to: 1
  4463                           ;LedBlink.c: 87: B_Enabled = ON;
  4464  001546  0E00               	movlw	0
  4465  001548  0100               	movlb	0	; () banked
  4466  00154A  6FC5               	movwf	(_B_Enabled+1)& (0+255),b
  4467  00154C  0E01               	movlw	1
  4468  00154E  6FC4               	movwf	_B_Enabled& (0+255),b
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;LedBlink.c: 88: B_BlinkCount = BlinkCount;
  4472  001550  C188  F00F         	movff	SetLedBlink@BlinkCount,_B_BlinkCount
  4473  001554  C189  F010         	movff	SetLedBlink@BlinkCount+1,_B_BlinkCount+1
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;LedBlink.c: 89: B_BlinkCounter = BlinkCount;
  4477  001558  C188  F0C0         	movff	SetLedBlink@BlinkCount,_B_BlinkCounter
  4478  00155C  C189  F0C1         	movff	SetLedBlink@BlinkCount+1,_B_BlinkCounter+1
  4479                           
  4480                           ;LedBlink.c: 90: B_Counter = 0;
  4481  001560  0E00               	movlw	0
  4482  001562  6E12               	movwf	_B_Counter+1,c
  4483  001564  0E00               	movlw	0
  4484  001566  6E11               	movwf	_B_Counter,c
  4485                           
  4486                           ;LedBlink.c: 91: B_State = UNIDENTIFIED;
  4487  001568  0E00               	movlw	0
  4488  00156A  6E4C               	movwf	_B_State+1,c
  4489  00156C  0E03               	movlw	3
  4490  00156E  6E4B               	movwf	_B_State,c
  4491                           
  4492                           ;LedBlink.c: 92: } else if (ledIndex == RGB_R) {
  4493  001570  0012               	return	
  4494  001572                     l6388:
  4495                           
  4496                           ; BSR set to: 1
  4497  001572  0E03               	movlw	3
  4498  001574  1980               	xorwf	SetLedBlink@ledIndex& (0+255),w,b
  4499  001576  1181               	iorwf	(SetLedBlink@ledIndex+1)& (0+255),w,b
  4500  001578  A4D8               	btfss	status,2,c
  4501  00157A  D022               	goto	l6398
  4502                           
  4503                           ; BSR set to: 1
  4504                           ;LedBlink.c: 93: RGB_R_OnTime = OnTime;
  4505  00157C  C182  F0BE         	movff	SetLedBlink@OnTime,_RGB_R_OnTime
  4506  001580  C183  F0BF         	movff	SetLedBlink@OnTime+1,_RGB_R_OnTime+1
  4507                           
  4508                           ;LedBlink.c: 94: RGB_R_OffTime = OffTime;
  4509  001584  C184  F0BC         	movff	SetLedBlink@OffTime,_RGB_R_OffTime
  4510  001588  C185  F0BD         	movff	SetLedBlink@OffTime+1,_RGB_R_OffTime+1
  4511                           
  4512                           ;LedBlink.c: 95: RGB_R_StartAfter = StartAfter;
  4513  00158C  C186  F0B8         	movff	SetLedBlink@StartAfter,_RGB_R_StartAfter
  4514  001590  C187  F0B9         	movff	SetLedBlink@StartAfter+1,_RGB_R_StartAfter+1
  4515                           
  4516                           ; BSR set to: 1
  4517                           ;LedBlink.c: 96: RGB_R_Enabled = ON;
  4518  001594  0E00               	movlw	0
  4519  001596  0100               	movlb	0	; () banked
  4520  001598  6FBB               	movwf	(_RGB_R_Enabled+1)& (0+255),b
  4521  00159A  0E01               	movlw	1
  4522  00159C  6FBA               	movwf	_RGB_R_Enabled& (0+255),b
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;LedBlink.c: 97: RGB_R_BlinkCount = BlinkCount;
  4526  00159E  C188  F00B         	movff	SetLedBlink@BlinkCount,_RGB_R_BlinkCount
  4527  0015A2  C189  F00C         	movff	SetLedBlink@BlinkCount+1,_RGB_R_BlinkCount+1
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;LedBlink.c: 98: RGB_R_BlinkCounter = BlinkCount;
  4531  0015A6  C188  F0B6         	movff	SetLedBlink@BlinkCount,_RGB_R_BlinkCounter
  4532  0015AA  C189  F0B7         	movff	SetLedBlink@BlinkCount+1,_RGB_R_BlinkCounter+1
  4533                           
  4534                           ;LedBlink.c: 99: RGB_R_Counter = 0;
  4535  0015AE  0E00               	movlw	0
  4536  0015B0  6E0E               	movwf	_RGB_R_Counter+1,c
  4537  0015B2  0E00               	movlw	0
  4538  0015B4  6E0D               	movwf	_RGB_R_Counter,c
  4539                           
  4540                           ;LedBlink.c: 100: RGB_R_State = UNIDENTIFIED;
  4541  0015B6  0E00               	movlw	0
  4542  0015B8  6E4A               	movwf	_RGB_R_State+1,c
  4543  0015BA  0E03               	movlw	3
  4544  0015BC  6E49               	movwf	_RGB_R_State,c
  4545                           
  4546                           ;LedBlink.c: 101: } else if (ledIndex == RGB_G) {
  4547  0015BE  0012               	return	
  4548  0015C0                     l6398:
  4549                           
  4550                           ; BSR set to: 1
  4551  0015C0  0E04               	movlw	4
  4552  0015C2  1980               	xorwf	SetLedBlink@ledIndex& (0+255),w,b
  4553  0015C4  1181               	iorwf	(SetLedBlink@ledIndex+1)& (0+255),w,b
  4554  0015C6  A4D8               	btfss	status,2,c
  4555  0015C8  D022               	goto	l6408
  4556                           
  4557                           ; BSR set to: 1
  4558                           ;LedBlink.c: 102: RGB_G_OnTime = OnTime;
  4559  0015CA  C182  F0B4         	movff	SetLedBlink@OnTime,_RGB_G_OnTime
  4560  0015CE  C183  F0B5         	movff	SetLedBlink@OnTime+1,_RGB_G_OnTime+1
  4561                           
  4562                           ;LedBlink.c: 103: RGB_G_OffTime = OffTime;
  4563  0015D2  C184  F0B2         	movff	SetLedBlink@OffTime,_RGB_G_OffTime
  4564  0015D6  C185  F0B3         	movff	SetLedBlink@OffTime+1,_RGB_G_OffTime+1
  4565                           
  4566                           ;LedBlink.c: 104: RGB_G_StartAfter = StartAfter;
  4567  0015DA  C186  F0AE         	movff	SetLedBlink@StartAfter,_RGB_G_StartAfter
  4568  0015DE  C187  F0AF         	movff	SetLedBlink@StartAfter+1,_RGB_G_StartAfter+1
  4569                           
  4570                           ; BSR set to: 1
  4571                           ;LedBlink.c: 105: RGB_G_Enabled = ON;
  4572  0015E2  0E00               	movlw	0
  4573  0015E4  0100               	movlb	0	; () banked
  4574  0015E6  6FB1               	movwf	(_RGB_G_Enabled+1)& (0+255),b
  4575  0015E8  0E01               	movlw	1
  4576  0015EA  6FB0               	movwf	_RGB_G_Enabled& (0+255),b
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;LedBlink.c: 106: RGB_G_BlinkCount = BlinkCount;
  4580  0015EC  C188  F007         	movff	SetLedBlink@BlinkCount,_RGB_G_BlinkCount
  4581  0015F0  C189  F008         	movff	SetLedBlink@BlinkCount+1,_RGB_G_BlinkCount+1
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;LedBlink.c: 107: RGB_G_BlinkCounter = BlinkCount;
  4585  0015F4  C188  F0AC         	movff	SetLedBlink@BlinkCount,_RGB_G_BlinkCounter
  4586  0015F8  C189  F0AD         	movff	SetLedBlink@BlinkCount+1,_RGB_G_BlinkCounter+1
  4587                           
  4588                           ;LedBlink.c: 108: RGB_G_Counter = 0;
  4589  0015FC  0E00               	movlw	0
  4590  0015FE  6E0A               	movwf	_RGB_G_Counter+1,c
  4591  001600  0E00               	movlw	0
  4592  001602  6E09               	movwf	_RGB_G_Counter,c
  4593                           
  4594                           ;LedBlink.c: 109: RGB_G_State = UNIDENTIFIED;
  4595  001604  0E00               	movlw	0
  4596  001606  6E48               	movwf	_RGB_G_State+1,c
  4597  001608  0E03               	movlw	3
  4598  00160A  6E47               	movwf	_RGB_G_State,c
  4599                           
  4600                           ;LedBlink.c: 110: } else if (ledIndex == RGB_B) {
  4601  00160C  0012               	return	
  4602  00160E                     l6408:
  4603                           
  4604                           ; BSR set to: 1
  4605  00160E  0E05               	movlw	5
  4606  001610  1980               	xorwf	SetLedBlink@ledIndex& (0+255),w,b
  4607  001612  1181               	iorwf	(SetLedBlink@ledIndex+1)& (0+255),w,b
  4608  001614  A4D8               	btfss	status,2,c
  4609  001616  0012               	return	
  4610                           
  4611                           ; BSR set to: 1
  4612                           ;LedBlink.c: 111: RGB_B_OnTime = OnTime;
  4613  001618  C182  F0AA         	movff	SetLedBlink@OnTime,_RGB_B_OnTime
  4614  00161C  C183  F0AB         	movff	SetLedBlink@OnTime+1,_RGB_B_OnTime+1
  4615                           
  4616                           ;LedBlink.c: 112: RGB_B_OffTime = OffTime;
  4617  001620  C184  F0A8         	movff	SetLedBlink@OffTime,_RGB_B_OffTime
  4618  001624  C185  F0A9         	movff	SetLedBlink@OffTime+1,_RGB_B_OffTime+1
  4619                           
  4620                           ;LedBlink.c: 113: RGB_B_StartAfter = StartAfter;
  4621  001628  C186  F0A4         	movff	SetLedBlink@StartAfter,_RGB_B_StartAfter
  4622  00162C  C187  F0A5         	movff	SetLedBlink@StartAfter+1,_RGB_B_StartAfter+1
  4623                           
  4624                           ; BSR set to: 1
  4625                           ;LedBlink.c: 114: RGB_B_Enabled = ON;
  4626  001630  0E00               	movlw	0
  4627  001632  0100               	movlb	0	; () banked
  4628  001634  6FA7               	movwf	(_RGB_B_Enabled+1)& (0+255),b
  4629  001636  0E01               	movlw	1
  4630  001638  6FA6               	movwf	_RGB_B_Enabled& (0+255),b
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;LedBlink.c: 115: RGB_B_BlinkCount = BlinkCount;
  4634  00163A  C188  F003         	movff	SetLedBlink@BlinkCount,_RGB_B_BlinkCount
  4635  00163E  C189  F004         	movff	SetLedBlink@BlinkCount+1,_RGB_B_BlinkCount+1
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;LedBlink.c: 116: RGB_B_BlinkCounter = BlinkCount;
  4639  001642  C188  F0A2         	movff	SetLedBlink@BlinkCount,_RGB_B_BlinkCounter
  4640  001646  C189  F0A3         	movff	SetLedBlink@BlinkCount+1,_RGB_B_BlinkCounter+1
  4641                           
  4642                           ;LedBlink.c: 117: RGB_B_Counter = 0;
  4643  00164A  0E00               	movlw	0
  4644  00164C  6E06               	movwf	_RGB_B_Counter+1,c
  4645  00164E  0E00               	movlw	0
  4646  001650  6E05               	movwf	_RGB_B_Counter,c
  4647                           
  4648                           ;LedBlink.c: 118: RGB_B_State = UNIDENTIFIED;
  4649  001652  0E00               	movlw	0
  4650  001654  6E46               	movwf	_RGB_B_State+1,c
  4651  001656  0E03               	movlw	3
  4652  001658  6E45               	movwf	_RGB_B_State,c
  4653  00165A  0012               	return	
  4654  00165C                     __end_of_SetLedBlink:
  4655                           	opt callstack 0
  4656                           
  4657 ;; *************** function _EUSART1_is_tx_ready *****************
  4658 ;; Defined at:
  4659 ;;		line 130 in file "mcc_generated_files/eusart1.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      unsigned char 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4677 ;;Total ram usage:        0 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:   11
  4680 ;; This function calls:
  4681 ;;		Nothing
  4682 ;; This function is called by:
  4683 ;;		_RunLoop
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text42
  4688  002B52                     __ptext42:
  4689                           	opt callstack 0
  4690  002B52                     _EUSART1_is_tx_ready:
  4691                           	opt callstack 18
  4692                           
  4693                           ;eusart1.c: 132: return eusart1TxBufferRemaining;
  4694                           
  4695                           ;incstack = 0
  4696  002B52  5051               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  4697  002B54  0012               	return		;funcret
  4698  002B56                     __end_of_EUSART1_is_tx_ready:
  4699                           	opt callstack 0
  4700                           
  4701 ;; *************** function _EUSART1_is_rx_ready *****************
  4702 ;; Defined at:
  4703 ;;		line 135 in file "mcc_generated_files/eusart1.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;		None
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;		None
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      unsigned char 
  4710 ;; Registers used:
  4711 ;;		wreg, status,2
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4721 ;;Total ram usage:        0 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:   11
  4724 ;; This function calls:
  4725 ;;		Nothing
  4726 ;; This function is called by:
  4727 ;;		_RunLoop
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text43
  4732  002B56                     __ptext43:
  4733                           	opt callstack 0
  4734  002B56                     _EUSART1_is_rx_ready:
  4735                           	opt callstack 18
  4736                           
  4737                           ;eusart1.c: 137: return eusart1RxCount;
  4738                           
  4739                           ;incstack = 0
  4740  002B56  502C               	movf	_eusart1RxCount,w,c	;volatile
  4741  002B58  0012               	return		;funcret
  4742  002B5A                     __end_of_EUSART1_is_rx_ready:
  4743                           	opt callstack 0
  4744                           
  4745 ;; *************** function _EUSART1_Write *****************
  4746 ;; Defined at:
  4747 ;;		line 171 in file "mcc_generated_files/eusart1.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  txData          1    wreg     unsigned char 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  txData          1    0[BANK0 ] unsigned char 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  1    wreg      void 
  4754 ;; Registers used:
  4755 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4764 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4765 ;;Total ram usage:        1 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:   11
  4768 ;; This function calls:
  4769 ;;		Nothing
  4770 ;; This function is called by:
  4771 ;;		_RunLoop
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text44
  4776  00247E                     __ptext44:
  4777                           	opt callstack 0
  4778  00247E                     _EUSART1_Write:
  4779                           	opt callstack 18
  4780                           
  4781                           ;incstack = 0
  4782                           ;EUSART1_Write@txData stored from wreg
  4783  00247E  0100               	movlb	0	; () banked
  4784  002480  6FF8               	movwf	EUSART1_Write@txData& (0+255),b
  4785  002482                     
  4786                           ;eusart1.c: 173: while(0 == eusart1TxBufferRemaining)
  4787  002482  5051               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  4788  002484  B4D8               	btfsc	status,2,c
  4789  002486  D7FD               	goto	l6340
  4790                           
  4791                           ;eusart1.c: 175: };eusart1.c: 177: if(0 == PIE3bits.TX1IE)
  4792  002488  010E               	movlb	14	; () banked
  4793  00248A  B9C5               	btfsc	197,4,b	;volatile
  4794  00248C  D003               	goto	l896
  4795                           
  4796                           ; BSR set to: 14
  4797                           ;eusart1.c: 178: {;eusart1.c: 179: TX1REG = txData;
  4798  00248E  C0F8  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
  4799                           
  4800                           ;eusart1.c: 180: }
  4801  002492  D010               	goto	l6356
  4802  002494                     l896:
  4803                           
  4804                           ; BSR set to: 14
  4805                           ;eusart1.c: 181: else;eusart1.c: 182: {;eusart1.c: 183: PIE3bits.TX1IE = 0;
  4806  002494  99C5               	bcf	197,4,b	;volatile
  4807                           
  4808                           ; BSR set to: 14
  4809                           ;eusart1.c: 184: eusart1TxBuffer[eusart1TxHead++] = txData;
  4810  002496  0E40               	movlw	low _eusart1TxBuffer
  4811  002498  2430               	addwf	_eusart1TxHead,w,c	;volatile
  4812  00249A  6ED9               	movwf	fsr2l,c
  4813  00249C  6ADA               	clrf	fsr2h,c
  4814  00249E  0E01               	movlw	high _eusart1TxBuffer
  4815  0024A0  22DA               	addwfc	fsr2h,f,c
  4816  0024A2  C0F8  FFDF         	movff	EUSART1_Write@txData,indf2
  4817                           
  4818                           ; BSR set to: 14
  4819  0024A6  2A30               	incf	_eusart1TxHead,f,c	;volatile
  4820                           
  4821                           ; BSR set to: 14
  4822                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  4823  0024A8  0E3F               	movlw	63
  4824  0024AA  6430               	cpfsgt	_eusart1TxHead,c	;volatile
  4825  0024AC  D002               	goto	l6354
  4826                           
  4827                           ; BSR set to: 14
  4828                           ;eusart1.c: 186: {;eusart1.c: 187: eusart1TxHead = 0;
  4829  0024AE  0E00               	movlw	0
  4830  0024B0  6E30               	movwf	_eusart1TxHead,c	;volatile
  4831  0024B2                     l6354:
  4832                           
  4833                           ; BSR set to: 14
  4834                           ;eusart1.c: 188: };eusart1.c: 189: eusart1TxBufferRemaining--;
  4835  0024B2  0651               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  4836  0024B4                     l6356:
  4837                           
  4838                           ; BSR set to: 14
  4839                           ;eusart1.c: 190: };eusart1.c: 191: PIE3bits.TX1IE = 1;
  4840  0024B4  89C5               	bsf	197,4,b	;volatile
  4841                           
  4842                           ; BSR set to: 14
  4843  0024B6  0012               	return		;funcret
  4844  0024B8                     __end_of_EUSART1_Write:
  4845                           	opt callstack 0
  4846                           
  4847 ;; *************** function _EUSART1_Read *****************
  4848 ;; Defined at:
  4849 ;;		line 149 in file "mcc_generated_files/eusart1.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;		None
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  readValue       1    0[BANK0 ] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      unsigned char 
  4856 ;; Registers used:
  4857 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4866 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4867 ;;Total ram usage:        1 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:   11
  4870 ;; This function calls:
  4871 ;;		Nothing
  4872 ;; This function is called by:
  4873 ;;		_RunLoop
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text45
  4878  0023C0                     __ptext45:
  4879                           	opt callstack 0
  4880  0023C0                     _EUSART1_Read:
  4881                           	opt callstack 18
  4882                           
  4883                           ;eusart1.c: 153: while(0 == eusart1RxCount)
  4884                           
  4885                           ; BSR set to: 14
  4886                           ;incstack = 0
  4887  0023C0  502C               	movf	_eusart1RxCount,w,c	;volatile
  4888  0023C2  B4D8               	btfsc	status,2,c
  4889  0023C4  D7FD               	goto	_EUSART1_Read
  4890                           
  4891                           ;eusart1.c: 155: };eusart1.c: 157: eusart1RxLastError = eusart1RxStatusBuffer[eusart1RxT
      +                          ail];
  4892  0023C6  0E60               	movlw	low _eusart1RxStatusBuffer
  4893  0023C8  242D               	addwf	_eusart1RxTail,w,c	;volatile
  4894  0023CA  6ED9               	movwf	fsr2l,c
  4895  0023CC  6ADA               	clrf	fsr2h,c
  4896  0023CE  0E00               	movlw	high _eusart1RxStatusBuffer
  4897  0023D0  22DA               	addwfc	fsr2h,f,c
  4898  0023D2  50DF               	movf	indf2,w,c
  4899  0023D4  6E2B               	movwf	_eusart1RxLastError,c	;volatile
  4900                           
  4901                           ;eusart1.c: 159: readValue = eusart1RxBuffer[eusart1RxTail++];
  4902  0023D6  0E00               	movlw	low _eusart1RxBuffer
  4903  0023D8  242D               	addwf	_eusart1RxTail,w,c	;volatile
  4904  0023DA  6ED9               	movwf	fsr2l,c
  4905  0023DC  6ADA               	clrf	fsr2h,c
  4906  0023DE  0E01               	movlw	high _eusart1RxBuffer
  4907  0023E0  22DA               	addwfc	fsr2h,f,c
  4908  0023E2  50DF               	movf	indf2,w,c
  4909  0023E4  0100               	movlb	0	; () banked
  4910  0023E6  6FF8               	movwf	EUSART1_Read@readValue& (0+255),b
  4911                           
  4912                           ; BSR set to: 0
  4913  0023E8  2A2D               	incf	_eusart1RxTail,f,c	;volatile
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;eusart1.c: 160: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  4917  0023EA  0E3F               	movlw	63
  4918  0023EC  642D               	cpfsgt	_eusart1RxTail,c	;volatile
  4919  0023EE  D002               	goto	l6330
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;eusart1.c: 161: {;eusart1.c: 162: eusart1RxTail = 0;
  4923  0023F0  0E00               	movlw	0
  4924  0023F2  6E2D               	movwf	_eusart1RxTail,c	;volatile
  4925  0023F4                     l6330:
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;eusart1.c: 163: };eusart1.c: 164: PIE3bits.RC1IE = 0;
  4929  0023F4  010E               	movlb	14	; () banked
  4930  0023F6  9BC5               	bcf	197,5,b	;volatile
  4931                           
  4932                           ; BSR set to: 14
  4933                           ;eusart1.c: 165: eusart1RxCount--;
  4934  0023F8  062C               	decf	_eusart1RxCount,f,c	;volatile
  4935                           
  4936                           ; BSR set to: 14
  4937                           ;eusart1.c: 166: PIE3bits.RC1IE = 1;
  4938  0023FA  8BC5               	bsf	197,5,b	;volatile
  4939                           
  4940                           ; BSR set to: 14
  4941                           ;eusart1.c: 168: return readValue;
  4942  0023FC  0100               	movlb	0	; () banked
  4943  0023FE  51F8               	movf	EUSART1_Read@readValue& (0+255),w,b
  4944                           
  4945                           ; BSR set to: 0
  4946  002400  0012               	return		;funcret
  4947  002402                     __end_of_EUSART1_Read:
  4948                           	opt callstack 0
  4949                           
  4950 ;; *************** function _MRF89XA_Initialize *****************
  4951 ;; Defined at:
  4952 ;;		line 18 in file "MRF89XA.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  Address         1    wreg     unsigned char 
  4955 ;;  Mode            1    2[BANK1 ] unsigned char 
  4956 ;;  Modulation      1    3[BANK1 ] unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  Address         1    4[BANK1 ] unsigned char 
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      void 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4968 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4969 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4971 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4972 ;;Total ram usage:        3 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:   16
  4975 ;; This function calls:
  4976 ;;		_MRF89XA_SetMode
  4977 ;;		_MRF89XA_SetModulation
  4978 ;;		_MRF89XA_WriteConfig
  4979 ;; This function is called by:
  4980 ;;		_main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           	psect	text46
  4985  001B5E                     __ptext46:
  4986                           	opt callstack 0
  4987  001B5E                     _MRF89XA_Initialize:
  4988                           	opt callstack 14
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;incstack = 0
  4992                           ;MRF89XA_Initialize@Address stored from wreg
  4993  001B5E  0101               	movlb	1	; () banked
  4994  001B60  6F84               	movwf	MRF89XA_Initialize@Address& (0+255),b
  4995                           
  4996                           ;MRF89XA.c: 19: MRF89XA_SetMode(Mode);
  4997  001B62  0101               	movlb	1	; () banked
  4998  001B64  5182               	movf	MRF89XA_Initialize@Mode& (0+255),w,b
  4999  001B66  EC5C  F012         	call	_MRF89XA_SetMode
  5000                           
  5001                           ;MRF89XA.c: 21: MRF89XA_SetModulation(Modulation);
  5002  001B6A  0101               	movlb	1	; () banked
  5003  001B6C  5183               	movf	MRF89XA_Initialize@Modulation& (0+255),w,b
  5004  001B6E  ECEA  F012         	call	_MRF89XA_SetModulation
  5005                           
  5006                           ;MRF89XA.c: 23: MRF89XA_WriteConfig(0x02,0x03);
  5007  001B72  0E03               	movlw	3
  5008  001B74  0100               	movlb	0	; () banked
  5009  001B76  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5010  001B78  0E02               	movlw	2
  5011  001B7A  EC67  F014         	call	_MRF89XA_WriteConfig
  5012                           
  5013                           ;MRF89XA.c: 24: MRF89XA_WriteConfig(0x03,0xC7);
  5014  001B7E  0EC7               	movlw	199
  5015  001B80  0100               	movlb	0	; () banked
  5016  001B82  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5017  001B84  0E03               	movlw	3
  5018  001B86  EC67  F014         	call	_MRF89XA_WriteConfig
  5019                           
  5020                           ;MRF89XA.c: 26: MRF89XA_WriteConfig(0x04, 0b00001100);
  5021  001B8A  0E0C               	movlw	12
  5022  001B8C  0100               	movlb	0	; () banked
  5023  001B8E  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5024  001B90  0E04               	movlw	4
  5025  001B92  EC67  F014         	call	_MRF89XA_WriteConfig
  5026                           
  5027                           ;MRF89XA.c: 27: MRF89XA_WriteConfig(0x05, 0b00000010);
  5028  001B96  0E02               	movlw	2
  5029  001B98  0100               	movlb	0	; () banked
  5030  001B9A  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5031  001B9C  0E05               	movlw	5
  5032  001B9E  EC67  F014         	call	_MRF89XA_WriteConfig
  5033                           
  5034                           ;MRF89XA.c: 28: MRF89XA_WriteConfig(0x0D,0b10111000);
  5035  001BA2  0EB8               	movlw	184
  5036  001BA4  0100               	movlb	0	; () banked
  5037  001BA6  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5038  001BA8  0E0D               	movlw	13
  5039  001BAA  EC67  F014         	call	_MRF89XA_WriteConfig
  5040                           
  5041                           ;MRF89XA.c: 29: MRF89XA_WriteConfig(0x0E, 0b00111010);
  5042  001BAE  0E3A               	movlw	58
  5043  001BB0  0100               	movlb	0	; () banked
  5044  001BB2  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5045  001BB4  0E0E               	movlw	14
  5046  001BB6  EC67  F014         	call	_MRF89XA_WriteConfig
  5047                           
  5048                           ;MRF89XA.c: 31: MRF89XA_WriteConfig(0x06, 0x7D);
  5049  001BBA  0E7D               	movlw	125
  5050  001BBC  0100               	movlb	0	; () banked
  5051  001BBE  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5052  001BC0  0E06               	movlw	6
  5053  001BC2  EC67  F014         	call	_MRF89XA_WriteConfig
  5054                           
  5055                           ;MRF89XA.c: 32: MRF89XA_WriteConfig(0x07, 0x64);
  5056  001BC6  0E64               	movlw	100
  5057  001BC8  0100               	movlb	0	; () banked
  5058  001BCA  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5059  001BCC  0E07               	movlw	7
  5060  001BCE  EC67  F014         	call	_MRF89XA_WriteConfig
  5061                           
  5062                           ;MRF89XA.c: 33: MRF89XA_WriteConfig(0x08, 0x14);
  5063  001BD2  0E14               	movlw	20
  5064  001BD4  0100               	movlb	0	; () banked
  5065  001BD6  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5066  001BD8  0E08               	movlw	8
  5067  001BDA  EC67  F014         	call	_MRF89XA_WriteConfig
  5068                           
  5069                           ;MRF89XA.c: 35: MRF89XA_WriteConfig(0x0C, 0b00100000);
  5070  001BDE  0E20               	movlw	32
  5071  001BE0  0100               	movlb	0	; () banked
  5072  001BE2  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5073  001BE4  0E0C               	movlw	12
  5074  001BE6  EC67  F014         	call	_MRF89XA_WriteConfig
  5075                           
  5076                           ;MRF89XA.c: 36: MRF89XA_WriteConfig(0x10, 0b10010011);
  5077  001BEA  0E93               	movlw	147
  5078  001BEC  0100               	movlb	0	; () banked
  5079  001BEE  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5080  001BF0  0E10               	movlw	16
  5081  001BF2  EC67  F014         	call	_MRF89XA_WriteConfig
  5082                           
  5083                           ;MRF89XA.c: 37: MRF89XA_WriteConfig(0x11, 0b00111000);
  5084  001BF6  0E38               	movlw	56
  5085  001BF8  0100               	movlb	0	; () banked
  5086  001BFA  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5087  001BFC  0E11               	movlw	17
  5088  001BFE  EC67  F014         	call	_MRF89XA_WriteConfig
  5089                           
  5090                           ;MRF89XA.c: 39: MRF89XA_WriteConfig(0x12,0b10101010);
  5091  001C02  0EAA               	movlw	170
  5092  001C04  0100               	movlb	0	; () banked
  5093  001C06  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5094  001C08  0E12               	movlw	18
  5095  001C0A  EC67  F014         	call	_MRF89XA_WriteConfig
  5096                           
  5097                           ;MRF89XA.c: 40: MRF89XA_WriteConfig(0x19,0x01);
  5098  001C0E  0E01               	movlw	1
  5099  001C10  0100               	movlb	0	; () banked
  5100  001C12  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5101  001C14  0E19               	movlw	25
  5102  001C16  EC67  F014         	call	_MRF89XA_WriteConfig
  5103                           
  5104                           ;MRF89XA.c: 41: MRF89XA_WriteConfig(0x18,0x45);
  5105  001C1A  0E45               	movlw	69
  5106  001C1C  0100               	movlb	0	; () banked
  5107  001C1E  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5108  001C20  0E18               	movlw	24
  5109  001C22  EC67  F014         	call	_MRF89XA_WriteConfig
  5110                           
  5111                           ;MRF89XA.c: 43: MRF89XA_WriteConfig(0x15, 0b00000000);
  5112  001C26  0E00               	movlw	0
  5113  001C28  0100               	movlb	0	; () banked
  5114  001C2A  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5115  001C2C  0E15               	movlw	21
  5116  001C2E  EC67  F014         	call	_MRF89XA_WriteConfig
  5117                           
  5118                           ;MRF89XA.c: 44: MRF89XA_WriteConfig(0x1A,0b01110000);
  5119  001C32  0E70               	movlw	112
  5120  001C34  0100               	movlb	0	; () banked
  5121  001C36  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5122  001C38  0E1A               	movlw	26
  5123  001C3A  EC67  F014         	call	_MRF89XA_WriteConfig
  5124                           
  5125                           ;MRF89XA.c: 46: MRF89XA_WriteConfig(0x1B,0b00111100);
  5126  001C3E  0E3C               	movlw	60
  5127  001C40  0100               	movlb	0	; () banked
  5128  001C42  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5129  001C44  0E1B               	movlw	27
  5130  001C46  EC67  F014         	call	_MRF89XA_WriteConfig
  5131                           
  5132                           ;MRF89XA.c: 47: MRF89XA_WriteConfig(0x1C,0b00000100);
  5133  001C4A  0E04               	movlw	4
  5134  001C4C  0100               	movlb	0	; () banked
  5135  001C4E  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5136  001C50  0E1C               	movlw	28
  5137  001C52  EC67  F014         	call	_MRF89XA_WriteConfig
  5138                           
  5139                           ;MRF89XA.c: 48: MRF89XA_WriteConfig(0x1D,Address);
  5140  001C56  C184  F0FE         	movff	MRF89XA_Initialize@Address,MRF89XA_WriteConfig@Data
  5141  001C5A  0E1D               	movlw	29
  5142  001C5C  EC67  F014         	call	_MRF89XA_WriteConfig
  5143                           
  5144                           ;MRF89XA.c: 49: MRF89XA_WriteConfig(0x1E,0b00100000);
  5145  001C60  0E20               	movlw	32
  5146  001C62  0100               	movlb	0	; () banked
  5147  001C64  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5148  001C66  0E1E               	movlw	30
  5149  001C68  EC67  F014         	call	_MRF89XA_WriteConfig
  5150                           
  5151                           ;MRF89XA.c: 50: MRF89XA_WriteConfig(0x1F,0b00000000);
  5152  001C6C  0E00               	movlw	0
  5153  001C6E  0100               	movlb	0	; () banked
  5154  001C70  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5155  001C72  0E1F               	movlw	31
  5156  001C74  EC67  F014         	call	_MRF89XA_WriteConfig
  5157  001C78  0012               	return		;funcret
  5158  001C7A                     __end_of_MRF89XA_Initialize:
  5159                           	opt callstack 0
  5160                           
  5161 ;; *************** function _MRF89XA_SetModulation *****************
  5162 ;; Defined at:
  5163 ;;		line 67 in file "MRF89XA.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  Modulation      1    wreg     unsigned char 
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;  Modulation      1    0[BANK1 ] unsigned char 
  5168 ;;  mask            1    1[BANK1 ] unsigned char 
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  1    wreg      void 
  5171 ;; Registers used:
  5172 ;;		wreg, status,2, status,0, cstack
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5179 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5181 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5182 ;;Total ram usage:        2 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:   15
  5185 ;; This function calls:
  5186 ;;		_MRF89XA_WriteConfig
  5187 ;; This function is called by:
  5188 ;;		_MRF89XA_Initialize
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           	psect	text47
  5193  0025D4                     __ptext47:
  5194                           	opt callstack 0
  5195  0025D4                     _MRF89XA_SetModulation:
  5196                           	opt callstack 14
  5197                           
  5198                           ;incstack = 0
  5199                           ;MRF89XA_SetModulation@Modulation stored from wreg
  5200  0025D4  0101               	movlb	1	; () banked
  5201  0025D6  6F80               	movwf	MRF89XA_SetModulation@Modulation& (0+255),b
  5202                           
  5203                           ;MRF89XA.c: 69: if(Modulation == MRF89XA_MODULATION_FSK)
  5204  0025D8  0E04               	movlw	4
  5205  0025DA  0101               	movlb	1	; () banked
  5206  0025DC  1980               	xorwf	MRF89XA_SetModulation@Modulation& (0+255),w,b
  5207  0025DE  A4D8               	btfss	status,2,c
  5208  0025E0  D002               	goto	l6448
  5209                           
  5210                           ; BSR set to: 1
  5211                           ;MRF89XA.c: 70: mask = 0b10000000;
  5212  0025E2  0E80               	movlw	128
  5213  0025E4  D001               	goto	L1
  5214  0025E6                     l6448:
  5215                           
  5216                           ; BSR set to: 1
  5217                           ;MRF89XA.c: 71: else;MRF89XA.c: 72: mask = 0b01000000;
  5218  0025E6  0E40               	movlw	64
  5219  0025E8                     L1:
  5220  0025E8  6F81               	movwf	MRF89XA_SetModulation@mask& (0+255),b
  5221                           
  5222                           ; BSR set to: 1
  5223                           ;MRF89XA.c: 74: MRF89XA_WriteConfig(0x01,0b00101000 | mask);
  5224  0025EA  5181               	movf	MRF89XA_SetModulation@mask& (0+255),w,b
  5225  0025EC  0928               	iorlw	40
  5226  0025EE  0100               	movlb	0	; () banked
  5227  0025F0  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5228  0025F2  0E01               	movlw	1
  5229  0025F4  EC67  F014         	call	_MRF89XA_WriteConfig
  5230  0025F8  0012               	return		;funcret
  5231  0025FA                     __end_of_MRF89XA_SetModulation:
  5232                           	opt callstack 0
  5233                           
  5234 ;; *************** function _MRF89XA_SetMode *****************
  5235 ;; Defined at:
  5236 ;;		line 53 in file "MRF89XA.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;  Mode            1    wreg     unsigned char 
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  Mode            1    1[BANK1 ] unsigned char 
  5241 ;;  mask            1    0[BANK1 ] unsigned char 
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  1    wreg      void 
  5244 ;; Registers used:
  5245 ;;		wreg, status,2, status,0, cstack
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5252 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5254 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5255 ;;Total ram usage:        2 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:   15
  5258 ;; This function calls:
  5259 ;;		_MRF89XA_WriteConfig
  5260 ;; This function is called by:
  5261 ;;		_MRF89XA_Initialize
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           	psect	text48
  5266  0024B8                     __ptext48:
  5267                           	opt callstack 0
  5268  0024B8                     _MRF89XA_SetMode:
  5269                           	opt callstack 14
  5270                           
  5271                           ;incstack = 0
  5272                           ;MRF89XA_SetMode@Mode stored from wreg
  5273  0024B8  0101               	movlb	1	; () banked
  5274  0024BA  6F81               	movwf	MRF89XA_SetMode@Mode& (0+255),b
  5275                           
  5276                           ;MRF89XA.c: 55: if(Mode == MRF89XA_MODE_TX)
  5277  0024BC  0101               	movlb	1	; () banked
  5278  0024BE  0581               	decf	MRF89XA_SetMode@Mode& (0+255),w,b
  5279  0024C0  A4D8               	btfss	status,2,c
  5280  0024C2  D002               	goto	l6430
  5281                           
  5282                           ; BSR set to: 1
  5283                           ;MRF89XA.c: 56: mask = 0b10000000;
  5284  0024C4  0E80               	movlw	128
  5285  0024C6  D00C               	goto	L2
  5286  0024C8                     l6430:
  5287                           
  5288                           ; BSR set to: 1
  5289                           ;MRF89XA.c: 57: else if(Mode == MRF89XA_MODE_RX)
  5290  0024C8  5181               	movf	MRF89XA_SetMode@Mode& (0+255),w,b
  5291  0024CA  A4D8               	btfss	status,2,c
  5292  0024CC  D002               	goto	l6434
  5293                           
  5294                           ; BSR set to: 1
  5295                           ;MRF89XA.c: 58: mask = 0b01100000;
  5296  0024CE  0E60               	movlw	96
  5297  0024D0  D007               	goto	L2
  5298  0024D2                     l6434:
  5299                           
  5300                           ; BSR set to: 1
  5301                           ;MRF89XA.c: 59: else if(Mode == MRF89XA_MODE_STANDBY)
  5302  0024D2  0E02               	movlw	2
  5303  0024D4  1981               	xorwf	MRF89XA_SetMode@Mode& (0+255),w,b
  5304  0024D6  A4D8               	btfss	status,2,c
  5305  0024D8  D002               	goto	l6438
  5306                           
  5307                           ; BSR set to: 1
  5308                           ;MRF89XA.c: 60: mask = 0b00100000;
  5309  0024DA  0E20               	movlw	32
  5310  0024DC  D001               	goto	L2
  5311  0024DE                     l6438:
  5312                           
  5313                           ; BSR set to: 1
  5314                           ;MRF89XA.c: 61: else;MRF89XA.c: 62: mask = 0b00000000;
  5315  0024DE  0E00               	movlw	0
  5316  0024E0                     L2:
  5317  0024E0  6F80               	movwf	MRF89XA_SetMode@mask& (0+255),b
  5318                           
  5319                           ; BSR set to: 1
  5320                           ;MRF89XA.c: 64: MRF89XA_WriteConfig(0x00,0b00010000 | mask);
  5321  0024E2  5180               	movf	MRF89XA_SetMode@mask& (0+255),w,b
  5322  0024E4  0910               	iorlw	16
  5323  0024E6  0100               	movlb	0	; () banked
  5324  0024E8  6FFE               	movwf	MRF89XA_WriteConfig@Data& (0+255),b
  5325  0024EA  0E00               	movlw	0
  5326  0024EC  EC67  F014         	call	_MRF89XA_WriteConfig
  5327  0024F0  0012               	return		;funcret
  5328  0024F2                     __end_of_MRF89XA_SetMode:
  5329                           	opt callstack 0
  5330                           
  5331 ;; *************** function _MRF89XA_WriteConfig *****************
  5332 ;; Defined at:
  5333 ;;		line 123 in file "MRF89XA.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;  Address         1    wreg     unsigned char 
  5336 ;;  Data            1    6[BANK0 ] unsigned char 
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  Address         1    7[BANK0 ] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      unsigned char 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5348 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5352 ;;Total ram usage:        2 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:   14
  5355 ;; This function calls:
  5356 ;;		_MRF89XA_ExchangeConfig_A
  5357 ;;		_MRF89XA_GetAddress
  5358 ;; This function is called by:
  5359 ;;		_MRF89XA_Initialize
  5360 ;;		_MRF89XA_SetMode
  5361 ;;		_MRF89XA_SetModulation
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text49
  5366  0028CE                     __ptext49:
  5367                           	opt callstack 0
  5368  0028CE                     _MRF89XA_WriteConfig:
  5369                           	opt callstack 15
  5370                           
  5371                           ;incstack = 0
  5372                           ;MRF89XA_WriteConfig@Address stored from wreg
  5373  0028CE  0100               	movlb	0	; () banked
  5374  0028D0  6FFF               	movwf	MRF89XA_WriteConfig@Address& (0+255),b
  5375                           
  5376                           ;MRF89XA.c: 124: return MRF89XA_ExchangeConfig_A(MRF89XA_GetAddress(Address, 0), Data);;
      +                          	Return value of _MRF89XA_WriteConfig is never used
  5377  0028D2  C0FE  F0FB         	movff	MRF89XA_WriteConfig@Data,MRF89XA_ExchangeConfig_A@Data
  5378  0028D6  0E00               	movlw	0
  5379  0028D8  0100               	movlb	0	; () banked
  5380  0028DA  6FF8               	movwf	MRF89XA_GetAddress@Read& (0+255),b
  5381  0028DC  51FF               	movf	MRF89XA_WriteConfig@Address& (0+255),w,b
  5382  0028DE  EC59  F014         	call	_MRF89XA_GetAddress
  5383  0028E2  ECBB  F013         	call	_MRF89XA_ExchangeConfig_A
  5384  0028E6  0012               	return		;funcret
  5385  0028E8                     __end_of_MRF89XA_WriteConfig:
  5386                           	opt callstack 0
  5387                           
  5388 ;; *************** function _MRF89XA_GetAddress *****************
  5389 ;; Defined at:
  5390 ;;		line 183 in file "MRF89XA.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  Address         1    wreg     unsigned char 
  5393 ;;  Read            1    0[BANK0 ] unsigned char 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  Address         1    1[BANK0 ] unsigned char 
  5396 ;;  ret             1    2[BANK0 ] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  1    wreg      unsigned char 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5406 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5409 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5410 ;;Total ram usage:        3 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:   11
  5413 ;; This function calls:
  5414 ;;		Nothing
  5415 ;; This function is called by:
  5416 ;;		_MRF89XA_WriteConfig
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           	psect	text50
  5421  0028B2                     __ptext50:
  5422                           	opt callstack 0
  5423  0028B2                     _MRF89XA_GetAddress:
  5424                           	opt callstack 17
  5425                           
  5426                           ;incstack = 0
  5427                           ;MRF89XA_GetAddress@Address stored from wreg
  5428  0028B2  0100               	movlb	0	; () banked
  5429  0028B4  6FF9               	movwf	MRF89XA_GetAddress@Address& (0+255),b
  5430                           
  5431                           ;MRF89XA.c: 184: unsigned char ret = Address << 1;
  5432  0028B6  0100               	movlb	0	; () banked
  5433  0028B8  51F9               	movf	MRF89XA_GetAddress@Address& (0+255),w,b
  5434  0028BA  25F9               	addwf	MRF89XA_GetAddress@Address& (0+255),w,b
  5435  0028BC  6FFA               	movwf	MRF89XA_GetAddress@ret& (0+255),b
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;MRF89XA.c: 185: if(Read != 0) {
  5439  0028BE  51F8               	movf	MRF89XA_GetAddress@Read& (0+255),w,b
  5440  0028C0  B4D8               	btfsc	status,2,c
  5441  0028C2  D003               	goto	l6030
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;MRF89XA.c: 186: ret = ret | 0b01000000;
  5445  0028C4  51FA               	movf	MRF89XA_GetAddress@ret& (0+255),w,b
  5446  0028C6  0940               	iorlw	64
  5447  0028C8  6FFA               	movwf	MRF89XA_GetAddress@ret& (0+255),b
  5448  0028CA                     l6030:
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;MRF89XA.c: 189: };MRF89XA.c: 190: return ret;
  5452  0028CA  51FA               	movf	MRF89XA_GetAddress@ret& (0+255),w,b
  5453                           
  5454                           ; BSR set to: 0
  5455  0028CC  0012               	return		;funcret
  5456  0028CE                     __end_of_MRF89XA_GetAddress:
  5457                           	opt callstack 0
  5458                           
  5459 ;; *************** function _MRF89XA_ExchangeConfig_A *****************
  5460 ;; Defined at:
  5461 ;;		line 155 in file "MRF89XA.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;  Address         1    wreg     unsigned char 
  5464 ;;  Data            1    3[BANK0 ] unsigned char 
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;  Address         1    4[BANK0 ] unsigned char 
  5467 ;;  ret             1    5[BANK0 ] unsigned char 
  5468 ;; Return value:  Size  Location     Type
  5469 ;;                  1    wreg      unsigned char 
  5470 ;; Registers used:
  5471 ;;		wreg, status,2, cstack
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5477 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5480 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5481 ;;Total ram usage:        3 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:   13
  5484 ;; This function calls:
  5485 ;;		_MRF89XA_SPI_ExchangeByte
  5486 ;; This function is called by:
  5487 ;;		_MRF89XA_WriteConfig
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           	psect	text51
  5492  002776                     __ptext51:
  5493                           	opt callstack 0
  5494  002776                     _MRF89XA_ExchangeConfig_A:
  5495                           	opt callstack 15
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;incstack = 0
  5499                           ;MRF89XA_ExchangeConfig_A@Address stored from wreg
  5500  002776  0100               	movlb	0	; () banked
  5501  002778  6FFC               	movwf	MRF89XA_ExchangeConfig_A@Address& (0+255),b
  5502                           
  5503                           ;MRF89XA.c: 156: do { LATDbits.LATD3 = 1; } while(0);
  5504  00277A  8686               	bsf	3974,3,c	;volatile
  5505                           
  5506                           ;MRF89XA.c: 157: do { LATDbits.LATD4 = 0; } while(0);
  5507  00277C  9886               	bcf	3974,4,c	;volatile
  5508                           
  5509                           ;MRF89XA.c: 158: MRF89XA_SPI_ExchangeByte(Address);
  5510  00277E  0100               	movlb	0	; () banked
  5511  002780  51FC               	movf	MRF89XA_ExchangeConfig_A@Address& (0+255),w,b
  5512  002782  ECE5  F014         	call	_MRF89XA_SPI_ExchangeByte
  5513                           
  5514                           ;MRF89XA.c: 159: unsigned char ret = MRF89XA_SPI_ExchangeByte(Data);
  5515  002786  0100               	movlb	0	; () banked
  5516  002788  51FB               	movf	MRF89XA_ExchangeConfig_A@Data& (0+255),w,b
  5517  00278A  ECE5  F014         	call	_MRF89XA_SPI_ExchangeByte
  5518  00278E  0100               	movlb	0	; () banked
  5519  002790  6FFD               	movwf	MRF89XA_ExchangeConfig_A@ret& (0+255),b
  5520                           
  5521                           ; BSR set to: 0
  5522  002792  8886               	bsf	3974,4,c	;volatile
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;MRF89XA.c: 161: return ret;
  5526  002794  51FD               	movf	MRF89XA_ExchangeConfig_A@ret& (0+255),w,b
  5527                           
  5528                           ; BSR set to: 0
  5529  002796  0012               	return		;funcret
  5530  002798                     __end_of_MRF89XA_ExchangeConfig_A:
  5531                           	opt callstack 0
  5532                           
  5533 ;; *************** function _MRF89XA_SPI_ExchangeByte *****************
  5534 ;; Defined at:
  5535 ;;		line 77 in file "MRF89XA.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  byte            1    wreg     unsigned char 
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;  byte            1    1[BANK0 ] unsigned char 
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      unsigned char 
  5542 ;; Registers used:
  5543 ;;		wreg, status,2, cstack
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5552 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5553 ;;Total ram usage:        1 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:   12
  5556 ;; This function calls:
  5557 ;;		_spi2_exchangeByte
  5558 ;; This function is called by:
  5559 ;;		_MRF89XA_ExchangeConfig_A
  5560 ;;		_MRF89XA_ExchangeConfig
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           	psect	text52
  5565  0029CA                     __ptext52:
  5566                           	opt callstack 0
  5567  0029CA                     _MRF89XA_SPI_ExchangeByte:
  5568                           	opt callstack 15
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;incstack = 0
  5572                           ;MRF89XA_SPI_ExchangeByte@byte stored from wreg
  5573  0029CA  0100               	movlb	0	; () banked
  5574  0029CC  6FF9               	movwf	MRF89XA_SPI_ExchangeByte@byte& (0+255),b
  5575                           
  5576                           ;MRF89XA.c: 78: return spi2_exchangeByte(byte);
  5577  0029CE  0100               	movlb	0	; () banked
  5578  0029D0  51F9               	movf	MRF89XA_SPI_ExchangeByte@byte& (0+255),w,b
  5579  0029D2  EC74  F014         	call	_spi2_exchangeByte
  5580  0029D6  0012               	return		;funcret
  5581  0029D8                     __end_of_MRF89XA_SPI_ExchangeByte:
  5582                           	opt callstack 0
  5583                           
  5584 ;; *************** function _spi2_exchangeByte *****************
  5585 ;; Defined at:
  5586 ;;		line 69 in file "mcc_generated_files/spi2_driver.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  b               1    wreg     unsigned char 
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;  b               1    0[BANK0 ] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      unsigned char 
  5593 ;; Registers used:
  5594 ;;		wreg, status,2
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5603 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5604 ;;Total ram usage:        1 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:   11
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_MRF89XA_SPI_ExchangeByte
  5611 ;;		_spi2_exchangeBlock
  5612 ;;		_spi2_writeBlock
  5613 ;;		_spi2_readBlock
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           	psect	text53
  5618  0028E8                     __ptext53:
  5619                           	opt callstack 0
  5620  0028E8                     _spi2_exchangeByte:
  5621                           	opt callstack 0
  5622                           
  5623                           ;Skip over the trampoline to the duplicate function for level 2
  5624  0028E8  B252               	btfsc	btemp,1,c
  5625  0028EA  EFDC  F014         	goto	i2_spi2_exchangeByte
  5626  0028EE                     _spi2_exchangeByte$intlevel0:
  5627                           	opt callstack 15
  5628                           
  5629                           ;incstack = 0
  5630                           ;spi2_exchangeByte@b stored from wreg
  5631  0028EE  0100               	movlb	0	; () banked
  5632  0028F0  6FF8               	movwf	spi2_exchangeByte@b& (0+255),b
  5633                           
  5634                           ;spi2_driver.c: 71: SSP2BUF = b;
  5635  0028F2  C0F8  FE92         	movff	spi2_exchangeByte@b,3730	;volatile
  5636  0028F6                     l1097:
  5637  0028F6  010E               	movlb	14	; () banked
  5638  0028F8  A5CD               	btfss	205,2,b	;volatile
  5639  0028FA  D7FD               	goto	l1097
  5640                           
  5641                           ; BSR set to: 14
  5642                           ;spi2_driver.c: 73: PIR3bits.SSP2IF = 0;
  5643  0028FC  95CD               	bcf	205,2,b	;volatile
  5644                           
  5645                           ;spi2_driver.c: 74: return SSP2BUF;
  5646  0028FE  5192               	movf	146,w,b	;volatile
  5647                           
  5648                           ; BSR set to: 14
  5649  002900  0012               	return		;funcret
  5650  002902                     __end_of_spi2_exchangeByte:
  5651                           	opt callstack 0
  5652                           
  5653 ;; *************** function _Delay_Xms *****************
  5654 ;; Defined at:
  5655 ;;		line 21 in file "main.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  delay           4    0[BANK0 ] long 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  i               4    0[BANK1 ] long 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, status,2, status,0
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5669 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5670 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5672 ;;      Totals:         0       5       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5673 ;;Total ram usage:        9 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:   11
  5676 ;; This function calls:
  5677 ;;		Nothing
  5678 ;; This function is called by:
  5679 ;;		_main
  5680 ;;		_IRQ0_ISR
  5681 ;;		_I2C_SendCommand_L
  5682 ;;		_MRF89XA_SendCommand
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text54
  5687  002182                     __ptext54:
  5688                           	opt callstack 0
  5689  002182                     _Delay_Xms:
  5690                           	opt callstack 19
  5691                           
  5692                           ;main.c: 22: for(long i = 0; i < delay; i++) {
  5693                           
  5694                           ; BSR set to: 14
  5695                           ;incstack = 0
  5696  002182  0E00               	movlw	0
  5697  002184  0101               	movlb	1	; () banked
  5698  002186  6F80               	movwf	Delay_Xms@i& (0+255),b
  5699  002188  0E00               	movlw	0
  5700  00218A  6F81               	movwf	(Delay_Xms@i+1)& (0+255),b
  5701  00218C  0E00               	movlw	0
  5702  00218E  6F82               	movwf	(Delay_Xms@i+2)& (0+255),b
  5703  002190  0E00               	movlw	0
  5704  002192  6F83               	movwf	(Delay_Xms@i+3)& (0+255),b
  5705  002194  D010               	goto	l6486
  5706  002196                     l6482:
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;main.c: 23: _delay((unsigned long)((1)*(24000000/4000.0)));
  5710  002196  0E08               	movlw	8
  5711  002198  0100               	movlb	0	; () banked
  5712  00219A  6FFC               	movwf	??_Delay_Xms& (0+255),b
  5713  00219C  0EC9               	movlw	201
  5714  00219E                     u6007:
  5715  00219E  2EE8               	decfsz	wreg,f,c
  5716  0021A0  D7FE               	bra	u6007
  5717  0021A2  2FFC               	decfsz	??_Delay_Xms& (0+255),f,b
  5718  0021A4  D7FC               	bra	u6007
  5719  0021A6  D000               	nop2	
  5720  0021A8  0E01               	movlw	1
  5721  0021AA  0101               	movlb	1	; () banked
  5722  0021AC  2780               	addwf	Delay_Xms@i& (0+255),f,b
  5723  0021AE  0E00               	movlw	0
  5724  0021B0  2381               	addwfc	(Delay_Xms@i+1)& (0+255),f,b
  5725  0021B2  2382               	addwfc	(Delay_Xms@i+2)& (0+255),f,b
  5726  0021B4  2383               	addwfc	(Delay_Xms@i+3)& (0+255),f,b
  5727  0021B6                     l6486:
  5728                           
  5729                           ; BSR set to: 1
  5730  0021B6  0100               	movlb	0	; () banked
  5731  0021B8  51F8               	movf	Delay_Xms@delay& (0+255),w,b
  5732  0021BA  0101               	movlb	1	; () banked
  5733  0021BC  5D80               	subwf	Delay_Xms@i& (0+255),w,b
  5734  0021BE  0100               	movlb	0	; () banked
  5735  0021C0  51F9               	movf	(Delay_Xms@delay+1)& (0+255),w,b
  5736  0021C2  0101               	movlb	1	; () banked
  5737  0021C4  5981               	subwfb	(Delay_Xms@i+1)& (0+255),w,b
  5738  0021C6  0100               	movlb	0	; () banked
  5739  0021C8  51FA               	movf	(Delay_Xms@delay+2)& (0+255),w,b
  5740  0021CA  0101               	movlb	1	; () banked
  5741  0021CC  5982               	subwfb	(Delay_Xms@i+2)& (0+255),w,b
  5742  0021CE  5183               	movf	(Delay_Xms@i+3)& (0+255),w,b
  5743  0021D0  0A80               	xorlw	128
  5744  0021D2  0100               	movlb	0	; () banked
  5745  0021D4  6FFC               	movwf	??_Delay_Xms& (0+255),b
  5746  0021D6  51FB               	movf	(Delay_Xms@delay+3)& (0+255),w,b
  5747  0021D8  0A80               	xorlw	128
  5748  0021DA  59FC               	subwfb	??_Delay_Xms& (0+255),w,b
  5749  0021DC  B0D8               	btfsc	status,0,c
  5750  0021DE  0012               	return	
  5751  0021E0  D7DA               	goto	l6482
  5752  0021E2                     __end_of_Delay_Xms:
  5753                           	opt callstack 0
  5754                           
  5755 ;; *************** function _INTERRUPT_InterruptManager *****************
  5756 ;; Defined at:
  5757 ;;		line 59 in file "mcc_generated_files/interrupt_manager.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;		None
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;		None
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      void 
  5764 ;; Registers used:
  5765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5773 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5774 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5775 ;;Total ram usage:        4 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:   10
  5778 ;; This function calls:
  5779 ;;		Absolute function
  5780 ;;		_EUSART1_Receive_ISR
  5781 ;;		_EUSART1_Transmit_ISR
  5782 ;;		_I2C_BusCollisionISR
  5783 ;;		_INT0_ISR
  5784 ;;		_INT1_ISR
  5785 ;;		_INT2_ISR
  5786 ;;		_PIN_MANAGER_IOC
  5787 ;;		_TMR2_ISR
  5788 ;;		_TMR4_ISR
  5789 ;;		_spi2_isr
  5790 ;; This function is called by:
  5791 ;;		Interrupt level 2
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	intcode
  5796  000008                     __pintcode:
  5797                           	opt callstack 0
  5798  000008                     _INTERRUPT_InterruptManager:
  5799                           	opt callstack 14
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;incstack = 0
  5803  000008  8252               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5804  00000A  CFFA F041          	movff	pclath,??_INTERRUPT_InterruptManager
  5805  00000E  CFFB F042          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  5806  000012  CFD9 F043          	movff	fsr2l,??_INTERRUPT_InterruptManager+2
  5807  000016  CFDA F044          	movff	fsr2h,??_INTERRUPT_InterruptManager+3
  5808                           
  5809                           ;interrupt_manager.c: 62: if(PIE0bits.INT0IE == 1 && PIR0bits.INT0IF == 1)
  5810  00001A  010E               	movlb	14	; () banked
  5811  00001C  B1C2               	btfsc	194,0,b	;volatile
  5812                           
  5813                           ; BSR set to: 14
  5814  00001E  A1CA               	btfss	202,0,b	;volatile
  5815  000020  D003               	goto	i2l222
  5816                           
  5817                           ; BSR set to: 14
  5818                           ;interrupt_manager.c: 63: {;interrupt_manager.c: 64: INT0_ISR();
  5819  000022  EC87  F015         	call	_INT0_ISR	;wreg free
  5820                           
  5821                           ;interrupt_manager.c: 65: }
  5822  000026  D046               	goto	i2l238
  5823  000028                     i2l222:
  5824                           
  5825                           ; BSR set to: 14
  5826                           ;interrupt_manager.c: 66: else if(PIE0bits.INT1IE == 1 && PIR0bits.INT1IF == 1)
  5827  000028  B3C2               	btfsc	194,1,b	;volatile
  5828                           
  5829                           ; BSR set to: 14
  5830  00002A  A3CA               	btfss	202,1,b	;volatile
  5831  00002C  D003               	goto	i2l224
  5832                           
  5833                           ; BSR set to: 14
  5834                           ;interrupt_manager.c: 67: {;interrupt_manager.c: 68: INT1_ISR();
  5835  00002E  EC82  F015         	call	_INT1_ISR	;wreg free
  5836                           
  5837                           ;interrupt_manager.c: 69: }
  5838  000032  D040               	goto	i2l238
  5839  000034                     i2l224:
  5840                           
  5841                           ; BSR set to: 14
  5842                           ;interrupt_manager.c: 70: else if(PIE0bits.INT2IE == 1 && PIR0bits.INT2IF == 1)
  5843  000034  B5C2               	btfsc	194,2,b	;volatile
  5844                           
  5845                           ; BSR set to: 14
  5846  000036  A5CA               	btfss	202,2,b	;volatile
  5847  000038  D003               	goto	i2l226
  5848                           
  5849                           ; BSR set to: 14
  5850                           ;interrupt_manager.c: 71: {;interrupt_manager.c: 72: INT2_ISR();
  5851  00003A  EC7D  F015         	call	_INT2_ISR	;wreg free
  5852                           
  5853                           ;interrupt_manager.c: 73: }
  5854  00003E  D03A               	goto	i2l238
  5855  000040                     i2l226:
  5856                           
  5857                           ; BSR set to: 14
  5858                           ;interrupt_manager.c: 74: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
  5859  000040  B9C2               	btfsc	194,4,b	;volatile
  5860                           
  5861                           ; BSR set to: 14
  5862  000042  A9CA               	btfss	202,4,b	;volatile
  5863  000044  D003               	goto	i2l228
  5864                           
  5865                           ; BSR set to: 14
  5866                           ;interrupt_manager.c: 75: {;interrupt_manager.c: 76: PIN_MANAGER_IOC();
  5867  000046  EC47  F011         	call	_PIN_MANAGER_IOC	;wreg free
  5868                           
  5869                           ;interrupt_manager.c: 77: }
  5870  00004A  D034               	goto	i2l238
  5871  00004C                     i2l228:
  5872                           
  5873                           ; BSR set to: 14
  5874                           ;interrupt_manager.c: 78: else if(INTCONbits.PEIE == 1)
  5875  00004C  ACF2               	btfss	4082,6,c	;volatile
  5876  00004E  D032               	goto	i2l238
  5877                           
  5878                           ; BSR set to: 14
  5879                           ;interrupt_manager.c: 79: {;interrupt_manager.c: 80: if(PIE3bits.BCL1IE == 1 && PIR3bits
      +                          .BCL1IF == 1)
  5880  000050  B3C5               	btfsc	197,1,b	;volatile
  5881                           
  5882                           ; BSR set to: 14
  5883  000052  A3CD               	btfss	205,1,b	;volatile
  5884  000054  D003               	goto	i2l231
  5885                           
  5886                           ; BSR set to: 14
  5887                           ;interrupt_manager.c: 81: {;interrupt_manager.c: 82: I2C_BusCollisionISR();
  5888  000056  EC9E  F015         	call	_I2C_BusCollisionISR	;wreg free
  5889                           
  5890                           ;interrupt_manager.c: 83: }
  5891  00005A  D02C               	goto	i2l238
  5892  00005C                     i2l231:
  5893                           
  5894                           ; BSR set to: 14
  5895                           ;interrupt_manager.c: 84: else if(PIE3bits.TX1IE == 1 && PIR3bits.TX1IF == 1)
  5896  00005C  B9C5               	btfsc	197,4,b	;volatile
  5897                           
  5898                           ; BSR set to: 14
  5899  00005E  A9CD               	btfss	205,4,b	;volatile
  5900  000060  D009               	goto	i2l233
  5901                           
  5902                           ; BSR set to: 14
  5903                           ;interrupt_manager.c: 85: {;interrupt_manager.c: 86: EUSART1_TxDefaultInterruptHandler()
      +                          ;
  5904  000062  D801               	call	i2u490_48
  5905  000064  D027               	goto	i2l238
  5906  000066                     i2u490_48:
  5907  000066  0005               	push	
  5908  000068  6EFA               	movwf	pclath,c
  5909  00006A  0100               	movlb	0	; () banked
  5910  00006C  51EE               	movf	_EUSART1_TxDefaultInterruptHandler& (0+255),w,b
  5911  00006E  6EFD               	movwf	tosl,c
  5912  000070  51EF               	movf	(_EUSART1_TxDefaultInterruptHandler+1)& (0+255),w,b
  5913  000072  D00B               	goto	L3
  5914  000074                     i2l233:
  5915                           
  5916                           ; BSR set to: 14
  5917                           ;interrupt_manager.c: 88: else if(PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1)
  5918  000074  BBC5               	btfsc	197,5,b	;volatile
  5919                           
  5920                           ; BSR set to: 14
  5921  000076  ABCD               	btfss	205,5,b	;volatile
  5922  000078  D00C               	goto	i2l235
  5923                           
  5924                           ; BSR set to: 14
  5925                           ;interrupt_manager.c: 89: {;interrupt_manager.c: 90: EUSART1_RxDefaultInterruptHandler()
      +                          ;
  5926  00007A  D801               	call	i2u493_48
  5927  00007C  D01B               	goto	i2l238
  5928  00007E                     i2u493_48:
  5929  00007E  0005               	push	
  5930  000080  6EFA               	movwf	pclath,c
  5931  000082  0100               	movlb	0	; () banked
  5932  000084  51EC               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
  5933  000086  6EFD               	movwf	tosl,c
  5934  000088  51ED               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
  5935  00008A                     L3:
  5936  00008A  6EFE               	movwf	tosh,c
  5937  00008C  6AFF               	clrf	tosu,c
  5938  00008E  50FA               	movf	pclath,w,c
  5939  000090  0012               	return		;indir
  5940  000092                     i2l235:
  5941                           
  5942                           ; BSR set to: 14
  5943                           ;interrupt_manager.c: 93: else if(PIE3bits.SSP2IE == 1 && PIR3bits.SSP2IF == 1)
  5944  000092  B5C5               	btfsc	197,2,b	;volatile
  5945                           
  5946                           ; BSR set to: 14
  5947  000094  A5CD               	btfss	205,2,b	;volatile
  5948  000096  D003               	goto	i2l237
  5949                           
  5950                           ; BSR set to: 14
  5951                           ;interrupt_manager.c: 94: {;interrupt_manager.c: 95: spi2_isr();
  5952  000098  EC73  F015         	call	_spi2_isr	;wreg free
  5953                           
  5954                           ;interrupt_manager.c: 96: }
  5955  00009C  D00B               	goto	i2l238
  5956  00009E                     i2l237:
  5957                           
  5958                           ; BSR set to: 14
  5959                           ;interrupt_manager.c: 97: else if(PIE4bits.TMR4IE == 1 && PIR4bits.TMR4IF == 1)
  5960  00009E  B7C6               	btfsc	198,3,b	;volatile
  5961                           
  5962                           ; BSR set to: 14
  5963  0000A0  A7CE               	btfss	206,3,b	;volatile
  5964  0000A2  D003               	goto	i2l239
  5965                           
  5966                           ; BSR set to: 14
  5967                           ;interrupt_manager.c: 98: {;interrupt_manager.c: 99: TMR4_ISR();
  5968  0000A4  ECCC  F013         	call	_TMR4_ISR	;wreg free
  5969                           
  5970                           ;interrupt_manager.c: 100: }
  5971  0000A8  D005               	goto	i2l238
  5972  0000AA                     i2l239:
  5973                           
  5974                           ; BSR set to: 14
  5975                           ;interrupt_manager.c: 101: else if(PIE4bits.TMR2IE == 1 && PIR4bits.TMR2IF == 1)
  5976  0000AA  B3C6               	btfsc	198,1,b	;volatile
  5977                           
  5978                           ; BSR set to: 14
  5979  0000AC  A3CE               	btfss	206,1,b	;volatile
  5980  0000AE  D002               	goto	i2l238
  5981                           
  5982                           ; BSR set to: 14
  5983                           ;interrupt_manager.c: 102: {;interrupt_manager.c: 103: TMR2_ISR();
  5984  0000B0  EC78  F015         	call	_TMR2_ISR	;wreg free
  5985  0000B4                     i2l238:
  5986                           
  5987                           ; BSR set to: 14
  5988  0000B4  C044  FFDA         	movff	??_INTERRUPT_InterruptManager+3,fsr2h
  5989  0000B8  C043  FFD9         	movff	??_INTERRUPT_InterruptManager+2,fsr2l
  5990  0000BC  C042  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  5991  0000C0  C041  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  5992  0000C4  9252               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5993  0000C6  0011               	retfie		f
  5994  0000C8                     __end_of_INTERRUPT_InterruptManager:
  5995                           	opt callstack 0
  5996                           
  5997 ;; *************** function _spi2_isr *****************
  5998 ;; Defined at:
  5999 ;;		line 118 in file "mcc_generated_files/spi2_driver.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;		None
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;		None
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		None
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6017 ;;Total ram usage:        0 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		_INTERRUPT_InterruptManager
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           	psect	text56
  6027  002AE6                     __ptext56:
  6028                           	opt callstack 0
  6029  002AE6                     _spi2_isr:
  6030                           	opt callstack 23
  6031                           
  6032                           ;spi2_driver.c: 119: if(PIR3bits.SSP2IF == 1){
  6033                           
  6034                           ;incstack = 0
  6035  002AE6  010E               	movlb	14	; () banked
  6036  002AE8  A5CD               	btfss	205,2,b	;volatile
  6037  002AEA  0012               	return	
  6038                           
  6039                           ; BSR set to: 14
  6040                           ;spi2_driver.c: 122: };spi2_driver.c: 123: PIR3bits.SSP2IF = 0;
  6041  002AEC  95CD               	bcf	205,2,b	;volatile
  6042                           
  6043                           ; BSR set to: 14
  6044  002AEE  0012               	return		;funcret
  6045  002AF0                     __end_of_spi2_isr:
  6046                           	opt callstack 0
  6047                           
  6048 ;; *************** function _TMR4_ISR *****************
  6049 ;; Defined at:
  6050 ;;		line 165 in file "mcc_generated_files/tmr4.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      void 
  6057 ;; Registers used:
  6058 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    2
  6071 ;; This function calls:
  6072 ;;		_TMR4_CallBack
  6073 ;; This function is called by:
  6074 ;;		_INTERRUPT_InterruptManager
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	text57
  6079  002798                     __ptext57:
  6080                           	opt callstack 0
  6081  002798                     _TMR4_ISR:
  6082                           	opt callstack 21
  6083                           
  6084                           ;tmr4.c: 167: static volatile unsigned int CountCallBack = 0;;tmr4.c: 170: PIR4bits.TMR4
      +                          IF = 0;
  6085                           
  6086                           ; BSR set to: 14
  6087                           ;incstack = 0
  6088  002798  010E               	movlb	14	; () banked
  6089  00279A  97CE               	bcf	206,3,b	;volatile
  6090                           
  6091                           ; BSR set to: 14
  6092                           ;tmr4.c: 173: if (++CountCallBack >= 10)
  6093  00279C  4A01               	infsnz	TMR4_ISR@CountCallBack,f,c	;volatile
  6094  00279E  2A02               	incf	TMR4_ISR@CountCallBack+1,f,c	;volatile
  6095  0027A0  5002               	movf	TMR4_ISR@CountCallBack+1,w,c	;volatile
  6096  0027A2  E104               	bnz	i2u463_40
  6097  0027A4  0E0A               	movlw	10
  6098  0027A6  5C01               	subwf	TMR4_ISR@CountCallBack,w,c	;volatile
  6099  0027A8  A0D8               	btfss	status,0,c
  6100  0027AA  0012               	return	
  6101  0027AC                     i2u463_40:
  6102                           
  6103                           ; BSR set to: 14
  6104                           ;tmr4.c: 174: {;tmr4.c: 176: TMR4_CallBack();
  6105  0027AC  ECDD  F013         	call	_TMR4_CallBack	;wreg free
  6106                           
  6107                           ;tmr4.c: 179: CountCallBack = 0;
  6108  0027B0  0E00               	movlw	0
  6109  0027B2  6E02               	movwf	TMR4_ISR@CountCallBack+1,c	;volatile
  6110  0027B4  0E00               	movlw	0
  6111  0027B6  6E01               	movwf	TMR4_ISR@CountCallBack,c	;volatile
  6112  0027B8  0012               	return		;funcret
  6113  0027BA                     __end_of_TMR4_ISR:
  6114                           	opt callstack 0
  6115                           
  6116 ;; *************** function _TMR4_CallBack *****************
  6117 ;; Defined at:
  6118 ;;		line 183 in file "mcc_generated_files/tmr4.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    1
  6139 ;; This function calls:
  6140 ;;		Absolute function
  6141 ;;		_TMR4_DefaultInterruptHandler
  6142 ;; This function is called by:
  6143 ;;		_TMR4_ISR
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           	psect	text58
  6148  0027BA                     __ptext58:
  6149                           	opt callstack 0
  6150  0027BA                     _TMR4_CallBack:
  6151                           	opt callstack 21
  6152                           
  6153                           ;tmr4.c: 187: if(TMR4_InterruptHandler)
  6154                           
  6155                           ;incstack = 0
  6156  0027BA  0100               	movlb	0	; () banked
  6157  0027BC  51D0               	movf	_TMR4_InterruptHandler& (0+255),w,b
  6158  0027BE  11D1               	iorwf	(_TMR4_InterruptHandler+1)& (0+255),w,b
  6159  0027C0  B4D8               	btfsc	status,2,c
  6160  0027C2  0012               	return	
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;tmr4.c: 188: {;tmr4.c: 189: TMR4_InterruptHandler();
  6164  0027C4  D801               	call	i2u441_48
  6165  0027C6  0012               	return	
  6166  0027C8                     i2u441_48:
  6167  0027C8  0005               	push	
  6168  0027CA  6EFA               	movwf	pclath,c
  6169  0027CC  51D0               	movf	_TMR4_InterruptHandler& (0+255),w,b
  6170  0027CE  6EFD               	movwf	tosl,c
  6171  0027D0  51D1               	movf	(_TMR4_InterruptHandler+1)& (0+255),w,b
  6172  0027D2  6EFE               	movwf	tosh,c
  6173  0027D4  6AFF               	clrf	tosu,c
  6174  0027D6  50FA               	movf	pclath,w,c
  6175  0027D8  0012               	return		;indir
  6176  0027DA                     __end_of_TMR4_CallBack:
  6177                           	opt callstack 0
  6178                           
  6179 ;; *************** function _TMR4_DefaultInterruptHandler *****************
  6180 ;; Defined at:
  6181 ;;		line 197 in file "mcc_generated_files/tmr4.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;		None
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;		None
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  1    wreg      void 
  6188 ;; Registers used:
  6189 ;;		None
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6199 ;;Total ram usage:        0 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_TMR4_Initialize
  6205 ;;		_TMR4_CallBack
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text59
  6210  002B5A                     __ptext59:
  6211                           	opt callstack 0
  6212  002B5A                     _TMR4_DefaultInterruptHandler:
  6213                           	opt callstack 21
  6214                           
  6215                           ;incstack = 0
  6216  002B5A  0012               	return		;funcret
  6217  002B5C                     __end_of_TMR4_DefaultInterruptHandler:
  6218                           	opt callstack 0
  6219                           
  6220 ;; *************** function _TMR2_ISR *****************
  6221 ;; Defined at:
  6222 ;;		line 165 in file "mcc_generated_files/tmr2.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;		None
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;		None
  6227 ;; Return value:  Size  Location     Type
  6228 ;;                  1    wreg      void 
  6229 ;; Registers used:
  6230 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6240 ;;Total ram usage:        0 bytes
  6241 ;; Hardware stack levels used:    1
  6242 ;; Hardware stack levels required when called:    3
  6243 ;; This function calls:
  6244 ;;		_TMR2_CallBack
  6245 ;; This function is called by:
  6246 ;;		_INTERRUPT_InterruptManager
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           	psect	text60
  6251  002AF0                     __ptext60:
  6252                           	opt callstack 0
  6253  002AF0                     _TMR2_ISR:
  6254                           	opt callstack 20
  6255                           
  6256                           ;tmr2.c: 169: PIR4bits.TMR2IF = 0;
  6257                           
  6258                           ;incstack = 0
  6259  002AF0  010E               	movlb	14	; () banked
  6260  002AF2  93CE               	bcf	206,1,b	;volatile
  6261                           
  6262                           ; BSR set to: 14
  6263                           ;tmr2.c: 173: TMR2_CallBack();
  6264  002AF4  ECED  F013         	call	_TMR2_CallBack	;wreg free
  6265  002AF8  0012               	return		;funcret
  6266  002AFA                     __end_of_TMR2_ISR:
  6267                           	opt callstack 0
  6268                           
  6269 ;; *************** function _TMR2_CallBack *****************
  6270 ;; Defined at:
  6271 ;;		line 176 in file "mcc_generated_files/tmr2.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;		None
  6274 ;; Auto vars:     Size  Location     Type
  6275 ;;		None
  6276 ;; Return value:  Size  Location     Type
  6277 ;;                  1    wreg      void 
  6278 ;; Registers used:
  6279 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6280 ;; Tracked objects:
  6281 ;;		On entry : 0/0
  6282 ;;		On exit  : 0/0
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6289 ;;Total ram usage:        0 bytes
  6290 ;; Hardware stack levels used:    1
  6291 ;; Hardware stack levels required when called:    2
  6292 ;; This function calls:
  6293 ;;		Absolute function
  6294 ;;		_TMR2_Custom_ISR
  6295 ;;		_TMR2_DefaultInterruptHandler
  6296 ;; This function is called by:
  6297 ;;		_TMR2_ISR
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           	psect	text61
  6302  0027DA                     __ptext61:
  6303                           	opt callstack 0
  6304  0027DA                     _TMR2_CallBack:
  6305                           	opt callstack 20
  6306                           
  6307                           ;tmr2.c: 180: if(TMR2_InterruptHandler)
  6308                           
  6309                           ;incstack = 0
  6310  0027DA  0100               	movlb	0	; () banked
  6311  0027DC  51F6               	movf	_TMR2_InterruptHandler& (0+255),w,b
  6312  0027DE  11F7               	iorwf	(_TMR2_InterruptHandler+1)& (0+255),w,b
  6313  0027E0  B4D8               	btfsc	status,2,c
  6314  0027E2  0012               	return	
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;tmr2.c: 181: {;tmr2.c: 182: TMR2_InterruptHandler();
  6318  0027E4  D801               	call	i2u395_48
  6319  0027E6  0012               	return	
  6320  0027E8                     i2u395_48:
  6321  0027E8  0005               	push	
  6322  0027EA  6EFA               	movwf	pclath,c
  6323  0027EC  51F6               	movf	_TMR2_InterruptHandler& (0+255),w,b
  6324  0027EE  6EFD               	movwf	tosl,c
  6325  0027F0  51F7               	movf	(_TMR2_InterruptHandler+1)& (0+255),w,b
  6326  0027F2  6EFE               	movwf	tosh,c
  6327  0027F4  6AFF               	clrf	tosu,c
  6328  0027F6  50FA               	movf	pclath,w,c
  6329  0027F8  0012               	return		;indir
  6330  0027FA                     __end_of_TMR2_CallBack:
  6331                           	opt callstack 0
  6332                           
  6333 ;; *************** function _TMR2_Custom_ISR *****************
  6334 ;; Defined at:
  6335 ;;		line 174 in file "LedBlink.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;		None
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;		None
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      void 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6353 ;;Total ram usage:        0 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    1
  6356 ;; This function calls:
  6357 ;;		i2_SetLed
  6358 ;; This function is called by:
  6359 ;;		_main
  6360 ;;		_TMR2_CallBack
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           	psect	text62
  6365  000F1E                     __ptext62:
  6366                           	opt callstack 0
  6367  000F1E                     _TMR2_Custom_ISR:
  6368                           	opt callstack 20
  6369                           
  6370                           ;LedBlink.c: 176: if(R_Enabled == ON) {
  6371                           
  6372                           ;incstack = 0
  6373  000F1E  0423               	decf	_R_Enabled,w,c
  6374  000F20  1024               	iorwf	_R_Enabled+1,w,c
  6375  000F22  A4D8               	btfss	status,2,c
  6376  000F24  D06E               	goto	i2l4924
  6377                           
  6378                           ;LedBlink.c: 177: if(R_StartAfter == 0)
  6379  000F26  501F               	movf	_R_StartAfter,w,c
  6380  000F28  1020               	iorwf	_R_StartAfter+1,w,c
  6381  000F2A  A4D8               	btfss	status,2,c
  6382  000F2C  D067               	goto	i2l4922
  6383                           
  6384                           ;LedBlink.c: 178: {;LedBlink.c: 179: R_Counter++;
  6385  000F2E  4A21               	infsnz	_R_Counter,f,c
  6386  000F30  2A22               	incf	_R_Counter+1,f,c
  6387                           
  6388                           ;LedBlink.c: 180: if(R_State == UNIDENTIFIED)
  6389  000F32  0E03               	movlw	3
  6390  000F34  184F               	xorwf	_R_State,w,c
  6391  000F36  1050               	iorwf	_R_State+1,w,c
  6392  000F38  A4D8               	btfss	status,2,c
  6393  000F3A  D013               	goto	i2l4896
  6394                           
  6395                           ;LedBlink.c: 181: {;LedBlink.c: 182: R_State = ON;
  6396  000F3C  0E00               	movlw	0
  6397  000F3E  6E50               	movwf	_R_State+1,c
  6398  000F40  0E01               	movlw	1
  6399  000F42  6E4F               	movwf	_R_State,c
  6400                           
  6401                           ;LedBlink.c: 183: SetLed(R,ON);
  6402  000F44  0E00               	movlw	0
  6403  000F46  6E32               	movwf	i2SetLed@ledIndex+1,c
  6404  000F48  0E00               	movlw	0
  6405  000F4A  6E31               	movwf	i2SetLed@ledIndex,c
  6406  000F4C  0E00               	movlw	0
  6407  000F4E  6E34               	movwf	i2SetLed@Mode+1,c
  6408  000F50  0E01               	movlw	1
  6409  000F52  6E33               	movwf	i2SetLed@Mode,c
  6410  000F54  ECAD  F00F         	call	i2_SetLed	;wreg free
  6411                           
  6412                           ;LedBlink.c: 184: R_Counter = 0;
  6413  000F58  0E00               	movlw	0
  6414  000F5A  6E22               	movwf	_R_Counter+1,c
  6415  000F5C  0E00               	movlw	0
  6416  000F5E  6E21               	movwf	_R_Counter,c
  6417                           
  6418                           ;LedBlink.c: 185: }
  6419  000F60  D050               	goto	i2l4924
  6420  000F62                     i2l4896:
  6421                           
  6422                           ;LedBlink.c: 186: else if(R_State == OFF && R_Counter == R_OffTime)
  6423  000F62  0E02               	movlw	2
  6424  000F64  184F               	xorwf	_R_State,w,c
  6425  000F66  1050               	iorwf	_R_State+1,w,c
  6426  000F68  A4D8               	btfss	status,2,c
  6427  000F6A  D01A               	goto	i2l4906
  6428  000F6C  5025               	movf	_R_OffTime,w,c
  6429  000F6E  1821               	xorwf	_R_Counter,w,c
  6430  000F70  E117               	bnz	i2l4906
  6431  000F72  5026               	movf	_R_OffTime+1,w,c
  6432  000F74  1822               	xorwf	_R_Counter+1,w,c
  6433  000F76  A4D8               	btfss	status,2,c
  6434  000F78  D013               	goto	i2l4906
  6435                           
  6436                           ;LedBlink.c: 187: {;LedBlink.c: 189: SetLed(R, ON);
  6437  000F7A  0E00               	movlw	0
  6438  000F7C  6E32               	movwf	i2SetLed@ledIndex+1,c
  6439  000F7E  0E00               	movlw	0
  6440  000F80  6E31               	movwf	i2SetLed@ledIndex,c
  6441  000F82  0E00               	movlw	0
  6442  000F84  6E34               	movwf	i2SetLed@Mode+1,c
  6443  000F86  0E01               	movlw	1
  6444  000F88  6E33               	movwf	i2SetLed@Mode,c
  6445  000F8A  ECAD  F00F         	call	i2_SetLed	;wreg free
  6446                           
  6447                           ;LedBlink.c: 190: R_Counter = 0;
  6448  000F8E  0E00               	movlw	0
  6449  000F90  6E22               	movwf	_R_Counter+1,c
  6450  000F92  0E00               	movlw	0
  6451  000F94  6E21               	movwf	_R_Counter,c
  6452                           
  6453                           ;LedBlink.c: 191: R_State = ON;
  6454  000F96  0E00               	movlw	0
  6455  000F98  6E50               	movwf	_R_State+1,c
  6456  000F9A  0E01               	movlw	1
  6457  000F9C  6E4F               	movwf	_R_State,c
  6458                           
  6459                           ;LedBlink.c: 192: }
  6460  000F9E  D031               	goto	i2l4924
  6461  000FA0                     i2l4906:
  6462                           
  6463                           ;LedBlink.c: 193: else if (R_State == ON && R_Counter == R_OnTime)
  6464  000FA0  044F               	decf	_R_State,w,c
  6465  000FA2  1050               	iorwf	_R_State+1,w,c
  6466  000FA4  A4D8               	btfss	status,2,c
  6467  000FA6  D02D               	goto	i2l4924
  6468  000FA8  5027               	movf	_R_OnTime,w,c
  6469  000FAA  1821               	xorwf	_R_Counter,w,c
  6470  000FAC  E12A               	bnz	i2l4924
  6471  000FAE  5028               	movf	_R_OnTime+1,w,c
  6472  000FB0  1822               	xorwf	_R_Counter+1,w,c
  6473  000FB2  A4D8               	btfss	status,2,c
  6474  000FB4  D026               	goto	i2l4924
  6475                           
  6476                           ;LedBlink.c: 194: {;LedBlink.c: 196: SetLed(R, OFF);
  6477  000FB6  0E00               	movlw	0
  6478  000FB8  6E32               	movwf	i2SetLed@ledIndex+1,c
  6479  000FBA  0E00               	movlw	0
  6480  000FBC  6E31               	movwf	i2SetLed@ledIndex,c
  6481  000FBE  0E00               	movlw	0
  6482  000FC0  6E34               	movwf	i2SetLed@Mode+1,c
  6483  000FC2  0E02               	movlw	2
  6484  000FC4  6E33               	movwf	i2SetLed@Mode,c
  6485  000FC6  ECAD  F00F         	call	i2_SetLed	;wreg free
  6486                           
  6487                           ;LedBlink.c: 197: R_Counter = 0;
  6488  000FCA  0E00               	movlw	0
  6489  000FCC  6E22               	movwf	_R_Counter+1,c
  6490  000FCE  0E00               	movlw	0
  6491  000FD0  6E21               	movwf	_R_Counter,c
  6492                           
  6493                           ;LedBlink.c: 198: R_State = OFF;
  6494  000FD2  0E00               	movlw	0
  6495  000FD4  6E50               	movwf	_R_State+1,c
  6496  000FD6  0E02               	movlw	2
  6497  000FD8  6E4F               	movwf	_R_State,c
  6498                           
  6499                           ;LedBlink.c: 199: if(R_BlinkCount != -1)
  6500  000FDA  281D               	incf	_R_BlinkCount,w,c
  6501  000FDC  E103               	bnz	i2u347_40
  6502  000FDE  281E               	incf	_R_BlinkCount+1,w,c
  6503  000FE0  B4D8               	btfsc	status,2,c
  6504  000FE2  D00F               	goto	i2l4924
  6505  000FE4                     i2u347_40:
  6506                           
  6507                           ;LedBlink.c: 200: {;LedBlink.c: 201: if(--R_BlinkCounter == 0)
  6508  000FE4  061B               	decf	_R_BlinkCounter,f,c
  6509  000FE6  A0D8               	btfss	status,0,c
  6510  000FE8  061C               	decf	_R_BlinkCounter+1,f,c
  6511  000FEA  501B               	movf	_R_BlinkCounter,w,c
  6512  000FEC  101C               	iorwf	_R_BlinkCounter+1,w,c
  6513  000FEE  A4D8               	btfss	status,2,c
  6514  000FF0  D008               	goto	i2l4924
  6515                           
  6516                           ;LedBlink.c: 202: {;LedBlink.c: 203: R_Enabled = OFF;
  6517  000FF2  0E00               	movlw	0
  6518  000FF4  6E24               	movwf	_R_Enabled+1,c
  6519  000FF6  0E02               	movlw	2
  6520  000FF8  6E23               	movwf	_R_Enabled,c
  6521  000FFA  D003               	goto	i2l4924
  6522  000FFC                     i2l4922:
  6523                           
  6524                           ;LedBlink.c: 208: R_StartAfter--;
  6525  000FFC  061F               	decf	_R_StartAfter,f,c
  6526  000FFE  A0D8               	btfss	status,0,c
  6527  001000  0620               	decf	_R_StartAfter+1,f,c
  6528  001002                     i2l4924:
  6529                           
  6530                           ;LedBlink.c: 209: };LedBlink.c: 211: if(G_Enabled == ON) {
  6531  001002  0100               	movlb	0	; () banked
  6532  001004  05CE               	decf	_G_Enabled& (0+255),w,b
  6533  001006  11CF               	iorwf	(_G_Enabled+1)& (0+255),w,b
  6534  001008  A4D8               	btfss	status,2,c
  6535  00100A  D06F               	goto	i2l4966
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;LedBlink.c: 212: if(G_StartAfter == 0)
  6539  00100C  51CC               	movf	_G_StartAfter& (0+255),w,b
  6540  00100E  11CD               	iorwf	(_G_StartAfter+1)& (0+255),w,b
  6541  001010  A4D8               	btfss	status,2,c
  6542  001012  D068               	goto	i2l4964
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;LedBlink.c: 213: {;LedBlink.c: 214: G_Counter++;
  6546  001014  4A15               	infsnz	_G_Counter,f,c
  6547  001016  2A16               	incf	_G_Counter+1,f,c
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;LedBlink.c: 215: if(G_State == UNIDENTIFIED)
  6551  001018  0E03               	movlw	3
  6552  00101A  184D               	xorwf	_G_State,w,c
  6553  00101C  104E               	iorwf	_G_State+1,w,c
  6554  00101E  A4D8               	btfss	status,2,c
  6555  001020  D013               	goto	i2l4938
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;LedBlink.c: 216: {;LedBlink.c: 217: G_State = ON;
  6559  001022  0E00               	movlw	0
  6560  001024  6E4E               	movwf	_G_State+1,c
  6561  001026  0E01               	movlw	1
  6562  001028  6E4D               	movwf	_G_State,c
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;LedBlink.c: 218: SetLed(G,ON);
  6566  00102A  0E00               	movlw	0
  6567  00102C  6E32               	movwf	i2SetLed@ledIndex+1,c
  6568  00102E  0E01               	movlw	1
  6569  001030  6E31               	movwf	i2SetLed@ledIndex,c
  6570  001032  0E00               	movlw	0
  6571  001034  6E34               	movwf	i2SetLed@Mode+1,c
  6572  001036  0E01               	movlw	1
  6573  001038  6E33               	movwf	i2SetLed@Mode,c
  6574  00103A  ECAD  F00F         	call	i2_SetLed	;wreg free
  6575                           
  6576                           ;LedBlink.c: 219: G_Counter = 0;
  6577  00103E  0E00               	movlw	0
  6578  001040  6E16               	movwf	_G_Counter+1,c
  6579  001042  0E00               	movlw	0
  6580  001044  6E15               	movwf	_G_Counter,c
  6581                           
  6582                           ;LedBlink.c: 220: }
  6583  001046  D051               	goto	i2l4966
  6584  001048                     i2l4938:
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;LedBlink.c: 221: else if(G_State == OFF && G_Counter == G_OffTime)
  6588  001048  0E02               	movlw	2
  6589  00104A  184D               	xorwf	_G_State,w,c
  6590  00104C  104E               	iorwf	_G_State+1,w,c
  6591  00104E  A4D8               	btfss	status,2,c
  6592  001050  D01A               	goto	i2l4948
  6593                           
  6594                           ; BSR set to: 0
  6595  001052  5017               	movf	_G_OffTime,w,c
  6596  001054  1815               	xorwf	_G_Counter,w,c
  6597  001056  E117               	bnz	i2l4948
  6598  001058  5018               	movf	_G_OffTime+1,w,c
  6599  00105A  1816               	xorwf	_G_Counter+1,w,c
  6600  00105C  A4D8               	btfss	status,2,c
  6601  00105E  D013               	goto	i2l4948
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;LedBlink.c: 222: {;LedBlink.c: 224: SetLed(G, ON);
  6605  001060  0E00               	movlw	0
  6606  001062  6E32               	movwf	i2SetLed@ledIndex+1,c
  6607  001064  0E01               	movlw	1
  6608  001066  6E31               	movwf	i2SetLed@ledIndex,c
  6609  001068  0E00               	movlw	0
  6610  00106A  6E34               	movwf	i2SetLed@Mode+1,c
  6611  00106C  0E01               	movlw	1
  6612  00106E  6E33               	movwf	i2SetLed@Mode,c
  6613  001070  ECAD  F00F         	call	i2_SetLed	;wreg free
  6614                           
  6615                           ;LedBlink.c: 225: G_Counter = 0;
  6616  001074  0E00               	movlw	0
  6617  001076  6E16               	movwf	_G_Counter+1,c
  6618  001078  0E00               	movlw	0
  6619  00107A  6E15               	movwf	_G_Counter,c
  6620                           
  6621                           ;LedBlink.c: 226: G_State = ON;
  6622  00107C  0E00               	movlw	0
  6623  00107E  6E4E               	movwf	_G_State+1,c
  6624  001080  0E01               	movlw	1
  6625  001082  6E4D               	movwf	_G_State,c
  6626                           
  6627                           ;LedBlink.c: 227: }
  6628  001084  D032               	goto	i2l4966
  6629  001086                     i2l4948:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;LedBlink.c: 228: else if (G_State == ON && G_Counter == G_OnTime)
  6633  001086  044D               	decf	_G_State,w,c
  6634  001088  104E               	iorwf	_G_State+1,w,c
  6635  00108A  A4D8               	btfss	status,2,c
  6636  00108C  D02E               	goto	i2l4966
  6637                           
  6638                           ; BSR set to: 0
  6639  00108E  5019               	movf	_G_OnTime,w,c
  6640  001090  1815               	xorwf	_G_Counter,w,c
  6641  001092  E12B               	bnz	i2l4966
  6642  001094  501A               	movf	_G_OnTime+1,w,c
  6643  001096  1816               	xorwf	_G_Counter+1,w,c
  6644  001098  A4D8               	btfss	status,2,c
  6645  00109A  D027               	goto	i2l4966
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;LedBlink.c: 229: {;LedBlink.c: 231: SetLed(G, OFF);
  6649  00109C  0E00               	movlw	0
  6650  00109E  6E32               	movwf	i2SetLed@ledIndex+1,c
  6651  0010A0  0E01               	movlw	1
  6652  0010A2  6E31               	movwf	i2SetLed@ledIndex,c
  6653  0010A4  0E00               	movlw	0
  6654  0010A6  6E34               	movwf	i2SetLed@Mode+1,c
  6655  0010A8  0E02               	movlw	2
  6656  0010AA  6E33               	movwf	i2SetLed@Mode,c
  6657  0010AC  ECAD  F00F         	call	i2_SetLed	;wreg free
  6658                           
  6659                           ;LedBlink.c: 232: G_Counter = 0;
  6660  0010B0  0E00               	movlw	0
  6661  0010B2  6E16               	movwf	_G_Counter+1,c
  6662  0010B4  0E00               	movlw	0
  6663  0010B6  6E15               	movwf	_G_Counter,c
  6664                           
  6665                           ;LedBlink.c: 233: G_State = OFF;
  6666  0010B8  0E00               	movlw	0
  6667  0010BA  6E4E               	movwf	_G_State+1,c
  6668  0010BC  0E02               	movlw	2
  6669  0010BE  6E4D               	movwf	_G_State,c
  6670                           
  6671                           ;LedBlink.c: 234: if(G_BlinkCount != -1)
  6672  0010C0  2813               	incf	_G_BlinkCount,w,c
  6673  0010C2  E103               	bnz	i2u356_40
  6674  0010C4  2814               	incf	_G_BlinkCount+1,w,c
  6675  0010C6  B4D8               	btfsc	status,2,c
  6676  0010C8  D010               	goto	i2l4966
  6677  0010CA                     i2u356_40:
  6678                           
  6679                           ;LedBlink.c: 235: {;LedBlink.c: 236: if(--G_BlinkCounter == 0)
  6680  0010CA  0100               	movlb	0	; () banked
  6681  0010CC  07CA               	decf	_G_BlinkCounter& (0+255),f,b
  6682  0010CE  A0D8               	btfss	status,0,c
  6683  0010D0  07CB               	decf	(_G_BlinkCounter+1)& (0+255),f,b
  6684  0010D2  51CA               	movf	_G_BlinkCounter& (0+255),w,b
  6685  0010D4  11CB               	iorwf	(_G_BlinkCounter+1)& (0+255),w,b
  6686  0010D6  A4D8               	btfss	status,2,c
  6687  0010D8  D008               	goto	i2l4966
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;LedBlink.c: 237: {;LedBlink.c: 238: G_Enabled = OFF;
  6691  0010DA  0E00               	movlw	0
  6692  0010DC  6FCF               	movwf	(_G_Enabled+1)& (0+255),b
  6693  0010DE  0E02               	movlw	2
  6694  0010E0  6FCE               	movwf	_G_Enabled& (0+255),b
  6695                           
  6696                           ; BSR set to: 0
  6697  0010E2  D003               	goto	i2l4966
  6698  0010E4                     i2l4964:
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;LedBlink.c: 243: G_StartAfter--;
  6702  0010E4  07CC               	decf	_G_StartAfter& (0+255),f,b
  6703  0010E6  A0D8               	btfss	status,0,c
  6704  0010E8  07CD               	decf	(_G_StartAfter+1)& (0+255),f,b
  6705  0010EA                     i2l4966:
  6706                           
  6707                           ;LedBlink.c: 244: };LedBlink.c: 246: if(B_Enabled == ON) {
  6708  0010EA  0100               	movlb	0	; () banked
  6709  0010EC  05C4               	decf	_B_Enabled& (0+255),w,b
  6710  0010EE  11C5               	iorwf	(_B_Enabled+1)& (0+255),w,b
  6711  0010F0  A4D8               	btfss	status,2,c
  6712  0010F2  D06F               	goto	i2l5008
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;LedBlink.c: 247: if(B_StartAfter == 0)
  6716  0010F4  51C2               	movf	_B_StartAfter& (0+255),w,b
  6717  0010F6  11C3               	iorwf	(_B_StartAfter+1)& (0+255),w,b
  6718  0010F8  A4D8               	btfss	status,2,c
  6719  0010FA  D068               	goto	i2l5006
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;LedBlink.c: 248: {;LedBlink.c: 249: B_Counter++;
  6723  0010FC  4A11               	infsnz	_B_Counter,f,c
  6724  0010FE  2A12               	incf	_B_Counter+1,f,c
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;LedBlink.c: 250: if(B_State == UNIDENTIFIED)
  6728  001100  0E03               	movlw	3
  6729  001102  184B               	xorwf	_B_State,w,c
  6730  001104  104C               	iorwf	_B_State+1,w,c
  6731  001106  A4D8               	btfss	status,2,c
  6732  001108  D013               	goto	i2l4980
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;LedBlink.c: 251: {;LedBlink.c: 252: B_State = ON;
  6736  00110A  0E00               	movlw	0
  6737  00110C  6E4C               	movwf	_B_State+1,c
  6738  00110E  0E01               	movlw	1
  6739  001110  6E4B               	movwf	_B_State,c
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;LedBlink.c: 253: SetLed(B,ON);
  6743  001112  0E00               	movlw	0
  6744  001114  6E32               	movwf	i2SetLed@ledIndex+1,c
  6745  001116  0E02               	movlw	2
  6746  001118  6E31               	movwf	i2SetLed@ledIndex,c
  6747  00111A  0E00               	movlw	0
  6748  00111C  6E34               	movwf	i2SetLed@Mode+1,c
  6749  00111E  0E01               	movlw	1
  6750  001120  6E33               	movwf	i2SetLed@Mode,c
  6751  001122  ECAD  F00F         	call	i2_SetLed	;wreg free
  6752                           
  6753                           ;LedBlink.c: 254: B_Counter = 0;
  6754  001126  0E00               	movlw	0
  6755  001128  6E12               	movwf	_B_Counter+1,c
  6756  00112A  0E00               	movlw	0
  6757  00112C  6E11               	movwf	_B_Counter,c
  6758                           
  6759                           ;LedBlink.c: 255: }
  6760  00112E  D051               	goto	i2l5008
  6761  001130                     i2l4980:
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;LedBlink.c: 256: else if(B_State == OFF && B_Counter == B_OffTime)
  6765  001130  0E02               	movlw	2
  6766  001132  184B               	xorwf	_B_State,w,c
  6767  001134  104C               	iorwf	_B_State+1,w,c
  6768  001136  A4D8               	btfss	status,2,c
  6769  001138  D01A               	goto	i2l4990
  6770                           
  6771                           ; BSR set to: 0
  6772  00113A  51C6               	movf	_B_OffTime& (0+255),w,b
  6773  00113C  1811               	xorwf	_B_Counter,w,c
  6774  00113E  E117               	bnz	i2l4990
  6775  001140  51C7               	movf	(_B_OffTime+1)& (0+255),w,b
  6776  001142  1812               	xorwf	_B_Counter+1,w,c
  6777  001144  A4D8               	btfss	status,2,c
  6778  001146  D013               	goto	i2l4990
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;LedBlink.c: 257: {;LedBlink.c: 259: SetLed(B, ON);
  6782  001148  0E00               	movlw	0
  6783  00114A  6E32               	movwf	i2SetLed@ledIndex+1,c
  6784  00114C  0E02               	movlw	2
  6785  00114E  6E31               	movwf	i2SetLed@ledIndex,c
  6786  001150  0E00               	movlw	0
  6787  001152  6E34               	movwf	i2SetLed@Mode+1,c
  6788  001154  0E01               	movlw	1
  6789  001156  6E33               	movwf	i2SetLed@Mode,c
  6790  001158  ECAD  F00F         	call	i2_SetLed	;wreg free
  6791                           
  6792                           ;LedBlink.c: 260: B_Counter = 0;
  6793  00115C  0E00               	movlw	0
  6794  00115E  6E12               	movwf	_B_Counter+1,c
  6795  001160  0E00               	movlw	0
  6796  001162  6E11               	movwf	_B_Counter,c
  6797                           
  6798                           ;LedBlink.c: 261: B_State = ON;
  6799  001164  0E00               	movlw	0
  6800  001166  6E4C               	movwf	_B_State+1,c
  6801  001168  0E01               	movlw	1
  6802  00116A  6E4B               	movwf	_B_State,c
  6803                           
  6804                           ;LedBlink.c: 262: }
  6805  00116C  D032               	goto	i2l5008
  6806  00116E                     i2l4990:
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;LedBlink.c: 263: else if (B_State == ON && B_Counter == B_OnTime)
  6810  00116E  044B               	decf	_B_State,w,c
  6811  001170  104C               	iorwf	_B_State+1,w,c
  6812  001172  A4D8               	btfss	status,2,c
  6813  001174  D02E               	goto	i2l5008
  6814                           
  6815                           ; BSR set to: 0
  6816  001176  51C8               	movf	_B_OnTime& (0+255),w,b
  6817  001178  1811               	xorwf	_B_Counter,w,c
  6818  00117A  E12B               	bnz	i2l5008
  6819  00117C  51C9               	movf	(_B_OnTime+1)& (0+255),w,b
  6820  00117E  1812               	xorwf	_B_Counter+1,w,c
  6821  001180  A4D8               	btfss	status,2,c
  6822  001182  D027               	goto	i2l5008
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;LedBlink.c: 264: {;LedBlink.c: 266: SetLed(B, OFF);
  6826  001184  0E00               	movlw	0
  6827  001186  6E32               	movwf	i2SetLed@ledIndex+1,c
  6828  001188  0E02               	movlw	2
  6829  00118A  6E31               	movwf	i2SetLed@ledIndex,c
  6830  00118C  0E00               	movlw	0
  6831  00118E  6E34               	movwf	i2SetLed@Mode+1,c
  6832  001190  0E02               	movlw	2
  6833  001192  6E33               	movwf	i2SetLed@Mode,c
  6834  001194  ECAD  F00F         	call	i2_SetLed	;wreg free
  6835                           
  6836                           ;LedBlink.c: 267: B_Counter = 0;
  6837  001198  0E00               	movlw	0
  6838  00119A  6E12               	movwf	_B_Counter+1,c
  6839  00119C  0E00               	movlw	0
  6840  00119E  6E11               	movwf	_B_Counter,c
  6841                           
  6842                           ;LedBlink.c: 268: B_State = OFF;
  6843  0011A0  0E00               	movlw	0
  6844  0011A2  6E4C               	movwf	_B_State+1,c
  6845  0011A4  0E02               	movlw	2
  6846  0011A6  6E4B               	movwf	_B_State,c
  6847                           
  6848                           ;LedBlink.c: 269: if(B_BlinkCount != -1)
  6849  0011A8  280F               	incf	_B_BlinkCount,w,c
  6850  0011AA  E103               	bnz	i2u365_40
  6851  0011AC  2810               	incf	_B_BlinkCount+1,w,c
  6852  0011AE  B4D8               	btfsc	status,2,c
  6853  0011B0  D010               	goto	i2l5008
  6854  0011B2                     i2u365_40:
  6855                           
  6856                           ;LedBlink.c: 270: {;LedBlink.c: 271: if(--B_BlinkCounter == 0)
  6857  0011B2  0100               	movlb	0	; () banked
  6858  0011B4  07C0               	decf	_B_BlinkCounter& (0+255),f,b
  6859  0011B6  A0D8               	btfss	status,0,c
  6860  0011B8  07C1               	decf	(_B_BlinkCounter+1)& (0+255),f,b
  6861  0011BA  51C0               	movf	_B_BlinkCounter& (0+255),w,b
  6862  0011BC  11C1               	iorwf	(_B_BlinkCounter+1)& (0+255),w,b
  6863  0011BE  A4D8               	btfss	status,2,c
  6864  0011C0  D008               	goto	i2l5008
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;LedBlink.c: 272: {;LedBlink.c: 273: B_Enabled = OFF;
  6868  0011C2  0E00               	movlw	0
  6869  0011C4  6FC5               	movwf	(_B_Enabled+1)& (0+255),b
  6870  0011C6  0E02               	movlw	2
  6871  0011C8  6FC4               	movwf	_B_Enabled& (0+255),b
  6872                           
  6873                           ; BSR set to: 0
  6874  0011CA  D003               	goto	i2l5008
  6875  0011CC                     i2l5006:
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;LedBlink.c: 278: B_StartAfter--;
  6879  0011CC  07C2               	decf	_B_StartAfter& (0+255),f,b
  6880  0011CE  A0D8               	btfss	status,0,c
  6881  0011D0  07C3               	decf	(_B_StartAfter+1)& (0+255),f,b
  6882  0011D2                     i2l5008:
  6883                           
  6884                           ;LedBlink.c: 279: };LedBlink.c: 281: if(RGB_R_Enabled == ON) {
  6885  0011D2  0100               	movlb	0	; () banked
  6886  0011D4  05BA               	decf	_RGB_R_Enabled& (0+255),w,b
  6887  0011D6  11BB               	iorwf	(_RGB_R_Enabled+1)& (0+255),w,b
  6888  0011D8  A4D8               	btfss	status,2,c
  6889  0011DA  D06F               	goto	i2l5050
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;LedBlink.c: 282: if(RGB_R_StartAfter == 0)
  6893  0011DC  51B8               	movf	_RGB_R_StartAfter& (0+255),w,b
  6894  0011DE  11B9               	iorwf	(_RGB_R_StartAfter+1)& (0+255),w,b
  6895  0011E0  A4D8               	btfss	status,2,c
  6896  0011E2  D068               	goto	i2l5048
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;LedBlink.c: 283: {;LedBlink.c: 284: RGB_R_Counter++;
  6900  0011E4  4A0D               	infsnz	_RGB_R_Counter,f,c
  6901  0011E6  2A0E               	incf	_RGB_R_Counter+1,f,c
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;LedBlink.c: 285: if(RGB_R_State == UNIDENTIFIED)
  6905  0011E8  0E03               	movlw	3
  6906  0011EA  1849               	xorwf	_RGB_R_State,w,c
  6907  0011EC  104A               	iorwf	_RGB_R_State+1,w,c
  6908  0011EE  A4D8               	btfss	status,2,c
  6909  0011F0  D013               	goto	i2l5022
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;LedBlink.c: 286: {;LedBlink.c: 287: RGB_R_State = ON;
  6913  0011F2  0E00               	movlw	0
  6914  0011F4  6E4A               	movwf	_RGB_R_State+1,c
  6915  0011F6  0E01               	movlw	1
  6916  0011F8  6E49               	movwf	_RGB_R_State,c
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;LedBlink.c: 288: SetLed(RGB_R,ON);
  6920  0011FA  0E00               	movlw	0
  6921  0011FC  6E32               	movwf	i2SetLed@ledIndex+1,c
  6922  0011FE  0E03               	movlw	3
  6923  001200  6E31               	movwf	i2SetLed@ledIndex,c
  6924  001202  0E00               	movlw	0
  6925  001204  6E34               	movwf	i2SetLed@Mode+1,c
  6926  001206  0E01               	movlw	1
  6927  001208  6E33               	movwf	i2SetLed@Mode,c
  6928  00120A  ECAD  F00F         	call	i2_SetLed	;wreg free
  6929                           
  6930                           ;LedBlink.c: 289: RGB_R_Counter = 0;
  6931  00120E  0E00               	movlw	0
  6932  001210  6E0E               	movwf	_RGB_R_Counter+1,c
  6933  001212  0E00               	movlw	0
  6934  001214  6E0D               	movwf	_RGB_R_Counter,c
  6935                           
  6936                           ;LedBlink.c: 290: }
  6937  001216  D051               	goto	i2l5050
  6938  001218                     i2l5022:
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;LedBlink.c: 291: else if(RGB_R_State == OFF && RGB_R_Counter == RGB_R_OffTime)
  6942  001218  0E02               	movlw	2
  6943  00121A  1849               	xorwf	_RGB_R_State,w,c
  6944  00121C  104A               	iorwf	_RGB_R_State+1,w,c
  6945  00121E  A4D8               	btfss	status,2,c
  6946  001220  D01A               	goto	i2l5032
  6947                           
  6948                           ; BSR set to: 0
  6949  001222  51BC               	movf	_RGB_R_OffTime& (0+255),w,b
  6950  001224  180D               	xorwf	_RGB_R_Counter,w,c
  6951  001226  E117               	bnz	i2l5032
  6952  001228  51BD               	movf	(_RGB_R_OffTime+1)& (0+255),w,b
  6953  00122A  180E               	xorwf	_RGB_R_Counter+1,w,c
  6954  00122C  A4D8               	btfss	status,2,c
  6955  00122E  D013               	goto	i2l5032
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;LedBlink.c: 292: {;LedBlink.c: 294: SetLed(RGB_R, ON);
  6959  001230  0E00               	movlw	0
  6960  001232  6E32               	movwf	i2SetLed@ledIndex+1,c
  6961  001234  0E03               	movlw	3
  6962  001236  6E31               	movwf	i2SetLed@ledIndex,c
  6963  001238  0E00               	movlw	0
  6964  00123A  6E34               	movwf	i2SetLed@Mode+1,c
  6965  00123C  0E01               	movlw	1
  6966  00123E  6E33               	movwf	i2SetLed@Mode,c
  6967  001240  ECAD  F00F         	call	i2_SetLed	;wreg free
  6968                           
  6969                           ;LedBlink.c: 295: RGB_R_Counter = 0;
  6970  001244  0E00               	movlw	0
  6971  001246  6E0E               	movwf	_RGB_R_Counter+1,c
  6972  001248  0E00               	movlw	0
  6973  00124A  6E0D               	movwf	_RGB_R_Counter,c
  6974                           
  6975                           ;LedBlink.c: 296: RGB_R_State = ON;
  6976  00124C  0E00               	movlw	0
  6977  00124E  6E4A               	movwf	_RGB_R_State+1,c
  6978  001250  0E01               	movlw	1
  6979  001252  6E49               	movwf	_RGB_R_State,c
  6980                           
  6981                           ;LedBlink.c: 297: }
  6982  001254  D032               	goto	i2l5050
  6983  001256                     i2l5032:
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;LedBlink.c: 298: else if (RGB_R_State == ON && RGB_R_Counter == RGB_R_OnTime)
  6987  001256  0449               	decf	_RGB_R_State,w,c
  6988  001258  104A               	iorwf	_RGB_R_State+1,w,c
  6989  00125A  A4D8               	btfss	status,2,c
  6990  00125C  D02E               	goto	i2l5050
  6991                           
  6992                           ; BSR set to: 0
  6993  00125E  51BE               	movf	_RGB_R_OnTime& (0+255),w,b
  6994  001260  180D               	xorwf	_RGB_R_Counter,w,c
  6995  001262  E12B               	bnz	i2l5050
  6996  001264  51BF               	movf	(_RGB_R_OnTime+1)& (0+255),w,b
  6997  001266  180E               	xorwf	_RGB_R_Counter+1,w,c
  6998  001268  A4D8               	btfss	status,2,c
  6999  00126A  D027               	goto	i2l5050
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;LedBlink.c: 299: {;LedBlink.c: 301: SetLed(RGB_R, OFF);
  7003  00126C  0E00               	movlw	0
  7004  00126E  6E32               	movwf	i2SetLed@ledIndex+1,c
  7005  001270  0E03               	movlw	3
  7006  001272  6E31               	movwf	i2SetLed@ledIndex,c
  7007  001274  0E00               	movlw	0
  7008  001276  6E34               	movwf	i2SetLed@Mode+1,c
  7009  001278  0E02               	movlw	2
  7010  00127A  6E33               	movwf	i2SetLed@Mode,c
  7011  00127C  ECAD  F00F         	call	i2_SetLed	;wreg free
  7012                           
  7013                           ;LedBlink.c: 302: RGB_R_Counter = 0;
  7014  001280  0E00               	movlw	0
  7015  001282  6E0E               	movwf	_RGB_R_Counter+1,c
  7016  001284  0E00               	movlw	0
  7017  001286  6E0D               	movwf	_RGB_R_Counter,c
  7018                           
  7019                           ;LedBlink.c: 303: RGB_R_State = OFF;
  7020  001288  0E00               	movlw	0
  7021  00128A  6E4A               	movwf	_RGB_R_State+1,c
  7022  00128C  0E02               	movlw	2
  7023  00128E  6E49               	movwf	_RGB_R_State,c
  7024                           
  7025                           ;LedBlink.c: 304: if(RGB_R_BlinkCount != -1)
  7026  001290  280B               	incf	_RGB_R_BlinkCount,w,c
  7027  001292  E103               	bnz	i2u374_40
  7028  001294  280C               	incf	_RGB_R_BlinkCount+1,w,c
  7029  001296  B4D8               	btfsc	status,2,c
  7030  001298  D010               	goto	i2l5050
  7031  00129A                     i2u374_40:
  7032                           
  7033                           ;LedBlink.c: 305: {;LedBlink.c: 306: if(--RGB_R_BlinkCounter == 0)
  7034  00129A  0100               	movlb	0	; () banked
  7035  00129C  07B6               	decf	_RGB_R_BlinkCounter& (0+255),f,b
  7036  00129E  A0D8               	btfss	status,0,c
  7037  0012A0  07B7               	decf	(_RGB_R_BlinkCounter+1)& (0+255),f,b
  7038  0012A2  51B6               	movf	_RGB_R_BlinkCounter& (0+255),w,b
  7039  0012A4  11B7               	iorwf	(_RGB_R_BlinkCounter+1)& (0+255),w,b
  7040  0012A6  A4D8               	btfss	status,2,c
  7041  0012A8  D008               	goto	i2l5050
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;LedBlink.c: 307: {;LedBlink.c: 308: RGB_R_Enabled = OFF;
  7045  0012AA  0E00               	movlw	0
  7046  0012AC  6FBB               	movwf	(_RGB_R_Enabled+1)& (0+255),b
  7047  0012AE  0E02               	movlw	2
  7048  0012B0  6FBA               	movwf	_RGB_R_Enabled& (0+255),b
  7049                           
  7050                           ; BSR set to: 0
  7051  0012B2  D003               	goto	i2l5050
  7052  0012B4                     i2l5048:
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;LedBlink.c: 313: RGB_R_StartAfter--;
  7056  0012B4  07B8               	decf	_RGB_R_StartAfter& (0+255),f,b
  7057  0012B6  A0D8               	btfss	status,0,c
  7058  0012B8  07B9               	decf	(_RGB_R_StartAfter+1)& (0+255),f,b
  7059  0012BA                     i2l5050:
  7060                           
  7061                           ;LedBlink.c: 314: };LedBlink.c: 316: if(RGB_G_Enabled == ON) {
  7062  0012BA  0100               	movlb	0	; () banked
  7063  0012BC  05B0               	decf	_RGB_G_Enabled& (0+255),w,b
  7064  0012BE  11B1               	iorwf	(_RGB_G_Enabled+1)& (0+255),w,b
  7065  0012C0  A4D8               	btfss	status,2,c
  7066  0012C2  D06F               	goto	i2l5092
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;LedBlink.c: 317: if(RGB_G_StartAfter == 0)
  7070  0012C4  51AE               	movf	_RGB_G_StartAfter& (0+255),w,b
  7071  0012C6  11AF               	iorwf	(_RGB_G_StartAfter+1)& (0+255),w,b
  7072  0012C8  A4D8               	btfss	status,2,c
  7073  0012CA  D068               	goto	i2l5090
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;LedBlink.c: 318: {;LedBlink.c: 319: RGB_G_Counter++;
  7077  0012CC  4A09               	infsnz	_RGB_G_Counter,f,c
  7078  0012CE  2A0A               	incf	_RGB_G_Counter+1,f,c
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;LedBlink.c: 320: if(RGB_G_State == UNIDENTIFIED)
  7082  0012D0  0E03               	movlw	3
  7083  0012D2  1847               	xorwf	_RGB_G_State,w,c
  7084  0012D4  1048               	iorwf	_RGB_G_State+1,w,c
  7085  0012D6  A4D8               	btfss	status,2,c
  7086  0012D8  D013               	goto	i2l5064
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;LedBlink.c: 321: {;LedBlink.c: 322: RGB_G_State = ON;
  7090  0012DA  0E00               	movlw	0
  7091  0012DC  6E48               	movwf	_RGB_G_State+1,c
  7092  0012DE  0E01               	movlw	1
  7093  0012E0  6E47               	movwf	_RGB_G_State,c
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;LedBlink.c: 323: SetLed(RGB_G,ON);
  7097  0012E2  0E00               	movlw	0
  7098  0012E4  6E32               	movwf	i2SetLed@ledIndex+1,c
  7099  0012E6  0E04               	movlw	4
  7100  0012E8  6E31               	movwf	i2SetLed@ledIndex,c
  7101  0012EA  0E00               	movlw	0
  7102  0012EC  6E34               	movwf	i2SetLed@Mode+1,c
  7103  0012EE  0E01               	movlw	1
  7104  0012F0  6E33               	movwf	i2SetLed@Mode,c
  7105  0012F2  ECAD  F00F         	call	i2_SetLed	;wreg free
  7106                           
  7107                           ;LedBlink.c: 324: RGB_G_Counter = 0;
  7108  0012F6  0E00               	movlw	0
  7109  0012F8  6E0A               	movwf	_RGB_G_Counter+1,c
  7110  0012FA  0E00               	movlw	0
  7111  0012FC  6E09               	movwf	_RGB_G_Counter,c
  7112                           
  7113                           ;LedBlink.c: 325: }
  7114  0012FE  D051               	goto	i2l5092
  7115  001300                     i2l5064:
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;LedBlink.c: 326: else if(RGB_G_State == OFF && RGB_G_Counter == RGB_G_OffTime)
  7119  001300  0E02               	movlw	2
  7120  001302  1847               	xorwf	_RGB_G_State,w,c
  7121  001304  1048               	iorwf	_RGB_G_State+1,w,c
  7122  001306  A4D8               	btfss	status,2,c
  7123  001308  D01A               	goto	i2l5074
  7124                           
  7125                           ; BSR set to: 0
  7126  00130A  51B2               	movf	_RGB_G_OffTime& (0+255),w,b
  7127  00130C  1809               	xorwf	_RGB_G_Counter,w,c
  7128  00130E  E117               	bnz	i2l5074
  7129  001310  51B3               	movf	(_RGB_G_OffTime+1)& (0+255),w,b
  7130  001312  180A               	xorwf	_RGB_G_Counter+1,w,c
  7131  001314  A4D8               	btfss	status,2,c
  7132  001316  D013               	goto	i2l5074
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;LedBlink.c: 327: {;LedBlink.c: 329: SetLed(RGB_G, ON);
  7136  001318  0E00               	movlw	0
  7137  00131A  6E32               	movwf	i2SetLed@ledIndex+1,c
  7138  00131C  0E04               	movlw	4
  7139  00131E  6E31               	movwf	i2SetLed@ledIndex,c
  7140  001320  0E00               	movlw	0
  7141  001322  6E34               	movwf	i2SetLed@Mode+1,c
  7142  001324  0E01               	movlw	1
  7143  001326  6E33               	movwf	i2SetLed@Mode,c
  7144  001328  ECAD  F00F         	call	i2_SetLed	;wreg free
  7145                           
  7146                           ;LedBlink.c: 330: RGB_G_Counter = 0;
  7147  00132C  0E00               	movlw	0
  7148  00132E  6E0A               	movwf	_RGB_G_Counter+1,c
  7149  001330  0E00               	movlw	0
  7150  001332  6E09               	movwf	_RGB_G_Counter,c
  7151                           
  7152                           ;LedBlink.c: 331: RGB_G_State = ON;
  7153  001334  0E00               	movlw	0
  7154  001336  6E48               	movwf	_RGB_G_State+1,c
  7155  001338  0E01               	movlw	1
  7156  00133A  6E47               	movwf	_RGB_G_State,c
  7157                           
  7158                           ;LedBlink.c: 332: }
  7159  00133C  D032               	goto	i2l5092
  7160  00133E                     i2l5074:
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;LedBlink.c: 333: else if (RGB_G_State == ON && RGB_G_Counter == RGB_G_OnTime)
  7164  00133E  0447               	decf	_RGB_G_State,w,c
  7165  001340  1048               	iorwf	_RGB_G_State+1,w,c
  7166  001342  A4D8               	btfss	status,2,c
  7167  001344  D02E               	goto	i2l5092
  7168                           
  7169                           ; BSR set to: 0
  7170  001346  51B4               	movf	_RGB_G_OnTime& (0+255),w,b
  7171  001348  1809               	xorwf	_RGB_G_Counter,w,c
  7172  00134A  E12B               	bnz	i2l5092
  7173  00134C  51B5               	movf	(_RGB_G_OnTime+1)& (0+255),w,b
  7174  00134E  180A               	xorwf	_RGB_G_Counter+1,w,c
  7175  001350  A4D8               	btfss	status,2,c
  7176  001352  D027               	goto	i2l5092
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;LedBlink.c: 334: {;LedBlink.c: 336: SetLed(RGB_G, OFF);
  7180  001354  0E00               	movlw	0
  7181  001356  6E32               	movwf	i2SetLed@ledIndex+1,c
  7182  001358  0E04               	movlw	4
  7183  00135A  6E31               	movwf	i2SetLed@ledIndex,c
  7184  00135C  0E00               	movlw	0
  7185  00135E  6E34               	movwf	i2SetLed@Mode+1,c
  7186  001360  0E02               	movlw	2
  7187  001362  6E33               	movwf	i2SetLed@Mode,c
  7188  001364  ECAD  F00F         	call	i2_SetLed	;wreg free
  7189                           
  7190                           ;LedBlink.c: 337: RGB_G_Counter = 0;
  7191  001368  0E00               	movlw	0
  7192  00136A  6E0A               	movwf	_RGB_G_Counter+1,c
  7193  00136C  0E00               	movlw	0
  7194  00136E  6E09               	movwf	_RGB_G_Counter,c
  7195                           
  7196                           ;LedBlink.c: 338: RGB_G_State = OFF;
  7197  001370  0E00               	movlw	0
  7198  001372  6E48               	movwf	_RGB_G_State+1,c
  7199  001374  0E02               	movlw	2
  7200  001376  6E47               	movwf	_RGB_G_State,c
  7201                           
  7202                           ;LedBlink.c: 339: if(RGB_G_BlinkCount != -1)
  7203  001378  2807               	incf	_RGB_G_BlinkCount,w,c
  7204  00137A  E103               	bnz	i2u383_40
  7205  00137C  2808               	incf	_RGB_G_BlinkCount+1,w,c
  7206  00137E  B4D8               	btfsc	status,2,c
  7207  001380  D010               	goto	i2l5092
  7208  001382                     i2u383_40:
  7209                           
  7210                           ;LedBlink.c: 340: {;LedBlink.c: 341: if(--RGB_G_BlinkCounter == 0)
  7211  001382  0100               	movlb	0	; () banked
  7212  001384  07AC               	decf	_RGB_G_BlinkCounter& (0+255),f,b
  7213  001386  A0D8               	btfss	status,0,c
  7214  001388  07AD               	decf	(_RGB_G_BlinkCounter+1)& (0+255),f,b
  7215  00138A  51AC               	movf	_RGB_G_BlinkCounter& (0+255),w,b
  7216  00138C  11AD               	iorwf	(_RGB_G_BlinkCounter+1)& (0+255),w,b
  7217  00138E  A4D8               	btfss	status,2,c
  7218  001390  D008               	goto	i2l5092
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;LedBlink.c: 342: {;LedBlink.c: 343: RGB_G_Enabled = OFF;
  7222  001392  0E00               	movlw	0
  7223  001394  6FB1               	movwf	(_RGB_G_Enabled+1)& (0+255),b
  7224  001396  0E02               	movlw	2
  7225  001398  6FB0               	movwf	_RGB_G_Enabled& (0+255),b
  7226                           
  7227                           ; BSR set to: 0
  7228  00139A  D003               	goto	i2l5092
  7229  00139C                     i2l5090:
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;LedBlink.c: 348: RGB_G_StartAfter--;
  7233  00139C  07AE               	decf	_RGB_G_StartAfter& (0+255),f,b
  7234  00139E  A0D8               	btfss	status,0,c
  7235  0013A0  07AF               	decf	(_RGB_G_StartAfter+1)& (0+255),f,b
  7236  0013A2                     i2l5092:
  7237                           
  7238                           ;LedBlink.c: 349: };LedBlink.c: 351: if(RGB_B_Enabled == ON) {
  7239  0013A2  0100               	movlb	0	; () banked
  7240  0013A4  05A6               	decf	_RGB_B_Enabled& (0+255),w,b
  7241  0013A6  11A7               	iorwf	(_RGB_B_Enabled+1)& (0+255),w,b
  7242  0013A8  A4D8               	btfss	status,2,c
  7243  0013AA  0012               	return	
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;LedBlink.c: 352: if(RGB_B_StartAfter == 0)
  7247  0013AC  51A4               	movf	_RGB_B_StartAfter& (0+255),w,b
  7248  0013AE  11A5               	iorwf	(_RGB_B_StartAfter+1)& (0+255),w,b
  7249  0013B0  A4D8               	btfss	status,2,c
  7250  0013B2  D068               	goto	i2l5132
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;LedBlink.c: 353: {;LedBlink.c: 354: RGB_B_Counter++;
  7254  0013B4  4A05               	infsnz	_RGB_B_Counter,f,c
  7255  0013B6  2A06               	incf	_RGB_B_Counter+1,f,c
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;LedBlink.c: 355: if(RGB_B_State == UNIDENTIFIED)
  7259  0013B8  0E03               	movlw	3
  7260  0013BA  1845               	xorwf	_RGB_B_State,w,c
  7261  0013BC  1046               	iorwf	_RGB_B_State+1,w,c
  7262  0013BE  A4D8               	btfss	status,2,c
  7263  0013C0  D013               	goto	i2l5106
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;LedBlink.c: 356: {;LedBlink.c: 357: RGB_B_State = ON;
  7267  0013C2  0E00               	movlw	0
  7268  0013C4  6E46               	movwf	_RGB_B_State+1,c
  7269  0013C6  0E01               	movlw	1
  7270  0013C8  6E45               	movwf	_RGB_B_State,c
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;LedBlink.c: 358: SetLed(RGB_B,ON);
  7274  0013CA  0E00               	movlw	0
  7275  0013CC  6E32               	movwf	i2SetLed@ledIndex+1,c
  7276  0013CE  0E05               	movlw	5
  7277  0013D0  6E31               	movwf	i2SetLed@ledIndex,c
  7278  0013D2  0E00               	movlw	0
  7279  0013D4  6E34               	movwf	i2SetLed@Mode+1,c
  7280  0013D6  0E01               	movlw	1
  7281  0013D8  6E33               	movwf	i2SetLed@Mode,c
  7282  0013DA  ECAD  F00F         	call	i2_SetLed	;wreg free
  7283                           
  7284                           ;LedBlink.c: 359: RGB_B_Counter = 0;
  7285  0013DE  0E00               	movlw	0
  7286  0013E0  6E06               	movwf	_RGB_B_Counter+1,c
  7287  0013E2  0E00               	movlw	0
  7288  0013E4  6E05               	movwf	_RGB_B_Counter,c
  7289                           
  7290                           ;LedBlink.c: 360: }
  7291  0013E6  0012               	return	
  7292  0013E8                     i2l5106:
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;LedBlink.c: 361: else if(RGB_B_State == OFF && RGB_B_Counter == RGB_B_OffTime)
  7296  0013E8  0E02               	movlw	2
  7297  0013EA  1845               	xorwf	_RGB_B_State,w,c
  7298  0013EC  1046               	iorwf	_RGB_B_State+1,w,c
  7299  0013EE  A4D8               	btfss	status,2,c
  7300  0013F0  D01A               	goto	i2l5116
  7301                           
  7302                           ; BSR set to: 0
  7303  0013F2  51A8               	movf	_RGB_B_OffTime& (0+255),w,b
  7304  0013F4  1805               	xorwf	_RGB_B_Counter,w,c
  7305  0013F6  E117               	bnz	i2l5116
  7306  0013F8  51A9               	movf	(_RGB_B_OffTime+1)& (0+255),w,b
  7307  0013FA  1806               	xorwf	_RGB_B_Counter+1,w,c
  7308  0013FC  A4D8               	btfss	status,2,c
  7309  0013FE  D013               	goto	i2l5116
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;LedBlink.c: 362: {;LedBlink.c: 364: SetLed(RGB_B, ON);
  7313  001400  0E00               	movlw	0
  7314  001402  6E32               	movwf	i2SetLed@ledIndex+1,c
  7315  001404  0E05               	movlw	5
  7316  001406  6E31               	movwf	i2SetLed@ledIndex,c
  7317  001408  0E00               	movlw	0
  7318  00140A  6E34               	movwf	i2SetLed@Mode+1,c
  7319  00140C  0E01               	movlw	1
  7320  00140E  6E33               	movwf	i2SetLed@Mode,c
  7321  001410  ECAD  F00F         	call	i2_SetLed	;wreg free
  7322                           
  7323                           ;LedBlink.c: 365: RGB_B_Counter = 0;
  7324  001414  0E00               	movlw	0
  7325  001416  6E06               	movwf	_RGB_B_Counter+1,c
  7326  001418  0E00               	movlw	0
  7327  00141A  6E05               	movwf	_RGB_B_Counter,c
  7328                           
  7329                           ;LedBlink.c: 366: RGB_B_State = ON;
  7330  00141C  0E00               	movlw	0
  7331  00141E  6E46               	movwf	_RGB_B_State+1,c
  7332  001420  0E01               	movlw	1
  7333  001422  6E45               	movwf	_RGB_B_State,c
  7334                           
  7335                           ;LedBlink.c: 367: }
  7336  001424  0012               	return	
  7337  001426                     i2l5116:
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;LedBlink.c: 368: else if (RGB_B_State == ON && RGB_B_Counter == RGB_B_OnTime)
  7341  001426  0445               	decf	_RGB_B_State,w,c
  7342  001428  1046               	iorwf	_RGB_B_State+1,w,c
  7343  00142A  A4D8               	btfss	status,2,c
  7344  00142C  0012               	return	
  7345                           
  7346                           ; BSR set to: 0
  7347  00142E  51AA               	movf	_RGB_B_OnTime& (0+255),w,b
  7348  001430  1805               	xorwf	_RGB_B_Counter,w,c
  7349  001432  E12B               	bnz	i2l1574
  7350  001434  51AB               	movf	(_RGB_B_OnTime+1)& (0+255),w,b
  7351  001436  1806               	xorwf	_RGB_B_Counter+1,w,c
  7352  001438  A4D8               	btfss	status,2,c
  7353  00143A  0012               	return	
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;LedBlink.c: 369: {;LedBlink.c: 371: SetLed(RGB_B, OFF);
  7357  00143C  0E00               	movlw	0
  7358  00143E  6E32               	movwf	i2SetLed@ledIndex+1,c
  7359  001440  0E05               	movlw	5
  7360  001442  6E31               	movwf	i2SetLed@ledIndex,c
  7361  001444  0E00               	movlw	0
  7362  001446  6E34               	movwf	i2SetLed@Mode+1,c
  7363  001448  0E02               	movlw	2
  7364  00144A  6E33               	movwf	i2SetLed@Mode,c
  7365  00144C  ECAD  F00F         	call	i2_SetLed	;wreg free
  7366                           
  7367                           ;LedBlink.c: 372: RGB_B_Counter = 0;
  7368  001450  0E00               	movlw	0
  7369  001452  6E06               	movwf	_RGB_B_Counter+1,c
  7370  001454  0E00               	movlw	0
  7371  001456  6E05               	movwf	_RGB_B_Counter,c
  7372                           
  7373                           ;LedBlink.c: 373: RGB_B_State = OFF;
  7374  001458  0E00               	movlw	0
  7375  00145A  6E46               	movwf	_RGB_B_State+1,c
  7376  00145C  0E02               	movlw	2
  7377  00145E  6E45               	movwf	_RGB_B_State,c
  7378                           
  7379                           ;LedBlink.c: 374: if(RGB_B_BlinkCount != -1)
  7380  001460  2803               	incf	_RGB_B_BlinkCount,w,c
  7381  001462  E103               	bnz	i2u392_40
  7382  001464  2804               	incf	_RGB_B_BlinkCount+1,w,c
  7383  001466  B4D8               	btfsc	status,2,c
  7384  001468  0012               	return	
  7385  00146A                     i2u392_40:
  7386                           
  7387                           ;LedBlink.c: 375: {;LedBlink.c: 376: if(--RGB_B_BlinkCounter == 0)
  7388  00146A  0100               	movlb	0	; () banked
  7389  00146C  07A2               	decf	_RGB_B_BlinkCounter& (0+255),f,b
  7390  00146E  A0D8               	btfss	status,0,c
  7391  001470  07A3               	decf	(_RGB_B_BlinkCounter+1)& (0+255),f,b
  7392  001472  51A2               	movf	_RGB_B_BlinkCounter& (0+255),w,b
  7393  001474  11A3               	iorwf	(_RGB_B_BlinkCounter+1)& (0+255),w,b
  7394  001476  A4D8               	btfss	status,2,c
  7395  001478  0012               	return	
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;LedBlink.c: 377: {;LedBlink.c: 378: RGB_B_Enabled = OFF;
  7399  00147A  0E00               	movlw	0
  7400  00147C  6FA7               	movwf	(_RGB_B_Enabled+1)& (0+255),b
  7401  00147E  0E02               	movlw	2
  7402  001480  6FA6               	movwf	_RGB_B_Enabled& (0+255),b
  7403                           
  7404                           ; BSR set to: 0
  7405  001482  0012               	return	
  7406  001484                     i2l5132:
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;LedBlink.c: 383: RGB_B_StartAfter--;
  7410  001484  07A4               	decf	_RGB_B_StartAfter& (0+255),f,b
  7411  001486  A0D8               	btfss	status,0,c
  7412  001488  07A5               	decf	(_RGB_B_StartAfter+1)& (0+255),f,b
  7413  00148A                     i2l1574:
  7414  00148A  0012               	return		;funcret
  7415  00148C                     __end_of_TMR2_Custom_ISR:
  7416                           	opt callstack 0
  7417                           
  7418 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  7419 ;; Defined at:
  7420 ;;		line 190 in file "mcc_generated_files/tmr2.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;		None
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;		None
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      void 
  7427 ;; Registers used:
  7428 ;;		None
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7438 ;;Total ram usage:        0 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; This function calls:
  7441 ;;		Nothing
  7442 ;; This function is called by:
  7443 ;;		_TMR2_Initialize
  7444 ;;		_TMR2_CallBack
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           	psect	text63
  7449  002B5C                     __ptext63:
  7450                           	opt callstack 0
  7451  002B5C                     _TMR2_DefaultInterruptHandler:
  7452                           	opt callstack 21
  7453                           
  7454                           ;incstack = 0
  7455  002B5C  0012               	return		;funcret
  7456  002B5E                     __end_of_TMR2_DefaultInterruptHandler:
  7457                           	opt callstack 0
  7458                           
  7459 ;; *************** function i2_SetLed *****************
  7460 ;; Defined at:
  7461 ;;		line 11 in file "LedBlink.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;  ledIndex        2    0[COMRAM] int 
  7464 ;;  Mode            2    2[COMRAM] int 
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  SetLed          2    4[COMRAM] int 
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      void 
  7469 ;; Registers used:
  7470 ;;		wreg, status,2, status,0
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7476 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7477 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7479 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7480 ;;Total ram usage:        6 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; This function calls:
  7483 ;;		Nothing
  7484 ;; This function is called by:
  7485 ;;		_TMR2_Custom_ISR
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           	psect	text64
  7490  001F5A                     __ptext64:
  7491                           	opt callstack 0
  7492  001F5A                     i2_SetLed:
  7493                           	opt callstack 20
  7494                           
  7495                           ;LedBlink.c: 12: int mode2 = 1;
  7496                           
  7497                           ;incstack = 0
  7498  001F5A  0E00               	movlw	0
  7499  001F5C  6E36               	movwf	i2SetLed@mode2+1,c
  7500  001F5E  0E01               	movlw	1
  7501  001F60  6E35               	movwf	i2SetLed@mode2,c
  7502                           
  7503                           ;LedBlink.c: 13: if(Mode == ON)
  7504  001F62  0433               	decf	i2SetLed@Mode,w,c
  7505  001F64  1034               	iorwf	i2SetLed@Mode+1,w,c
  7506  001F66  A4D8               	btfss	status,2,c
  7507  001F68  D004               	goto	i2l4802
  7508                           
  7509                           ;LedBlink.c: 14: mode2 = 0;
  7510  001F6A  0E00               	movlw	0
  7511  001F6C  6E36               	movwf	i2SetLed@mode2+1,c
  7512  001F6E  0E00               	movlw	0
  7513  001F70  6E35               	movwf	i2SetLed@mode2,c
  7514  001F72                     i2l4802:
  7515                           
  7516                           ;LedBlink.c: 16: if (ledIndex == R) {
  7517  001F72  5031               	movf	i2SetLed@ledIndex,w,c
  7518  001F74  1032               	iorwf	i2SetLed@ledIndex+1,w,c
  7519  001F76  A4D8               	btfss	status,2,c
  7520  001F78  D006               	goto	i2l4806
  7521                           
  7522                           ;LedBlink.c: 17: LATDbits.LATD5 = mode2;
  7523  001F7A  B035               	btfsc	i2SetLed@mode2,0,c
  7524  001F7C  D002               	bra	i2u327_45
  7525  001F7E  9A86               	bcf	3974,5,c	;volatile
  7526  001F80  D001               	bra	i2u327_46
  7527  001F82                     i2u327_45:
  7528  001F82  8A86               	bsf	3974,5,c	;volatile
  7529  001F84                     i2u327_46:
  7530                           
  7531                           ;LedBlink.c: 18: } else if (ledIndex == G) {
  7532  001F84  0012               	return	
  7533  001F86                     i2l4806:
  7534  001F86  0431               	decf	i2SetLed@ledIndex,w,c
  7535  001F88  1032               	iorwf	i2SetLed@ledIndex+1,w,c
  7536  001F8A  A4D8               	btfss	status,2,c
  7537  001F8C  D006               	goto	i2l4810
  7538                           
  7539                           ;LedBlink.c: 19: LATDbits.LATD6 = mode2;
  7540  001F8E  B035               	btfsc	i2SetLed@mode2,0,c
  7541  001F90  D002               	bra	i2u329_45
  7542  001F92  9C86               	bcf	3974,6,c	;volatile
  7543  001F94  D001               	bra	i2u329_46
  7544  001F96                     i2u329_45:
  7545  001F96  8C86               	bsf	3974,6,c	;volatile
  7546  001F98                     i2u329_46:
  7547                           
  7548                           ;LedBlink.c: 20: } else if (ledIndex == B) {
  7549  001F98  0012               	return	
  7550  001F9A                     i2l4810:
  7551  001F9A  0E02               	movlw	2
  7552  001F9C  1831               	xorwf	i2SetLed@ledIndex,w,c
  7553  001F9E  1032               	iorwf	i2SetLed@ledIndex+1,w,c
  7554  001FA0  A4D8               	btfss	status,2,c
  7555  001FA2  D006               	goto	i2l4814
  7556                           
  7557                           ;LedBlink.c: 21: LATDbits.LATD7 = mode2;
  7558  001FA4  B035               	btfsc	i2SetLed@mode2,0,c
  7559  001FA6  D002               	bra	i2u331_45
  7560  001FA8  9E86               	bcf	3974,7,c	;volatile
  7561  001FAA  D001               	bra	i2u331_46
  7562  001FAC                     i2u331_45:
  7563  001FAC  8E86               	bsf	3974,7,c	;volatile
  7564  001FAE                     i2u331_46:
  7565                           
  7566                           ;LedBlink.c: 22: } else if (ledIndex == RGB_R) {
  7567  001FAE  0012               	return	
  7568  001FB0                     i2l4814:
  7569  001FB0  0E03               	movlw	3
  7570  001FB2  1831               	xorwf	i2SetLed@ledIndex,w,c
  7571  001FB4  1032               	iorwf	i2SetLed@ledIndex+1,w,c
  7572  001FB6  A4D8               	btfss	status,2,c
  7573  001FB8  D006               	goto	i2l4818
  7574                           
  7575                           ;LedBlink.c: 23: LATEbits.LATE2 = mode2;
  7576  001FBA  B035               	btfsc	i2SetLed@mode2,0,c
  7577  001FBC  D002               	bra	i2u333_45
  7578  001FBE  9487               	bcf	3975,2,c	;volatile
  7579  001FC0  D001               	bra	i2u333_46
  7580  001FC2                     i2u333_45:
  7581  001FC2  8487               	bsf	3975,2,c	;volatile
  7582  001FC4                     i2u333_46:
  7583                           
  7584                           ;LedBlink.c: 24: } else if (ledIndex == RGB_G) {
  7585  001FC4  0012               	return	
  7586  001FC6                     i2l4818:
  7587  001FC6  0E04               	movlw	4
  7588  001FC8  1831               	xorwf	i2SetLed@ledIndex,w,c
  7589  001FCA  1032               	iorwf	i2SetLed@ledIndex+1,w,c
  7590  001FCC  A4D8               	btfss	status,2,c
  7591  001FCE  D006               	goto	i2l4822
  7592                           
  7593                           ;LedBlink.c: 25: LATEbits.LATE1 = mode2;
  7594  001FD0  B035               	btfsc	i2SetLed@mode2,0,c
  7595  001FD2  D002               	bra	i2u335_45
  7596  001FD4  9287               	bcf	3975,1,c	;volatile
  7597  001FD6  D001               	bra	i2u335_46
  7598  001FD8                     i2u335_45:
  7599  001FD8  8287               	bsf	3975,1,c	;volatile
  7600  001FDA                     i2u335_46:
  7601                           
  7602                           ;LedBlink.c: 26: } else if (ledIndex == RGB_B) {
  7603  001FDA  0012               	return	
  7604  001FDC                     i2l4822:
  7605  001FDC  0E05               	movlw	5
  7606  001FDE  1831               	xorwf	i2SetLed@ledIndex,w,c
  7607  001FE0  1032               	iorwf	i2SetLed@ledIndex+1,w,c
  7608  001FE2  A4D8               	btfss	status,2,c
  7609  001FE4  0012               	return	
  7610                           
  7611                           ;LedBlink.c: 27: LATEbits.LATE0 = mode2;
  7612  001FE6  B035               	btfsc	i2SetLed@mode2,0,c
  7613  001FE8  D002               	bra	i2u337_45
  7614  001FEA  9087               	bcf	3975,0,c	;volatile
  7615  001FEC  D001               	bra	i2u337_46
  7616  001FEE                     i2u337_45:
  7617  001FEE  8087               	bsf	3975,0,c	;volatile
  7618  001FF0                     i2u337_46:
  7619  001FF0  0012               	return	
  7620  001FF2                     __end_ofi2_SetLed:
  7621                           	opt callstack 0
  7622                           
  7623 ;; *************** function _PIN_MANAGER_IOC *****************
  7624 ;; Defined at:
  7625 ;;		line 217 in file "mcc_generated_files/pin_manager.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;		None
  7630 ;; Return value:  Size  Location     Type
  7631 ;;                  1    wreg      void 
  7632 ;; Registers used:
  7633 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7643 ;;Total ram usage:        0 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; Hardware stack levels required when called:    2
  7646 ;; This function calls:
  7647 ;;		_IOCAF0_ISR
  7648 ;;		_IOCAF1_ISR
  7649 ;;		_IOCAF3_ISR
  7650 ;;		_IOCAF4_ISR
  7651 ;;		_IOCBF5_ISR
  7652 ;;		_IOCCF3_ISR
  7653 ;;		_IOCCF4_ISR
  7654 ;;		_IOCCF5_ISR
  7655 ;;		_IOCCF6_ISR
  7656 ;;		_IOCCF7_ISR
  7657 ;; This function is called by:
  7658 ;;		_INTERRUPT_InterruptManager
  7659 ;; This function uses a non-reentrant model
  7660 ;;
  7661                           
  7662                           	psect	text65
  7663  00228E                     __ptext65:
  7664                           	opt callstack 0
  7665  00228E                     _PIN_MANAGER_IOC:
  7666                           	opt callstack 21
  7667                           
  7668                           ;pin_manager.c: 220: if(IOCAFbits.IOCAF0 == 1)
  7669                           
  7670                           ;incstack = 0
  7671  00228E  010F               	movlb	15	; () banked
  7672  002290  B10A               	btfsc	10,0,b	;volatile
  7673                           
  7674                           ; BSR set to: 15
  7675                           ;pin_manager.c: 221: {;pin_manager.c: 222: IOCAF0_ISR();
  7676  002292  ECA8  F013         	call	_IOCAF0_ISR	;wreg free
  7677                           
  7678                           ;pin_manager.c: 223: };pin_manager.c: 225: if(IOCAFbits.IOCAF1 == 1)
  7679  002296  010F               	movlb	15	; () banked
  7680  002298  B30A               	btfsc	10,1,b	;volatile
  7681                           
  7682                           ; BSR set to: 15
  7683                           ;pin_manager.c: 226: {;pin_manager.c: 227: IOCAF1_ISR();
  7684  00229A  EC95  F013         	call	_IOCAF1_ISR	;wreg free
  7685                           
  7686                           ;pin_manager.c: 228: };pin_manager.c: 230: if(IOCAFbits.IOCAF3 == 1)
  7687  00229E  010F               	movlb	15	; () banked
  7688  0022A0  B70A               	btfsc	10,3,b	;volatile
  7689                           
  7690                           ; BSR set to: 15
  7691                           ;pin_manager.c: 231: {;pin_manager.c: 232: IOCAF3_ISR();
  7692  0022A2  EC82  F013         	call	_IOCAF3_ISR	;wreg free
  7693                           
  7694                           ;pin_manager.c: 233: };pin_manager.c: 235: if(IOCAFbits.IOCAF4 == 1)
  7695  0022A6  010F               	movlb	15	; () banked
  7696  0022A8  B90A               	btfsc	10,4,b	;volatile
  7697                           
  7698                           ; BSR set to: 15
  7699                           ;pin_manager.c: 236: {;pin_manager.c: 237: IOCAF4_ISR();
  7700  0022AA  EC6F  F013         	call	_IOCAF4_ISR	;wreg free
  7701                           
  7702                           ;pin_manager.c: 238: };pin_manager.c: 240: if(IOCBFbits.IOCBF5 == 1)
  7703  0022AE  010F               	movlb	15	; () banked
  7704  0022B0  BB12               	btfsc	18,5,b	;volatile
  7705                           
  7706                           ; BSR set to: 15
  7707                           ;pin_manager.c: 241: {;pin_manager.c: 242: IOCBF5_ISR();
  7708  0022B2  EC5C  F013         	call	_IOCBF5_ISR	;wreg free
  7709                           
  7710                           ;pin_manager.c: 243: };pin_manager.c: 245: if(IOCCFbits.IOCCF3 == 1)
  7711  0022B6  010F               	movlb	15	; () banked
  7712  0022B8  B71A               	btfsc	26,3,b	;volatile
  7713                           
  7714                           ; BSR set to: 15
  7715                           ;pin_manager.c: 246: {;pin_manager.c: 247: IOCCF3_ISR();
  7716  0022BA  EC49  F013         	call	_IOCCF3_ISR	;wreg free
  7717                           
  7718                           ;pin_manager.c: 248: };pin_manager.c: 250: if(IOCCFbits.IOCCF4 == 1)
  7719  0022BE  010F               	movlb	15	; () banked
  7720  0022C0  B91A               	btfsc	26,4,b	;volatile
  7721                           
  7722                           ; BSR set to: 15
  7723                           ;pin_manager.c: 251: {;pin_manager.c: 252: IOCCF4_ISR();
  7724  0022C2  EC36  F013         	call	_IOCCF4_ISR	;wreg free
  7725                           
  7726                           ;pin_manager.c: 253: };pin_manager.c: 255: if(IOCCFbits.IOCCF5 == 1)
  7727  0022C6  010F               	movlb	15	; () banked
  7728  0022C8  BB1A               	btfsc	26,5,b	;volatile
  7729                           
  7730                           ; BSR set to: 15
  7731                           ;pin_manager.c: 256: {;pin_manager.c: 257: IOCCF5_ISR();
  7732  0022CA  EC23  F013         	call	_IOCCF5_ISR	;wreg free
  7733                           
  7734                           ;pin_manager.c: 258: };pin_manager.c: 260: if(IOCCFbits.IOCCF6 == 1)
  7735  0022CE  010F               	movlb	15	; () banked
  7736  0022D0  BD1A               	btfsc	26,6,b	;volatile
  7737                           
  7738                           ; BSR set to: 15
  7739                           ;pin_manager.c: 261: {;pin_manager.c: 262: IOCCF6_ISR();
  7740  0022D2  EC10  F013         	call	_IOCCF6_ISR	;wreg free
  7741                           
  7742                           ;pin_manager.c: 263: };pin_manager.c: 265: if(IOCCFbits.IOCCF7 == 1)
  7743  0022D6  010F               	movlb	15	; () banked
  7744  0022D8  AF1A               	btfss	26,7,b	;volatile
  7745  0022DA  0012               	return	
  7746                           
  7747                           ; BSR set to: 15
  7748                           ;pin_manager.c: 266: {;pin_manager.c: 267: IOCCF7_ISR();
  7749  0022DC  ECFD  F012         	call	_IOCCF7_ISR	;wreg free
  7750  0022E0  0012               	return		;funcret
  7751  0022E2                     __end_of_PIN_MANAGER_IOC:
  7752                           	opt callstack 0
  7753                           
  7754 ;; *************** function _IOCCF7_ISR *****************
  7755 ;; Defined at:
  7756 ;;		line 544 in file "mcc_generated_files/pin_manager.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;		None
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;		None
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  1    wreg      void 
  7763 ;; Registers used:
  7764 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7774 ;;Total ram usage:        0 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    1
  7777 ;; This function calls:
  7778 ;;		Absolute function
  7779 ;;		_IOCCF7_DefaultInterruptHandler
  7780 ;; This function is called by:
  7781 ;;		_PIN_MANAGER_IOC
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           	psect	text66
  7786  0025FA                     __ptext66:
  7787                           	opt callstack 0
  7788  0025FA                     _IOCCF7_ISR:
  7789                           	opt callstack 21
  7790                           
  7791                           ;pin_manager.c: 549: if(IOCCF7_InterruptHandler)
  7792                           
  7793                           ;incstack = 0
  7794  0025FA  0100               	movlb	0	; () banked
  7795  0025FC  51D8               	movf	_IOCCF7_InterruptHandler& (0+255),w,b
  7796  0025FE  11D9               	iorwf	(_IOCCF7_InterruptHandler+1)& (0+255),w,b
  7797  002600  B4D8               	btfsc	status,2,c
  7798  002602  D00B               	goto	i2u434_49
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;pin_manager.c: 550: {;pin_manager.c: 551: IOCCF7_InterruptHandler();
  7802  002604  D801               	call	i2u434_48
  7803  002606  D009               	goto	i2u434_49
  7804  002608                     i2u434_48:
  7805  002608  0005               	push	
  7806  00260A  6EFA               	movwf	pclath,c
  7807  00260C  51D8               	movf	_IOCCF7_InterruptHandler& (0+255),w,b
  7808  00260E  6EFD               	movwf	tosl,c
  7809  002610  51D9               	movf	(_IOCCF7_InterruptHandler+1)& (0+255),w,b
  7810  002612  6EFE               	movwf	tosh,c
  7811  002614  6AFF               	clrf	tosu,c
  7812  002616  50FA               	movf	pclath,w,c
  7813  002618  0012               	return		;indir
  7814  00261A                     i2u434_49:
  7815                           
  7816                           ;pin_manager.c: 552: };pin_manager.c: 553: IOCCFbits.IOCCF7 = 0;
  7817  00261A  010F               	movlb	15	; () banked
  7818  00261C  9F1A               	bcf	26,7,b	;volatile
  7819                           
  7820                           ; BSR set to: 15
  7821  00261E  0012               	return		;funcret
  7822  002620                     __end_of_IOCCF7_ISR:
  7823                           	opt callstack 0
  7824                           
  7825 ;; *************** function _IOCCF7_DefaultInterruptHandler *****************
  7826 ;; Defined at:
  7827 ;;		line 566 in file "mcc_generated_files/pin_manager.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;		None
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;		None
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  1    wreg      void 
  7834 ;; Registers used:
  7835 ;;		None
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7845 ;;Total ram usage:        0 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; This function calls:
  7848 ;;		Nothing
  7849 ;; This function is called by:
  7850 ;;		_PIN_MANAGER_Initialize
  7851 ;;		_IOCCF7_ISR
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           	psect	text67
  7856  002B5E                     __ptext67:
  7857                           	opt callstack 0
  7858  002B5E                     _IOCCF7_DefaultInterruptHandler:
  7859                           	opt callstack 21
  7860                           
  7861                           ; BSR set to: 15
  7862                           ;incstack = 0
  7863  002B5E  0012               	return		;funcret
  7864  002B60                     __end_of_IOCCF7_DefaultInterruptHandler:
  7865                           	opt callstack 0
  7866                           
  7867 ;; *************** function _IOCCF6_ISR *****************
  7868 ;; Defined at:
  7869 ;;		line 514 in file "mcc_generated_files/pin_manager.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;		None
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;		None
  7874 ;; Return value:  Size  Location     Type
  7875 ;;                  1    wreg      void 
  7876 ;; Registers used:
  7877 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/0
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7887 ;;Total ram usage:        0 bytes
  7888 ;; Hardware stack levels used:    1
  7889 ;; Hardware stack levels required when called:    1
  7890 ;; This function calls:
  7891 ;;		Absolute function
  7892 ;;		_IOCCF6_DefaultInterruptHandler
  7893 ;; This function is called by:
  7894 ;;		_PIN_MANAGER_IOC
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           	psect	text68
  7899  002620                     __ptext68:
  7900                           	opt callstack 0
  7901  002620                     _IOCCF6_ISR:
  7902                           	opt callstack 21
  7903                           
  7904                           ;pin_manager.c: 519: if(IOCCF6_InterruptHandler)
  7905                           
  7906                           ;incstack = 0
  7907  002620  0100               	movlb	0	; () banked
  7908  002622  51DA               	movf	_IOCCF6_InterruptHandler& (0+255),w,b
  7909  002624  11DB               	iorwf	(_IOCCF6_InterruptHandler+1)& (0+255),w,b
  7910  002626  B4D8               	btfsc	status,2,c
  7911  002628  D00B               	goto	i2u432_49
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;pin_manager.c: 520: {;pin_manager.c: 521: IOCCF6_InterruptHandler();
  7915  00262A  D801               	call	i2u432_48
  7916  00262C  D009               	goto	i2u432_49
  7917  00262E                     i2u432_48:
  7918  00262E  0005               	push	
  7919  002630  6EFA               	movwf	pclath,c
  7920  002632  51DA               	movf	_IOCCF6_InterruptHandler& (0+255),w,b
  7921  002634  6EFD               	movwf	tosl,c
  7922  002636  51DB               	movf	(_IOCCF6_InterruptHandler+1)& (0+255),w,b
  7923  002638  6EFE               	movwf	tosh,c
  7924  00263A  6AFF               	clrf	tosu,c
  7925  00263C  50FA               	movf	pclath,w,c
  7926  00263E  0012               	return		;indir
  7927  002640                     i2u432_49:
  7928                           
  7929                           ;pin_manager.c: 522: };pin_manager.c: 523: IOCCFbits.IOCCF6 = 0;
  7930  002640  010F               	movlb	15	; () banked
  7931  002642  9D1A               	bcf	26,6,b	;volatile
  7932                           
  7933                           ; BSR set to: 15
  7934  002644  0012               	return		;funcret
  7935  002646                     __end_of_IOCCF6_ISR:
  7936                           	opt callstack 0
  7937                           
  7938 ;; *************** function _IOCCF6_DefaultInterruptHandler *****************
  7939 ;; Defined at:
  7940 ;;		line 536 in file "mcc_generated_files/pin_manager.c"
  7941 ;; Parameters:    Size  Location     Type
  7942 ;;		None
  7943 ;; Auto vars:     Size  Location     Type
  7944 ;;		None
  7945 ;; Return value:  Size  Location     Type
  7946 ;;                  1    wreg      void 
  7947 ;; Registers used:
  7948 ;;		None
  7949 ;; Tracked objects:
  7950 ;;		On entry : 0/0
  7951 ;;		On exit  : 0/0
  7952 ;;		Unchanged: 0/0
  7953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7958 ;;Total ram usage:        0 bytes
  7959 ;; Hardware stack levels used:    1
  7960 ;; This function calls:
  7961 ;;		Nothing
  7962 ;; This function is called by:
  7963 ;;		_PIN_MANAGER_Initialize
  7964 ;;		_IOCCF6_ISR
  7965 ;; This function uses a non-reentrant model
  7966 ;;
  7967                           
  7968                           	psect	text69
  7969  002B60                     __ptext69:
  7970                           	opt callstack 0
  7971  002B60                     _IOCCF6_DefaultInterruptHandler:
  7972                           	opt callstack 21
  7973                           
  7974                           ; BSR set to: 15
  7975                           ;incstack = 0
  7976  002B60  0012               	return		;funcret
  7977  002B62                     __end_of_IOCCF6_DefaultInterruptHandler:
  7978                           	opt callstack 0
  7979                           
  7980 ;; *************** function _IOCCF5_ISR *****************
  7981 ;; Defined at:
  7982 ;;		line 484 in file "mcc_generated_files/pin_manager.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;		None
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;		None
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      void 
  7989 ;; Registers used:
  7990 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8000 ;;Total ram usage:        0 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:    1
  8003 ;; This function calls:
  8004 ;;		Absolute function
  8005 ;;		_IOCCF5_DefaultInterruptHandler
  8006 ;; This function is called by:
  8007 ;;		_PIN_MANAGER_IOC
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           	psect	text70
  8012  002646                     __ptext70:
  8013                           	opt callstack 0
  8014  002646                     _IOCCF5_ISR:
  8015                           	opt callstack 21
  8016                           
  8017                           ;pin_manager.c: 489: if(IOCCF5_InterruptHandler)
  8018                           
  8019                           ;incstack = 0
  8020  002646  0100               	movlb	0	; () banked
  8021  002648  51DC               	movf	_IOCCF5_InterruptHandler& (0+255),w,b
  8022  00264A  11DD               	iorwf	(_IOCCF5_InterruptHandler+1)& (0+255),w,b
  8023  00264C  B4D8               	btfsc	status,2,c
  8024  00264E  D00B               	goto	i2u430_49
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;pin_manager.c: 490: {;pin_manager.c: 491: IOCCF5_InterruptHandler();
  8028  002650  D801               	call	i2u430_48
  8029  002652  D009               	goto	i2u430_49
  8030  002654                     i2u430_48:
  8031  002654  0005               	push	
  8032  002656  6EFA               	movwf	pclath,c
  8033  002658  51DC               	movf	_IOCCF5_InterruptHandler& (0+255),w,b
  8034  00265A  6EFD               	movwf	tosl,c
  8035  00265C  51DD               	movf	(_IOCCF5_InterruptHandler+1)& (0+255),w,b
  8036  00265E  6EFE               	movwf	tosh,c
  8037  002660  6AFF               	clrf	tosu,c
  8038  002662  50FA               	movf	pclath,w,c
  8039  002664  0012               	return		;indir
  8040  002666                     i2u430_49:
  8041                           
  8042                           ;pin_manager.c: 492: };pin_manager.c: 493: IOCCFbits.IOCCF5 = 0;
  8043  002666  010F               	movlb	15	; () banked
  8044  002668  9B1A               	bcf	26,5,b	;volatile
  8045                           
  8046                           ; BSR set to: 15
  8047  00266A  0012               	return		;funcret
  8048  00266C                     __end_of_IOCCF5_ISR:
  8049                           	opt callstack 0
  8050                           
  8051 ;; *************** function _IOCCF5_DefaultInterruptHandler *****************
  8052 ;; Defined at:
  8053 ;;		line 506 in file "mcc_generated_files/pin_manager.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;		None
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;		None
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      void 
  8060 ;; Registers used:
  8061 ;;		None
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8071 ;;Total ram usage:        0 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; This function calls:
  8074 ;;		Nothing
  8075 ;; This function is called by:
  8076 ;;		_PIN_MANAGER_Initialize
  8077 ;;		_IOCCF5_ISR
  8078 ;; This function uses a non-reentrant model
  8079 ;;
  8080                           
  8081                           	psect	text71
  8082  002B62                     __ptext71:
  8083                           	opt callstack 0
  8084  002B62                     _IOCCF5_DefaultInterruptHandler:
  8085                           	opt callstack 21
  8086                           
  8087                           ; BSR set to: 15
  8088                           ;incstack = 0
  8089  002B62  0012               	return		;funcret
  8090  002B64                     __end_of_IOCCF5_DefaultInterruptHandler:
  8091                           	opt callstack 0
  8092                           
  8093 ;; *************** function _IOCCF4_ISR *****************
  8094 ;; Defined at:
  8095 ;;		line 454 in file "mcc_generated_files/pin_manager.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;		None
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;		None
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      void 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8113 ;;Total ram usage:        0 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    1
  8116 ;; This function calls:
  8117 ;;		Absolute function
  8118 ;;		_IOCCF4_DefaultInterruptHandler
  8119 ;; This function is called by:
  8120 ;;		_PIN_MANAGER_IOC
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           	psect	text72
  8125  00266C                     __ptext72:
  8126                           	opt callstack 0
  8127  00266C                     _IOCCF4_ISR:
  8128                           	opt callstack 21
  8129                           
  8130                           ;pin_manager.c: 459: if(IOCCF4_InterruptHandler)
  8131                           
  8132                           ;incstack = 0
  8133  00266C  0100               	movlb	0	; () banked
  8134  00266E  51DE               	movf	_IOCCF4_InterruptHandler& (0+255),w,b
  8135  002670  11DF               	iorwf	(_IOCCF4_InterruptHandler+1)& (0+255),w,b
  8136  002672  B4D8               	btfsc	status,2,c
  8137  002674  D00B               	goto	i2u428_49
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;pin_manager.c: 460: {;pin_manager.c: 461: IOCCF4_InterruptHandler();
  8141  002676  D801               	call	i2u428_48
  8142  002678  D009               	goto	i2u428_49
  8143  00267A                     i2u428_48:
  8144  00267A  0005               	push	
  8145  00267C  6EFA               	movwf	pclath,c
  8146  00267E  51DE               	movf	_IOCCF4_InterruptHandler& (0+255),w,b
  8147  002680  6EFD               	movwf	tosl,c
  8148  002682  51DF               	movf	(_IOCCF4_InterruptHandler+1)& (0+255),w,b
  8149  002684  6EFE               	movwf	tosh,c
  8150  002686  6AFF               	clrf	tosu,c
  8151  002688  50FA               	movf	pclath,w,c
  8152  00268A  0012               	return		;indir
  8153  00268C                     i2u428_49:
  8154                           
  8155                           ;pin_manager.c: 462: };pin_manager.c: 463: IOCCFbits.IOCCF4 = 0;
  8156  00268C  010F               	movlb	15	; () banked
  8157  00268E  991A               	bcf	26,4,b	;volatile
  8158                           
  8159                           ; BSR set to: 15
  8160  002690  0012               	return		;funcret
  8161  002692                     __end_of_IOCCF4_ISR:
  8162                           	opt callstack 0
  8163                           
  8164 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
  8165 ;; Defined at:
  8166 ;;		line 476 in file "mcc_generated_files/pin_manager.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;		None
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;		None
  8171 ;; Return value:  Size  Location     Type
  8172 ;;                  1    wreg      void 
  8173 ;; Registers used:
  8174 ;;		None
  8175 ;; Tracked objects:
  8176 ;;		On entry : 0/0
  8177 ;;		On exit  : 0/0
  8178 ;;		Unchanged: 0/0
  8179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8184 ;;Total ram usage:        0 bytes
  8185 ;; Hardware stack levels used:    1
  8186 ;; This function calls:
  8187 ;;		Nothing
  8188 ;; This function is called by:
  8189 ;;		_PIN_MANAGER_Initialize
  8190 ;;		_IOCCF4_ISR
  8191 ;; This function uses a non-reentrant model
  8192 ;;
  8193                           
  8194                           	psect	text73
  8195  002B64                     __ptext73:
  8196                           	opt callstack 0
  8197  002B64                     _IOCCF4_DefaultInterruptHandler:
  8198                           	opt callstack 21
  8199                           
  8200                           ; BSR set to: 15
  8201                           ;incstack = 0
  8202  002B64  0012               	return		;funcret
  8203  002B66                     __end_of_IOCCF4_DefaultInterruptHandler:
  8204                           	opt callstack 0
  8205                           
  8206 ;; *************** function _IOCCF3_ISR *****************
  8207 ;; Defined at:
  8208 ;;		line 424 in file "mcc_generated_files/pin_manager.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;		None
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;		None
  8213 ;; Return value:  Size  Location     Type
  8214 ;;                  1    wreg      void 
  8215 ;; Registers used:
  8216 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8217 ;; Tracked objects:
  8218 ;;		On entry : 0/0
  8219 ;;		On exit  : 0/0
  8220 ;;		Unchanged: 0/0
  8221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8226 ;;Total ram usage:        0 bytes
  8227 ;; Hardware stack levels used:    1
  8228 ;; Hardware stack levels required when called:    1
  8229 ;; This function calls:
  8230 ;;		Absolute function
  8231 ;;		_IOCCF3_DefaultInterruptHandler
  8232 ;; This function is called by:
  8233 ;;		_PIN_MANAGER_IOC
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           
  8237                           	psect	text74
  8238  002692                     __ptext74:
  8239                           	opt callstack 0
  8240  002692                     _IOCCF3_ISR:
  8241                           	opt callstack 21
  8242                           
  8243                           ;pin_manager.c: 429: if(IOCCF3_InterruptHandler)
  8244                           
  8245                           ;incstack = 0
  8246  002692  0100               	movlb	0	; () banked
  8247  002694  51E0               	movf	_IOCCF3_InterruptHandler& (0+255),w,b
  8248  002696  11E1               	iorwf	(_IOCCF3_InterruptHandler+1)& (0+255),w,b
  8249  002698  B4D8               	btfsc	status,2,c
  8250  00269A  D00B               	goto	i2u426_49
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;pin_manager.c: 430: {;pin_manager.c: 431: IOCCF3_InterruptHandler();
  8254  00269C  D801               	call	i2u426_48
  8255  00269E  D009               	goto	i2u426_49
  8256  0026A0                     i2u426_48:
  8257  0026A0  0005               	push	
  8258  0026A2  6EFA               	movwf	pclath,c
  8259  0026A4  51E0               	movf	_IOCCF3_InterruptHandler& (0+255),w,b
  8260  0026A6  6EFD               	movwf	tosl,c
  8261  0026A8  51E1               	movf	(_IOCCF3_InterruptHandler+1)& (0+255),w,b
  8262  0026AA  6EFE               	movwf	tosh,c
  8263  0026AC  6AFF               	clrf	tosu,c
  8264  0026AE  50FA               	movf	pclath,w,c
  8265  0026B0  0012               	return		;indir
  8266  0026B2                     i2u426_49:
  8267                           
  8268                           ;pin_manager.c: 432: };pin_manager.c: 433: IOCCFbits.IOCCF3 = 0;
  8269  0026B2  010F               	movlb	15	; () banked
  8270  0026B4  971A               	bcf	26,3,b	;volatile
  8271                           
  8272                           ; BSR set to: 15
  8273  0026B6  0012               	return		;funcret
  8274  0026B8                     __end_of_IOCCF3_ISR:
  8275                           	opt callstack 0
  8276                           
  8277 ;; *************** function _IOCCF3_DefaultInterruptHandler *****************
  8278 ;; Defined at:
  8279 ;;		line 446 in file "mcc_generated_files/pin_manager.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;		None
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;		None
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  1    wreg      void 
  8286 ;; Registers used:
  8287 ;;		None
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8297 ;;Total ram usage:        0 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		_PIN_MANAGER_Initialize
  8303 ;;		_IOCCF3_ISR
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           	psect	text75
  8308  002B66                     __ptext75:
  8309                           	opt callstack 0
  8310  002B66                     _IOCCF3_DefaultInterruptHandler:
  8311                           	opt callstack 21
  8312                           
  8313                           ; BSR set to: 15
  8314                           ;incstack = 0
  8315  002B66  0012               	return		;funcret
  8316  002B68                     __end_of_IOCCF3_DefaultInterruptHandler:
  8317                           	opt callstack 0
  8318                           
  8319 ;; *************** function _IOCBF5_ISR *****************
  8320 ;; Defined at:
  8321 ;;		line 394 in file "mcc_generated_files/pin_manager.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;		None
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;		None
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  1    wreg      void 
  8328 ;; Registers used:
  8329 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8339 ;;Total ram usage:        0 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    1
  8342 ;; This function calls:
  8343 ;;		Absolute function
  8344 ;;		_IOCBF5_DefaultInterruptHandler
  8345 ;; This function is called by:
  8346 ;;		_PIN_MANAGER_IOC
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           	psect	text76
  8351  0026B8                     __ptext76:
  8352                           	opt callstack 0
  8353  0026B8                     _IOCBF5_ISR:
  8354                           	opt callstack 21
  8355                           
  8356                           ;pin_manager.c: 399: if(IOCBF5_InterruptHandler)
  8357                           
  8358                           ;incstack = 0
  8359  0026B8  0100               	movlb	0	; () banked
  8360  0026BA  51E2               	movf	_IOCBF5_InterruptHandler& (0+255),w,b
  8361  0026BC  11E3               	iorwf	(_IOCBF5_InterruptHandler+1)& (0+255),w,b
  8362  0026BE  B4D8               	btfsc	status,2,c
  8363  0026C0  D00B               	goto	i2u424_49
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;pin_manager.c: 400: {;pin_manager.c: 401: IOCBF5_InterruptHandler();
  8367  0026C2  D801               	call	i2u424_48
  8368  0026C4  D009               	goto	i2u424_49
  8369  0026C6                     i2u424_48:
  8370  0026C6  0005               	push	
  8371  0026C8  6EFA               	movwf	pclath,c
  8372  0026CA  51E2               	movf	_IOCBF5_InterruptHandler& (0+255),w,b
  8373  0026CC  6EFD               	movwf	tosl,c
  8374  0026CE  51E3               	movf	(_IOCBF5_InterruptHandler+1)& (0+255),w,b
  8375  0026D0  6EFE               	movwf	tosh,c
  8376  0026D2  6AFF               	clrf	tosu,c
  8377  0026D4  50FA               	movf	pclath,w,c
  8378  0026D6  0012               	return		;indir
  8379  0026D8                     i2u424_49:
  8380                           
  8381                           ;pin_manager.c: 402: };pin_manager.c: 403: IOCBFbits.IOCBF5 = 0;
  8382  0026D8  010F               	movlb	15	; () banked
  8383  0026DA  9B12               	bcf	18,5,b	;volatile
  8384                           
  8385                           ; BSR set to: 15
  8386  0026DC  0012               	return		;funcret
  8387  0026DE                     __end_of_IOCBF5_ISR:
  8388                           	opt callstack 0
  8389                           
  8390 ;; *************** function _IOCBF5_DefaultInterruptHandler *****************
  8391 ;; Defined at:
  8392 ;;		line 416 in file "mcc_generated_files/pin_manager.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;		None
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;		None
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		None
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8410 ;;Total ram usage:        0 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; This function calls:
  8413 ;;		Nothing
  8414 ;; This function is called by:
  8415 ;;		_PIN_MANAGER_Initialize
  8416 ;;		_IOCBF5_ISR
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           	psect	text77
  8421  002B68                     __ptext77:
  8422                           	opt callstack 0
  8423  002B68                     _IOCBF5_DefaultInterruptHandler:
  8424                           	opt callstack 21
  8425                           
  8426                           ; BSR set to: 15
  8427                           ;incstack = 0
  8428  002B68  0012               	return		;funcret
  8429  002B6A                     __end_of_IOCBF5_DefaultInterruptHandler:
  8430                           	opt callstack 0
  8431                           
  8432 ;; *************** function _IOCAF4_ISR *****************
  8433 ;; Defined at:
  8434 ;;		line 364 in file "mcc_generated_files/pin_manager.c"
  8435 ;; Parameters:    Size  Location     Type
  8436 ;;		None
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;		None
  8439 ;; Return value:  Size  Location     Type
  8440 ;;                  1    wreg      void 
  8441 ;; Registers used:
  8442 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : 0/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8452 ;;Total ram usage:        0 bytes
  8453 ;; Hardware stack levels used:    1
  8454 ;; Hardware stack levels required when called:    1
  8455 ;; This function calls:
  8456 ;;		Absolute function
  8457 ;;		_IOCAF4_DefaultInterruptHandler
  8458 ;; This function is called by:
  8459 ;;		_PIN_MANAGER_IOC
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           	psect	text78
  8464  0026DE                     __ptext78:
  8465                           	opt callstack 0
  8466  0026DE                     _IOCAF4_ISR:
  8467                           	opt callstack 21
  8468                           
  8469                           ;pin_manager.c: 369: if(IOCAF4_InterruptHandler)
  8470                           
  8471                           ;incstack = 0
  8472  0026DE  0100               	movlb	0	; () banked
  8473  0026E0  51E4               	movf	_IOCAF4_InterruptHandler& (0+255),w,b
  8474  0026E2  11E5               	iorwf	(_IOCAF4_InterruptHandler+1)& (0+255),w,b
  8475  0026E4  B4D8               	btfsc	status,2,c
  8476  0026E6  D00B               	goto	i2u422_49
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;pin_manager.c: 370: {;pin_manager.c: 371: IOCAF4_InterruptHandler();
  8480  0026E8  D801               	call	i2u422_48
  8481  0026EA  D009               	goto	i2u422_49
  8482  0026EC                     i2u422_48:
  8483  0026EC  0005               	push	
  8484  0026EE  6EFA               	movwf	pclath,c
  8485  0026F0  51E4               	movf	_IOCAF4_InterruptHandler& (0+255),w,b
  8486  0026F2  6EFD               	movwf	tosl,c
  8487  0026F4  51E5               	movf	(_IOCAF4_InterruptHandler+1)& (0+255),w,b
  8488  0026F6  6EFE               	movwf	tosh,c
  8489  0026F8  6AFF               	clrf	tosu,c
  8490  0026FA  50FA               	movf	pclath,w,c
  8491  0026FC  0012               	return		;indir
  8492  0026FE                     i2u422_49:
  8493                           
  8494                           ;pin_manager.c: 372: };pin_manager.c: 373: IOCAFbits.IOCAF4 = 0;
  8495  0026FE  010F               	movlb	15	; () banked
  8496  002700  990A               	bcf	10,4,b	;volatile
  8497                           
  8498                           ; BSR set to: 15
  8499  002702  0012               	return		;funcret
  8500  002704                     __end_of_IOCAF4_ISR:
  8501                           	opt callstack 0
  8502                           
  8503 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
  8504 ;; Defined at:
  8505 ;;		line 386 in file "mcc_generated_files/pin_manager.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;		None
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;		None
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  1    wreg      void 
  8512 ;; Registers used:
  8513 ;;		None
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8523 ;;Total ram usage:        0 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; This function calls:
  8526 ;;		Nothing
  8527 ;; This function is called by:
  8528 ;;		_PIN_MANAGER_Initialize
  8529 ;;		_IOCAF4_ISR
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           	psect	text79
  8534  002B6A                     __ptext79:
  8535                           	opt callstack 0
  8536  002B6A                     _IOCAF4_DefaultInterruptHandler:
  8537                           	opt callstack 21
  8538                           
  8539                           ; BSR set to: 15
  8540                           ;incstack = 0
  8541  002B6A  0012               	return		;funcret
  8542  002B6C                     __end_of_IOCAF4_DefaultInterruptHandler:
  8543                           	opt callstack 0
  8544                           
  8545 ;; *************** function _IOCAF3_ISR *****************
  8546 ;; Defined at:
  8547 ;;		line 334 in file "mcc_generated_files/pin_manager.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;		None
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;		None
  8552 ;; Return value:  Size  Location     Type
  8553 ;;                  1    wreg      void 
  8554 ;; Registers used:
  8555 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8556 ;; Tracked objects:
  8557 ;;		On entry : 0/0
  8558 ;;		On exit  : 0/0
  8559 ;;		Unchanged: 0/0
  8560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8565 ;;Total ram usage:        0 bytes
  8566 ;; Hardware stack levels used:    1
  8567 ;; Hardware stack levels required when called:    1
  8568 ;; This function calls:
  8569 ;;		Absolute function
  8570 ;;		_IOCAF3_DefaultInterruptHandler
  8571 ;; This function is called by:
  8572 ;;		_PIN_MANAGER_IOC
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           	psect	text80
  8577  002704                     __ptext80:
  8578                           	opt callstack 0
  8579  002704                     _IOCAF3_ISR:
  8580                           	opt callstack 21
  8581                           
  8582                           ;pin_manager.c: 339: if(IOCAF3_InterruptHandler)
  8583                           
  8584                           ;incstack = 0
  8585  002704  0100               	movlb	0	; () banked
  8586  002706  51E6               	movf	_IOCAF3_InterruptHandler& (0+255),w,b
  8587  002708  11E7               	iorwf	(_IOCAF3_InterruptHandler+1)& (0+255),w,b
  8588  00270A  B4D8               	btfsc	status,2,c
  8589  00270C  D00B               	goto	i2u420_49
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;pin_manager.c: 340: {;pin_manager.c: 341: IOCAF3_InterruptHandler();
  8593  00270E  D801               	call	i2u420_48
  8594  002710  D009               	goto	i2u420_49
  8595  002712                     i2u420_48:
  8596  002712  0005               	push	
  8597  002714  6EFA               	movwf	pclath,c
  8598  002716  51E6               	movf	_IOCAF3_InterruptHandler& (0+255),w,b
  8599  002718  6EFD               	movwf	tosl,c
  8600  00271A  51E7               	movf	(_IOCAF3_InterruptHandler+1)& (0+255),w,b
  8601  00271C  6EFE               	movwf	tosh,c
  8602  00271E  6AFF               	clrf	tosu,c
  8603  002720  50FA               	movf	pclath,w,c
  8604  002722  0012               	return		;indir
  8605  002724                     i2u420_49:
  8606                           
  8607                           ;pin_manager.c: 342: };pin_manager.c: 343: IOCAFbits.IOCAF3 = 0;
  8608  002724  010F               	movlb	15	; () banked
  8609  002726  970A               	bcf	10,3,b	;volatile
  8610                           
  8611                           ; BSR set to: 15
  8612  002728  0012               	return		;funcret
  8613  00272A                     __end_of_IOCAF3_ISR:
  8614                           	opt callstack 0
  8615                           
  8616 ;; *************** function _IOCAF3_DefaultInterruptHandler *****************
  8617 ;; Defined at:
  8618 ;;		line 356 in file "mcc_generated_files/pin_manager.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;		None
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;		None
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  1    wreg      void 
  8625 ;; Registers used:
  8626 ;;		None
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8636 ;;Total ram usage:        0 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; This function calls:
  8639 ;;		Nothing
  8640 ;; This function is called by:
  8641 ;;		_PIN_MANAGER_Initialize
  8642 ;;		_IOCAF3_ISR
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           	psect	text81
  8647  002B6C                     __ptext81:
  8648                           	opt callstack 0
  8649  002B6C                     _IOCAF3_DefaultInterruptHandler:
  8650                           	opt callstack 21
  8651                           
  8652                           ; BSR set to: 15
  8653                           ;incstack = 0
  8654  002B6C  0012               	return		;funcret
  8655  002B6E                     __end_of_IOCAF3_DefaultInterruptHandler:
  8656                           	opt callstack 0
  8657                           
  8658 ;; *************** function _IOCAF1_ISR *****************
  8659 ;; Defined at:
  8660 ;;		line 304 in file "mcc_generated_files/pin_manager.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;		None
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;		None
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  1    wreg      void 
  8667 ;; Registers used:
  8668 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8678 ;;Total ram usage:        0 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:    1
  8681 ;; This function calls:
  8682 ;;		Absolute function
  8683 ;;		_IOCAF1_DefaultInterruptHandler
  8684 ;; This function is called by:
  8685 ;;		_PIN_MANAGER_IOC
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           	psect	text82
  8690  00272A                     __ptext82:
  8691                           	opt callstack 0
  8692  00272A                     _IOCAF1_ISR:
  8693                           	opt callstack 21
  8694                           
  8695                           ;pin_manager.c: 309: if(IOCAF1_InterruptHandler)
  8696                           
  8697                           ;incstack = 0
  8698  00272A  0100               	movlb	0	; () banked
  8699  00272C  51E8               	movf	_IOCAF1_InterruptHandler& (0+255),w,b
  8700  00272E  11E9               	iorwf	(_IOCAF1_InterruptHandler+1)& (0+255),w,b
  8701  002730  B4D8               	btfsc	status,2,c
  8702  002732  D00B               	goto	i2u418_49
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;pin_manager.c: 310: {;pin_manager.c: 311: IOCAF1_InterruptHandler();
  8706  002734  D801               	call	i2u418_48
  8707  002736  D009               	goto	i2u418_49
  8708  002738                     i2u418_48:
  8709  002738  0005               	push	
  8710  00273A  6EFA               	movwf	pclath,c
  8711  00273C  51E8               	movf	_IOCAF1_InterruptHandler& (0+255),w,b
  8712  00273E  6EFD               	movwf	tosl,c
  8713  002740  51E9               	movf	(_IOCAF1_InterruptHandler+1)& (0+255),w,b
  8714  002742  6EFE               	movwf	tosh,c
  8715  002744  6AFF               	clrf	tosu,c
  8716  002746  50FA               	movf	pclath,w,c
  8717  002748  0012               	return		;indir
  8718  00274A                     i2u418_49:
  8719                           
  8720                           ;pin_manager.c: 312: };pin_manager.c: 313: IOCAFbits.IOCAF1 = 0;
  8721  00274A  010F               	movlb	15	; () banked
  8722  00274C  930A               	bcf	10,1,b	;volatile
  8723                           
  8724                           ; BSR set to: 15
  8725  00274E  0012               	return		;funcret
  8726  002750                     __end_of_IOCAF1_ISR:
  8727                           	opt callstack 0
  8728                           
  8729 ;; *************** function _IOCAF1_DefaultInterruptHandler *****************
  8730 ;; Defined at:
  8731 ;;		line 326 in file "mcc_generated_files/pin_manager.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;		None
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      void 
  8738 ;; Registers used:
  8739 ;;		None
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8749 ;;Total ram usage:        0 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; This function calls:
  8752 ;;		Nothing
  8753 ;; This function is called by:
  8754 ;;		_PIN_MANAGER_Initialize
  8755 ;;		_IOCAF1_ISR
  8756 ;; This function uses a non-reentrant model
  8757 ;;
  8758                           
  8759                           	psect	text83
  8760  002B6E                     __ptext83:
  8761                           	opt callstack 0
  8762  002B6E                     _IOCAF1_DefaultInterruptHandler:
  8763                           	opt callstack 21
  8764                           
  8765                           ; BSR set to: 15
  8766                           ;incstack = 0
  8767  002B6E  0012               	return		;funcret
  8768  002B70                     __end_of_IOCAF1_DefaultInterruptHandler:
  8769                           	opt callstack 0
  8770                           
  8771 ;; *************** function _IOCAF0_ISR *****************
  8772 ;; Defined at:
  8773 ;;		line 274 in file "mcc_generated_files/pin_manager.c"
  8774 ;; Parameters:    Size  Location     Type
  8775 ;;		None
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;		None
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8791 ;;Total ram usage:        0 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    1
  8794 ;; This function calls:
  8795 ;;		Absolute function
  8796 ;;		_IOCAF0_DefaultInterruptHandler
  8797 ;; This function is called by:
  8798 ;;		_PIN_MANAGER_IOC
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           	psect	text84
  8803  002750                     __ptext84:
  8804                           	opt callstack 0
  8805  002750                     _IOCAF0_ISR:
  8806                           	opt callstack 21
  8807                           
  8808                           ;pin_manager.c: 279: if(IOCAF0_InterruptHandler)
  8809                           
  8810                           ;incstack = 0
  8811  002750  0100               	movlb	0	; () banked
  8812  002752  51EA               	movf	_IOCAF0_InterruptHandler& (0+255),w,b
  8813  002754  11EB               	iorwf	(_IOCAF0_InterruptHandler+1)& (0+255),w,b
  8814  002756  B4D8               	btfsc	status,2,c
  8815  002758  D00B               	goto	i2u416_49
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;pin_manager.c: 280: {;pin_manager.c: 281: IOCAF0_InterruptHandler();
  8819  00275A  D801               	call	i2u416_48
  8820  00275C  D009               	goto	i2u416_49
  8821  00275E                     i2u416_48:
  8822  00275E  0005               	push	
  8823  002760  6EFA               	movwf	pclath,c
  8824  002762  51EA               	movf	_IOCAF0_InterruptHandler& (0+255),w,b
  8825  002764  6EFD               	movwf	tosl,c
  8826  002766  51EB               	movf	(_IOCAF0_InterruptHandler+1)& (0+255),w,b
  8827  002768  6EFE               	movwf	tosh,c
  8828  00276A  6AFF               	clrf	tosu,c
  8829  00276C  50FA               	movf	pclath,w,c
  8830  00276E  0012               	return		;indir
  8831  002770                     i2u416_49:
  8832                           
  8833                           ;pin_manager.c: 282: };pin_manager.c: 283: IOCAFbits.IOCAF0 = 0;
  8834  002770  010F               	movlb	15	; () banked
  8835  002772  910A               	bcf	10,0,b	;volatile
  8836                           
  8837                           ; BSR set to: 15
  8838  002774  0012               	return		;funcret
  8839  002776                     __end_of_IOCAF0_ISR:
  8840                           	opt callstack 0
  8841                           
  8842 ;; *************** function _IOCAF0_DefaultInterruptHandler *****************
  8843 ;; Defined at:
  8844 ;;		line 296 in file "mcc_generated_files/pin_manager.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;		None
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;		None
  8849 ;; Return value:  Size  Location     Type
  8850 ;;                  1    wreg      void 
  8851 ;; Registers used:
  8852 ;;		None
  8853 ;; Tracked objects:
  8854 ;;		On entry : 0/0
  8855 ;;		On exit  : 0/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8862 ;;Total ram usage:        0 bytes
  8863 ;; Hardware stack levels used:    1
  8864 ;; This function calls:
  8865 ;;		Nothing
  8866 ;; This function is called by:
  8867 ;;		_PIN_MANAGER_Initialize
  8868 ;;		_IOCAF0_ISR
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           	psect	text85
  8873  002B70                     __ptext85:
  8874                           	opt callstack 0
  8875  002B70                     _IOCAF0_DefaultInterruptHandler:
  8876                           	opt callstack 21
  8877                           
  8878                           ; BSR set to: 15
  8879                           ;incstack = 0
  8880  002B70  0012               	return		;funcret
  8881  002B72                     __end_of_IOCAF0_DefaultInterruptHandler:
  8882                           	opt callstack 0
  8883                           
  8884 ;; *************** function _INT2_ISR *****************
  8885 ;; Defined at:
  8886 ;;		line 86 in file "mcc_generated_files/ext_int.c"
  8887 ;; Parameters:    Size  Location     Type
  8888 ;;		None
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;		None
  8891 ;; Return value:  Size  Location     Type
  8892 ;;                  1    wreg      void 
  8893 ;; Registers used:
  8894 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8895 ;; Tracked objects:
  8896 ;;		On entry : 0/0
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8904 ;;Total ram usage:        0 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:    2
  8907 ;; This function calls:
  8908 ;;		_INT2_CallBack
  8909 ;; This function is called by:
  8910 ;;		_INTERRUPT_InterruptManager
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           	psect	text86
  8915  002AFA                     __ptext86:
  8916                           	opt callstack 0
  8917  002AFA                     _INT2_ISR:
  8918                           	opt callstack 21
  8919                           
  8920                           ;ext_int.c: 88: (PIR0bits.INT2IF = 0);
  8921                           
  8922                           ;incstack = 0
  8923  002AFA  010E               	movlb	14	; () banked
  8924  002AFC  95CA               	bcf	202,2,b	;volatile
  8925                           
  8926                           ; BSR set to: 14
  8927                           ;ext_int.c: 91: INT2_CallBack();
  8928  002AFE  ECFD  F013         	call	_INT2_CallBack	;wreg free
  8929  002B02  0012               	return		;funcret
  8930  002B04                     __end_of_INT2_ISR:
  8931                           	opt callstack 0
  8932                           
  8933 ;; *************** function _INT2_CallBack *****************
  8934 ;; Defined at:
  8935 ;;		line 95 in file "mcc_generated_files/ext_int.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  1    wreg      void 
  8942 ;; Registers used:
  8943 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8953 ;;Total ram usage:        0 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    1
  8956 ;; This function calls:
  8957 ;;		Absolute function
  8958 ;;		_INT2_DefaultInterruptHandler
  8959 ;; This function is called by:
  8960 ;;		_INT2_ISR
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           	psect	text87
  8965  0027FA                     __ptext87:
  8966                           	opt callstack 0
  8967  0027FA                     _INT2_CallBack:
  8968                           	opt callstack 21
  8969                           
  8970                           ;ext_int.c: 98: if(INT2_InterruptHandler)
  8971                           
  8972                           ;incstack = 0
  8973  0027FA  0100               	movlb	0	; () banked
  8974  0027FC  51F0               	movf	_INT2_InterruptHandler& (0+255),w,b
  8975  0027FE  11F1               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
  8976  002800  B4D8               	btfsc	status,2,c
  8977  002802  0012               	return	
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;ext_int.c: 99: {;ext_int.c: 100: INT2_InterruptHandler();
  8981  002804  D801               	call	i2u401_48
  8982  002806  0012               	return	
  8983  002808                     i2u401_48:
  8984  002808  0005               	push	
  8985  00280A  6EFA               	movwf	pclath,c
  8986  00280C  51F0               	movf	_INT2_InterruptHandler& (0+255),w,b
  8987  00280E  6EFD               	movwf	tosl,c
  8988  002810  51F1               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
  8989  002812  6EFE               	movwf	tosh,c
  8990  002814  6AFF               	clrf	tosu,c
  8991  002816  50FA               	movf	pclath,w,c
  8992  002818  0012               	return		;indir
  8993  00281A                     __end_of_INT2_CallBack:
  8994                           	opt callstack 0
  8995                           
  8996 ;; *************** function _INT2_DefaultInterruptHandler *****************
  8997 ;; Defined at:
  8998 ;;		line 108 in file "mcc_generated_files/ext_int.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;		None
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;		None
  9003 ;; Return value:  Size  Location     Type
  9004 ;;                  1    wreg      void 
  9005 ;; Registers used:
  9006 ;;		None
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9016 ;;Total ram usage:        0 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; This function calls:
  9019 ;;		Nothing
  9020 ;; This function is called by:
  9021 ;;		_EXT_INT_Initialize
  9022 ;;		_INT2_CallBack
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           	psect	text88
  9027  002B72                     __ptext88:
  9028                           	opt callstack 0
  9029  002B72                     _INT2_DefaultInterruptHandler:
  9030                           	opt callstack 21
  9031                           
  9032                           ;incstack = 0
  9033  002B72  0012               	return		;funcret
  9034  002B74                     __end_of_INT2_DefaultInterruptHandler:
  9035                           	opt callstack 0
  9036                           
  9037 ;; *************** function _INT1_ISR *****************
  9038 ;; Defined at:
  9039 ;;		line 60 in file "mcc_generated_files/ext_int.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;		None
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;		None
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  1    wreg      void 
  9046 ;; Registers used:
  9047 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9057 ;;Total ram usage:        0 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    2
  9060 ;; This function calls:
  9061 ;;		_INT1_CallBack
  9062 ;; This function is called by:
  9063 ;;		_INTERRUPT_InterruptManager
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text89
  9068  002B04                     __ptext89:
  9069                           	opt callstack 0
  9070  002B04                     _INT1_ISR:
  9071                           	opt callstack 21
  9072                           
  9073                           ;ext_int.c: 62: (PIR0bits.INT1IF = 0);
  9074                           
  9075                           ;incstack = 0
  9076  002B04  010E               	movlb	14	; () banked
  9077  002B06  93CA               	bcf	202,1,b	;volatile
  9078                           
  9079                           ; BSR set to: 14
  9080                           ;ext_int.c: 65: INT1_CallBack();
  9081  002B08  EC0D  F014         	call	_INT1_CallBack	;wreg free
  9082  002B0C  0012               	return		;funcret
  9083  002B0E                     __end_of_INT1_ISR:
  9084                           	opt callstack 0
  9085                           
  9086 ;; *************** function _INT1_CallBack *****************
  9087 ;; Defined at:
  9088 ;;		line 69 in file "mcc_generated_files/ext_int.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;		None
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;		None
  9093 ;; Return value:  Size  Location     Type
  9094 ;;                  1    wreg      void 
  9095 ;; Registers used:
  9096 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9106 ;;Total ram usage:        0 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    1
  9109 ;; This function calls:
  9110 ;;		Absolute function
  9111 ;;		_INT1_DefaultInterruptHandler
  9112 ;; This function is called by:
  9113 ;;		_INT1_ISR
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           	psect	text90
  9118  00281A                     __ptext90:
  9119                           	opt callstack 0
  9120  00281A                     _INT1_CallBack:
  9121                           	opt callstack 21
  9122                           
  9123                           ;ext_int.c: 72: if(INT1_InterruptHandler)
  9124                           
  9125                           ;incstack = 0
  9126  00281A  0100               	movlb	0	; () banked
  9127  00281C  51F2               	movf	_INT1_InterruptHandler& (0+255),w,b
  9128  00281E  11F3               	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
  9129  002820  B4D8               	btfsc	status,2,c
  9130  002822  0012               	return	
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;ext_int.c: 73: {;ext_int.c: 74: INT1_InterruptHandler();
  9134  002824  D801               	call	i2u399_48
  9135  002826  0012               	return	
  9136  002828                     i2u399_48:
  9137  002828  0005               	push	
  9138  00282A  6EFA               	movwf	pclath,c
  9139  00282C  51F2               	movf	_INT1_InterruptHandler& (0+255),w,b
  9140  00282E  6EFD               	movwf	tosl,c
  9141  002830  51F3               	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
  9142  002832  6EFE               	movwf	tosh,c
  9143  002834  6AFF               	clrf	tosu,c
  9144  002836  50FA               	movf	pclath,w,c
  9145  002838  0012               	return		;indir
  9146  00283A                     __end_of_INT1_CallBack:
  9147                           	opt callstack 0
  9148                           
  9149 ;; *************** function _INT1_DefaultInterruptHandler *****************
  9150 ;; Defined at:
  9151 ;;		line 82 in file "mcc_generated_files/ext_int.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;		None
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;		None
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      void 
  9158 ;; Registers used:
  9159 ;;		None
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9169 ;;Total ram usage:        0 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; This function calls:
  9172 ;;		Nothing
  9173 ;; This function is called by:
  9174 ;;		_EXT_INT_Initialize
  9175 ;;		_INT1_CallBack
  9176 ;; This function uses a non-reentrant model
  9177 ;;
  9178                           
  9179                           	psect	text91
  9180  002B74                     __ptext91:
  9181                           	opt callstack 0
  9182  002B74                     _INT1_DefaultInterruptHandler:
  9183                           	opt callstack 21
  9184                           
  9185                           ;incstack = 0
  9186  002B74  0012               	return		;funcret
  9187  002B76                     __end_of_INT1_DefaultInterruptHandler:
  9188                           	opt callstack 0
  9189                           
  9190 ;; *************** function _INT0_ISR *****************
  9191 ;; Defined at:
  9192 ;;		line 34 in file "mcc_generated_files/ext_int.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;		None
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;		None
  9197 ;; Return value:  Size  Location     Type
  9198 ;;                  1    wreg      void 
  9199 ;; Registers used:
  9200 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9201 ;; Tracked objects:
  9202 ;;		On entry : 0/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9210 ;;Total ram usage:        0 bytes
  9211 ;; Hardware stack levels used:    1
  9212 ;; Hardware stack levels required when called:    9
  9213 ;; This function calls:
  9214 ;;		_INT0_CallBack
  9215 ;; This function is called by:
  9216 ;;		_INTERRUPT_InterruptManager
  9217 ;; This function uses a non-reentrant model
  9218 ;;
  9219                           
  9220                           	psect	text92
  9221  002B0E                     __ptext92:
  9222                           	opt callstack 0
  9223  002B0E                     _INT0_ISR:
  9224                           	opt callstack 14
  9225                           
  9226                           ;ext_int.c: 36: (PIR0bits.INT0IF = 0);
  9227                           
  9228                           ;incstack = 0
  9229  002B0E  010E               	movlb	14	; () banked
  9230  002B10  91CA               	bcf	202,0,b	;volatile
  9231                           
  9232                           ; BSR set to: 14
  9233                           ;ext_int.c: 39: INT0_CallBack();
  9234  002B12  EC1D  F014         	call	_INT0_CallBack	;wreg free
  9235  002B16  0012               	return		;funcret
  9236  002B18                     __end_of_INT0_ISR:
  9237                           	opt callstack 0
  9238                           
  9239 ;; *************** function _INT0_CallBack *****************
  9240 ;; Defined at:
  9241 ;;		line 43 in file "mcc_generated_files/ext_int.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;		None
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;		None
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  1    wreg      void 
  9248 ;; Registers used:
  9249 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9250 ;; Tracked objects:
  9251 ;;		On entry : 0/0
  9252 ;;		On exit  : 0/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9259 ;;Total ram usage:        0 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:    8
  9262 ;; This function calls:
  9263 ;;		Absolute function
  9264 ;;		_INT0_Custom_ISR
  9265 ;;		_INT0_DefaultInterruptHandler
  9266 ;; This function is called by:
  9267 ;;		_INT0_ISR
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           	psect	text93
  9272  00283A                     __ptext93:
  9273                           	opt callstack 0
  9274  00283A                     _INT0_CallBack:
  9275                           	opt callstack 14
  9276                           
  9277                           ;ext_int.c: 46: if(INT0_InterruptHandler)
  9278                           
  9279                           ;incstack = 0
  9280  00283A  0100               	movlb	0	; () banked
  9281  00283C  51F4               	movf	_INT0_InterruptHandler& (0+255),w,b
  9282  00283E  11F5               	iorwf	(_INT0_InterruptHandler+1)& (0+255),w,b
  9283  002840  B4D8               	btfsc	status,2,c
  9284  002842  0012               	return	
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;ext_int.c: 47: {;ext_int.c: 48: INT0_InterruptHandler();
  9288  002844  D801               	call	i2u397_48
  9289  002846  0012               	return	
  9290  002848                     i2u397_48:
  9291  002848  0005               	push	
  9292  00284A  6EFA               	movwf	pclath,c
  9293  00284C  51F4               	movf	_INT0_InterruptHandler& (0+255),w,b
  9294  00284E  6EFD               	movwf	tosl,c
  9295  002850  51F5               	movf	(_INT0_InterruptHandler+1)& (0+255),w,b
  9296  002852  6EFE               	movwf	tosh,c
  9297  002854  6AFF               	clrf	tosu,c
  9298  002856  50FA               	movf	pclath,w,c
  9299  002858  0012               	return		;indir
  9300  00285A                     __end_of_INT0_CallBack:
  9301                           	opt callstack 0
  9302                           
  9303 ;; *************** function _INT0_Custom_ISR *****************
  9304 ;; Defined at:
  9305 ;;		line 33 in file "main.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;		None
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  index           1   15[COMRAM] unsigned char 
  9310 ;; Return value:  Size  Location     Type
  9311 ;;                  1    wreg      void 
  9312 ;; Registers used:
  9313 ;;		wreg, status,2, status,0, cstack
  9314 ;; Tracked objects:
  9315 ;;		On entry : 0/0
  9316 ;;		On exit  : 0/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9323 ;;Total ram usage:        1 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:    7
  9326 ;; This function calls:
  9327 ;;		_I2C_SendCommand
  9328 ;;		_ext_rf_runcmd
  9329 ;; This function is called by:
  9330 ;;		_main
  9331 ;;		_INT0_CallBack
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335                           	psect	text94
  9336  002934                     __ptext94:
  9337                           	opt callstack 0
  9338  002934                     _INT0_Custom_ISR:
  9339                           	opt callstack 14
  9340                           
  9341                           ;main.c: 35: unsigned char index = I2C_SendCommand(EXT_TARGET_RF_RX,0x50);
  9342                           
  9343                           ;incstack = 0
  9344  002934  0E50               	movlw	80
  9345  002936  6E3C               	movwf	I2C_SendCommand@CMD,c
  9346  002938  502A               	movf	_EXT_TARGET_RF_RX,w,c
  9347  00293A  EC85  F010         	call	_I2C_SendCommand
  9348  00293E  6E40               	movwf	INT0_Custom_ISR@index,c
  9349                           
  9350                           ;main.c: 37: if(index == 0x01) {
  9351  002940  0440               	decf	INT0_Custom_ISR@index,w,c
  9352  002942  A4D8               	btfss	status,2,c
  9353  002944  0012               	return	
  9354                           
  9355                           ;main.c: 38: ext_rf_runcmd();
  9356  002946  EC0C  F00F         	call	_ext_rf_runcmd	;wreg free
  9357  00294A  0012               	return		;funcret
  9358  00294C                     __end_of_INT0_Custom_ISR:
  9359                           	opt callstack 0
  9360                           
  9361 ;; *************** function _INT0_DefaultInterruptHandler *****************
  9362 ;; Defined at:
  9363 ;;		line 56 in file "mcc_generated_files/ext_int.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;		None
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;		None
  9368 ;; Return value:  Size  Location     Type
  9369 ;;                  1    wreg      void 
  9370 ;; Registers used:
  9371 ;;		None
  9372 ;; Tracked objects:
  9373 ;;		On entry : 0/0
  9374 ;;		On exit  : 0/0
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9381 ;;Total ram usage:        0 bytes
  9382 ;; Hardware stack levels used:    1
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		_EXT_INT_Initialize
  9387 ;;		_INT0_CallBack
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           	psect	text95
  9392  002B76                     __ptext95:
  9393                           	opt callstack 0
  9394  002B76                     _INT0_DefaultInterruptHandler:
  9395                           	opt callstack 21
  9396                           
  9397                           ;incstack = 0
  9398  002B76  0012               	return		;funcret
  9399  002B78                     __end_of_INT0_DefaultInterruptHandler:
  9400                           	opt callstack 0
  9401                           
  9402 ;; *************** function _ext_rf_runcmd *****************
  9403 ;; Defined at:
  9404 ;;		line 19 in file "ext_rf_receiver.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;		None
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;  dx              1   14[COMRAM] unsigned char 
  9409 ;; Return value:  Size  Location     Type
  9410 ;;                  1    wreg      void 
  9411 ;; Registers used:
  9412 ;;		wreg, status,2, status,0, cstack
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9422 ;;Total ram usage:        1 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    6
  9425 ;; This function calls:
  9426 ;;		_I2C_SendCommand
  9427 ;;		_MRF89XA_SendData
  9428 ;;		_ToggleLed
  9429 ;;		i2_SetLedBlink
  9430 ;; This function is called by:
  9431 ;;		_INT0_Custom_ISR
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           	psect	text96
  9436  001E18                     __ptext96:
  9437                           	opt callstack 0
  9438  001E18                     _ext_rf_runcmd:
  9439                           	opt callstack 14
  9440                           
  9441                           ;ext_rf_receiver.c: 21: unsigned char dx = I2C_SendCommand(EXT_TARGET_RF_RX, 0x51);
  9442                           
  9443                           ;incstack = 0
  9444  001E18  0E51               	movlw	81
  9445  001E1A  6E3C               	movwf	I2C_SendCommand@CMD,c
  9446  001E1C  502A               	movf	_EXT_TARGET_RF_RX,w,c
  9447  001E1E  EC85  F010         	call	_I2C_SendCommand
  9448  001E22  6E3F               	movwf	ext_rf_runcmd@dx,c
  9449                           
  9450                           ;ext_rf_receiver.c: 22: if((dx & 0b0001) > 0)
  9451  001E24  A03F               	btfss	ext_rf_runcmd@dx,0,c
  9452  001E26  D007               	goto	i2l1692
  9453                           
  9454                           ;ext_rf_receiver.c: 23: ToggleLed(RGB_R);
  9455  001E28  0E00               	movlw	0
  9456  001E2A  6E32               	movwf	ToggleLed@ledIndex+1,c
  9457  001E2C  0E03               	movlw	3
  9458  001E2E  6E31               	movwf	ToggleLed@ledIndex,c
  9459  001E30  EC3D  F00E         	call	_ToggleLed	;wreg free
  9460  001E34  0012               	return	
  9461  001E36                     i2l1692:
  9462                           
  9463                           ;ext_rf_receiver.c: 24: else if ((dx & 0b0010) > 0)
  9464  001E36  A23F               	btfss	ext_rf_runcmd@dx,1,c
  9465  001E38  D007               	goto	i2l1694
  9466                           
  9467                           ;ext_rf_receiver.c: 25: ToggleLed(RGB_G);
  9468  001E3A  0E00               	movlw	0
  9469  001E3C  6E32               	movwf	ToggleLed@ledIndex+1,c
  9470  001E3E  0E04               	movlw	4
  9471  001E40  6E31               	movwf	ToggleLed@ledIndex,c
  9472  001E42  EC3D  F00E         	call	_ToggleLed	;wreg free
  9473  001E46  0012               	return	
  9474  001E48                     i2l1694:
  9475                           
  9476                           ;ext_rf_receiver.c: 26: else if ((dx & 0b0100) > 0)
  9477  001E48  A43F               	btfss	ext_rf_runcmd@dx,2,c
  9478  001E4A  D007               	goto	i2l1696
  9479                           
  9480                           ;ext_rf_receiver.c: 27: ToggleLed(RGB_B);
  9481  001E4C  0E00               	movlw	0
  9482  001E4E  6E32               	movwf	ToggleLed@ledIndex+1,c
  9483  001E50  0E05               	movlw	5
  9484  001E52  6E31               	movwf	ToggleLed@ledIndex,c
  9485  001E54  EC3D  F00E         	call	_ToggleLed	;wreg free
  9486  001E58  0012               	return	
  9487  001E5A                     i2l1696:
  9488                           
  9489                           ;ext_rf_receiver.c: 28: else if ((dx & 0b1000) > 0)
  9490  001E5A  A63F               	btfss	ext_rf_runcmd@dx,3,c
  9491  001E5C  0012               	return	
  9492                           
  9493                           ;ext_rf_receiver.c: 29: {;ext_rf_receiver.c: 31: SetLedBlink(B,20,20,0,-1);
  9494  001E5E  0E00               	movlw	0
  9495  001E60  6E32               	movwf	i2SetLedBlink@ledIndex+1,c
  9496  001E62  0E02               	movlw	2
  9497  001E64  6E31               	movwf	i2SetLedBlink@ledIndex,c
  9498  001E66  0E00               	movlw	0
  9499  001E68  6E34               	movwf	i2SetLedBlink@OnTime+1,c
  9500  001E6A  0E14               	movlw	20
  9501  001E6C  6E33               	movwf	i2SetLedBlink@OnTime,c
  9502  001E6E  0E00               	movlw	0
  9503  001E70  6E36               	movwf	i2SetLedBlink@OffTime+1,c
  9504  001E72  0E14               	movlw	20
  9505  001E74  6E35               	movwf	i2SetLedBlink@OffTime,c
  9506  001E76  0E00               	movlw	0
  9507  001E78  6E38               	movwf	i2SetLedBlink@StartAfter+1,c
  9508  001E7A  0E00               	movlw	0
  9509  001E7C  6E37               	movwf	i2SetLedBlink@StartAfter,c
  9510  001E7E  0EFF               	movlw	255
  9511  001E80  6E3A               	movwf	i2SetLedBlink@BlinkCount+1,c
  9512  001E82  6839               	setf	i2SetLedBlink@BlinkCount,c
  9513  001E84  EC2E  F00B         	call	i2_SetLedBlink	;wreg free
  9514                           
  9515                           ;ext_rf_receiver.c: 32: MRF89XA_SendData(0x41, 0x55);
  9516  001E88  0E55               	movlw	85
  9517  001E8A  6E3A               	movwf	MRF89XA_SendData@Data,c
  9518  001E8C  0E41               	movlw	65
  9519  001E8E  EC79  F012         	call	_MRF89XA_SendData
  9520                           
  9521                           ;ext_rf_receiver.c: 34: SetLedBlink(B,20,0,0,1);
  9522  001E92  0E00               	movlw	0
  9523  001E94  6E32               	movwf	i2SetLedBlink@ledIndex+1,c
  9524  001E96  0E02               	movlw	2
  9525  001E98  6E31               	movwf	i2SetLedBlink@ledIndex,c
  9526  001E9A  0E00               	movlw	0
  9527  001E9C  6E34               	movwf	i2SetLedBlink@OnTime+1,c
  9528  001E9E  0E14               	movlw	20
  9529  001EA0  6E33               	movwf	i2SetLedBlink@OnTime,c
  9530  001EA2  0E00               	movlw	0
  9531  001EA4  6E36               	movwf	i2SetLedBlink@OffTime+1,c
  9532  001EA6  0E00               	movlw	0
  9533  001EA8  6E35               	movwf	i2SetLedBlink@OffTime,c
  9534  001EAA  0E00               	movlw	0
  9535  001EAC  6E38               	movwf	i2SetLedBlink@StartAfter+1,c
  9536  001EAE  0E00               	movlw	0
  9537  001EB0  6E37               	movwf	i2SetLedBlink@StartAfter,c
  9538  001EB2  0E00               	movlw	0
  9539  001EB4  6E3A               	movwf	i2SetLedBlink@BlinkCount+1,c
  9540  001EB6  0E01               	movlw	1
  9541  001EB8  6E39               	movwf	i2SetLedBlink@BlinkCount,c
  9542  001EBA  EC2E  F00B         	call	i2_SetLedBlink	;wreg free
  9543  001EBE  0012               	return	
  9544  001EC0                     __end_of_ext_rf_runcmd:
  9545                           	opt callstack 0
  9546                           
  9547 ;; *************** function _ToggleLed *****************
  9548 ;; Defined at:
  9549 ;;		line 47 in file "LedBlink.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;  ledIndex        2    0[COMRAM] int 
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  2    0[COMRAM] int 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9563 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9566 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9567 ;;Total ram usage:        3 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; This function calls:
  9570 ;;		Nothing
  9571 ;; This function is called by:
  9572 ;;		_ext_rf_runcmd
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text97
  9577  001C7A                     __ptext97:
  9578                           	opt callstack 0
  9579  001C7A                     _ToggleLed:
  9580                           	opt callstack 19
  9581                           
  9582                           ;LedBlink.c: 48: if (ledIndex == R) {
  9583                           
  9584                           ;incstack = 0
  9585  001C7A  5031               	movf	ToggleLed@ledIndex,w,c
  9586  001C7C  1032               	iorwf	ToggleLed@ledIndex+1,w,c
  9587  001C7E  A4D8               	btfss	status,2,c
  9588  001C80  D00E               	goto	i2l4742
  9589                           
  9590                           ;LedBlink.c: 49: LATDbits.LATD5 = !LATDbits.LATD5;
  9591  001C82  BA86               	btfsc	3974,5,c	;volatile
  9592  001C84  D003               	goto	i2u302_40
  9593  001C86  6A33               	clrf	??_ToggleLed& (0+255),c
  9594  001C88  2A33               	incf	??_ToggleLed& (0+255),f,c
  9595  001C8A  D001               	goto	i2u303_48
  9596  001C8C                     i2u302_40:
  9597  001C8C  6A33               	clrf	??_ToggleLed& (0+255),c
  9598  001C8E                     i2u303_48:
  9599  001C8E  3A33               	swapf	??_ToggleLed,f,c
  9600  001C90  4633               	rlncf	??_ToggleLed,f,c
  9601  001C92  5086               	movf	3974,w,c	;volatile
  9602  001C94  1833               	xorwf	??_ToggleLed,w,c
  9603  001C96  0BDF               	andlw	-33
  9604  001C98  1833               	xorwf	??_ToggleLed,w,c
  9605  001C9A  6E86               	movwf	3974,c	;volatile
  9606                           
  9607                           ;LedBlink.c: 50: } else if (ledIndex == G) {
  9608  001C9C  0012               	return	
  9609  001C9E                     i2l4742:
  9610  001C9E  0431               	decf	ToggleLed@ledIndex,w,c
  9611  001CA0  1032               	iorwf	ToggleLed@ledIndex+1,w,c
  9612  001CA2  A4D8               	btfss	status,2,c
  9613  001CA4  D00F               	goto	i2l4746
  9614                           
  9615                           ;LedBlink.c: 51: LATDbits.LATD6 = !LATDbits.LATD6;
  9616  001CA6  BC86               	btfsc	3974,6,c	;volatile
  9617  001CA8  D003               	goto	i2u305_40
  9618  001CAA  6A33               	clrf	??_ToggleLed& (0+255),c
  9619  001CAC  2A33               	incf	??_ToggleLed& (0+255),f,c
  9620  001CAE  D001               	goto	i2u306_48
  9621  001CB0                     i2u305_40:
  9622  001CB0  6A33               	clrf	??_ToggleLed& (0+255),c
  9623  001CB2                     i2u306_48:
  9624  001CB2  3A33               	swapf	??_ToggleLed,f,c
  9625  001CB4  4633               	rlncf	??_ToggleLed,f,c
  9626  001CB6  4633               	rlncf	??_ToggleLed,f,c
  9627  001CB8  5086               	movf	3974,w,c	;volatile
  9628  001CBA  1833               	xorwf	??_ToggleLed,w,c
  9629  001CBC  0BBF               	andlw	-65
  9630  001CBE  1833               	xorwf	??_ToggleLed,w,c
  9631  001CC0  6E86               	movwf	3974,c	;volatile
  9632                           
  9633                           ;LedBlink.c: 52: } else if (ledIndex == B) {
  9634  001CC2  0012               	return	
  9635  001CC4                     i2l4746:
  9636  001CC4  0E02               	movlw	2
  9637  001CC6  1831               	xorwf	ToggleLed@ledIndex,w,c
  9638  001CC8  1032               	iorwf	ToggleLed@ledIndex+1,w,c
  9639  001CCA  A4D8               	btfss	status,2,c
  9640  001CCC  D00E               	goto	i2l4750
  9641                           
  9642                           ;LedBlink.c: 53: LATDbits.LATD7 = !LATDbits.LATD7;
  9643  001CCE  BE86               	btfsc	3974,7,c	;volatile
  9644  001CD0  D003               	goto	i2u308_40
  9645  001CD2  6A33               	clrf	??_ToggleLed& (0+255),c
  9646  001CD4  2A33               	incf	??_ToggleLed& (0+255),f,c
  9647  001CD6  D001               	goto	i2u309_48
  9648  001CD8                     i2u308_40:
  9649  001CD8  6A33               	clrf	??_ToggleLed& (0+255),c
  9650  001CDA                     i2u309_48:
  9651  001CDA  3233               	rrcf	??_ToggleLed,f,c
  9652  001CDC  3233               	rrcf	??_ToggleLed,f,c
  9653  001CDE  5086               	movf	3974,w,c	;volatile
  9654  001CE0  1833               	xorwf	??_ToggleLed,w,c
  9655  001CE2  0B7F               	andlw	-129
  9656  001CE4  1833               	xorwf	??_ToggleLed,w,c
  9657  001CE6  6E86               	movwf	3974,c	;volatile
  9658                           
  9659                           ;LedBlink.c: 54: } else if (ledIndex == RGB_R) {
  9660  001CE8  0012               	return	
  9661  001CEA                     i2l4750:
  9662  001CEA  0E03               	movlw	3
  9663  001CEC  1831               	xorwf	ToggleLed@ledIndex,w,c
  9664  001CEE  1032               	iorwf	ToggleLed@ledIndex+1,w,c
  9665  001CF0  A4D8               	btfss	status,2,c
  9666  001CF2  D00E               	goto	i2l4754
  9667                           
  9668                           ;LedBlink.c: 55: LATEbits.LATE2 = !LATEbits.LATE2;
  9669  001CF4  B487               	btfsc	3975,2,c	;volatile
  9670  001CF6  D003               	goto	i2u311_40
  9671  001CF8  6A33               	clrf	??_ToggleLed& (0+255),c
  9672  001CFA  2A33               	incf	??_ToggleLed& (0+255),f,c
  9673  001CFC  D001               	goto	i2u312_48
  9674  001CFE                     i2u311_40:
  9675  001CFE  6A33               	clrf	??_ToggleLed& (0+255),c
  9676  001D00                     i2u312_48:
  9677  001D00  4633               	rlncf	??_ToggleLed,f,c
  9678  001D02  4633               	rlncf	??_ToggleLed,f,c
  9679  001D04  5087               	movf	3975,w,c	;volatile
  9680  001D06  1833               	xorwf	??_ToggleLed,w,c
  9681  001D08  0BFB               	andlw	-5
  9682  001D0A  1833               	xorwf	??_ToggleLed,w,c
  9683  001D0C  6E87               	movwf	3975,c	;volatile
  9684                           
  9685                           ;LedBlink.c: 56: } else if (ledIndex == RGB_G) {
  9686  001D0E  0012               	return	
  9687  001D10                     i2l4754:
  9688  001D10  0E04               	movlw	4
  9689  001D12  1831               	xorwf	ToggleLed@ledIndex,w,c
  9690  001D14  1032               	iorwf	ToggleLed@ledIndex+1,w,c
  9691  001D16  A4D8               	btfss	status,2,c
  9692  001D18  D00D               	goto	i2l4758
  9693                           
  9694                           ;LedBlink.c: 57: LATEbits.LATE1 = !LATEbits.LATE1;
  9695  001D1A  B287               	btfsc	3975,1,c	;volatile
  9696  001D1C  D003               	goto	i2u314_40
  9697  001D1E  6A33               	clrf	??_ToggleLed& (0+255),c
  9698  001D20  2A33               	incf	??_ToggleLed& (0+255),f,c
  9699  001D22  D001               	goto	i2u315_48
  9700  001D24                     i2u314_40:
  9701  001D24  6A33               	clrf	??_ToggleLed& (0+255),c
  9702  001D26                     i2u315_48:
  9703  001D26  4633               	rlncf	??_ToggleLed,f,c
  9704  001D28  5087               	movf	3975,w,c	;volatile
  9705  001D2A  1833               	xorwf	??_ToggleLed,w,c
  9706  001D2C  0BFD               	andlw	-3
  9707  001D2E  1833               	xorwf	??_ToggleLed,w,c
  9708  001D30  6E87               	movwf	3975,c	;volatile
  9709                           
  9710                           ;LedBlink.c: 58: } else if (ledIndex == RGB_B) {
  9711  001D32  0012               	return	
  9712  001D34                     i2l4758:
  9713  001D34  0E05               	movlw	5
  9714  001D36  1831               	xorwf	ToggleLed@ledIndex,w,c
  9715  001D38  1032               	iorwf	ToggleLed@ledIndex+1,w,c
  9716  001D3A  A4D8               	btfss	status,2,c
  9717  001D3C  0012               	return	
  9718                           
  9719                           ;LedBlink.c: 59: LATEbits.LATE0 = !LATEbits.LATE0;
  9720  001D3E  B087               	btfsc	3975,0,c	;volatile
  9721  001D40  D003               	goto	i2u317_40
  9722  001D42  6A33               	clrf	??_ToggleLed& (0+255),c
  9723  001D44  2A33               	incf	??_ToggleLed& (0+255),f,c
  9724  001D46  D001               	goto	i2u318_48
  9725  001D48                     i2u317_40:
  9726  001D48  6A33               	clrf	??_ToggleLed& (0+255),c
  9727  001D4A                     i2u318_48:
  9728  001D4A  5087               	movf	3975,w,c	;volatile
  9729  001D4C  1833               	xorwf	??_ToggleLed,w,c
  9730  001D4E  0BFE               	andlw	-2
  9731  001D50  1833               	xorwf	??_ToggleLed,w,c
  9732  001D52  6E87               	movwf	3975,c	;volatile
  9733  001D54  0012               	return	
  9734  001D56                     __end_of_ToggleLed:
  9735                           	opt callstack 0
  9736                           
  9737 ;; *************** function _MRF89XA_SendData *****************
  9738 ;; Defined at:
  9739 ;;		line 164 in file "MRF89XA.c"
  9740 ;; Parameters:    Size  Location     Type
  9741 ;;  TargetAddres    1    wreg     unsigned char 
  9742 ;;  Data            1    9[COMRAM] unsigned char 
  9743 ;; Auto vars:     Size  Location     Type
  9744 ;;  TargetAddres    1   10[COMRAM] unsigned char 
  9745 ;; Return value:  Size  Location     Type
  9746 ;;                  1    wreg      void 
  9747 ;; Registers used:
  9748 ;;		wreg, status,2, status,0, cstack
  9749 ;; Tracked objects:
  9750 ;;		On entry : 0/0
  9751 ;;		On exit  : 0/0
  9752 ;;		Unchanged: 0/0
  9753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9754 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9758 ;;Total ram usage:        2 bytes
  9759 ;; Hardware stack levels used:    1
  9760 ;; Hardware stack levels required when called:    5
  9761 ;; This function calls:
  9762 ;;		_MRF89XA_IsTxDone
  9763 ;;		_MRF89XA_WriteFifo
  9764 ;;		i2_Delay_Xms
  9765 ;; This function is called by:
  9766 ;;		_ext_rf_runcmd
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           	psect	text98
  9771  0024F2                     __ptext98:
  9772                           	opt callstack 0
  9773  0024F2                     _MRF89XA_SendData:
  9774                           	opt callstack 14
  9775                           
  9776                           ;incstack = 0
  9777                           ;MRF89XA_SendData@TargetAddress stored from wreg
  9778  0024F2  6E3B               	movwf	MRF89XA_SendData@TargetAddress,c
  9779                           
  9780                           ;MRF89XA.c: 165: MRF89XA_WriteFifo(TargetAddress);
  9781  0024F4  503B               	movf	MRF89XA_SendData@TargetAddress,w,c
  9782  0024F6  EC8C  F015         	call	_MRF89XA_WriteFifo
  9783                           
  9784                           ;MRF89XA.c: 166: MRF89XA_WriteFifo(Data);
  9785  0024FA  503A               	movf	MRF89XA_SendData@Data,w,c
  9786  0024FC  EC8C  F015         	call	_MRF89XA_WriteFifo
  9787                           
  9788                           ;MRF89XA.c: 168: while(!MRF89XA_IsTxDone()) {
  9789  002500  D00A               	goto	i2l2069
  9790  002502                     i2l4764:
  9791                           
  9792                           ;MRF89XA.c: 169: Delay_Xms(1);
  9793  002502  0E01               	movlw	1
  9794  002504  6E31               	movwf	i2Delay_Xms@delay,c
  9795  002506  0E00               	movlw	0
  9796  002508  6E32               	movwf	i2Delay_Xms@delay+1,c
  9797  00250A  0E00               	movlw	0
  9798  00250C  6E33               	movwf	i2Delay_Xms@delay+2,c
  9799  00250E  0E00               	movlw	0
  9800  002510  6E34               	movwf	i2Delay_Xms@delay+3,c
  9801  002512  EC98  F011         	call	i2_Delay_Xms	;wreg free
  9802  002516                     i2l2069:
  9803  002516  ECD2  F014         	call	_MRF89XA_IsTxDone	;wreg free
  9804  00251A  0900               	iorlw	0
  9805  00251C  A4D8               	btfss	status,2,c
  9806  00251E  0012               	return	
  9807  002520  D7F0               	goto	i2l4764
  9808  002522                     __end_of_MRF89XA_SendData:
  9809                           	opt callstack 0
  9810                           
  9811 ;; *************** function _MRF89XA_WriteFifo *****************
  9812 ;; Defined at:
  9813 ;;		line 135 in file "MRF89XA.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;  Data            1    wreg     unsigned char 
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;  Data            1    4[COMRAM] unsigned char 
  9818 ;; Return value:  Size  Location     Type
  9819 ;;                  1    wreg      unsigned char 
  9820 ;; Registers used:
  9821 ;;		wreg, status,2, cstack
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9830 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9831 ;;Total ram usage:        1 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; Hardware stack levels required when called:    3
  9834 ;; This function calls:
  9835 ;;		_MRF89XA_ExchangeFifo
  9836 ;; This function is called by:
  9837 ;;		_MRF89XA_SendData
  9838 ;;		_MRF89XA_SendCommand
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           	psect	text99
  9843  002B18                     __ptext99:
  9844                           	opt callstack 0
  9845  002B18                     _MRF89XA_WriteFifo:
  9846                           	opt callstack 15
  9847                           
  9848                           ;incstack = 0
  9849                           ;MRF89XA_WriteFifo@Data stored from wreg
  9850  002B18  6E35               	movwf	MRF89XA_WriteFifo@Data,c
  9851                           
  9852                           ;MRF89XA.c: 136: return MRF89XA_ExchangeFifo(Data);;	Return value of _MRF89XA_WriteFifo 
      +                          is never used
  9853  002B1A  5035               	movf	MRF89XA_WriteFifo@Data,w,c
  9854  002B1C  ECC8  F014         	call	_MRF89XA_ExchangeFifo
  9855  002B20  0012               	return		;funcret
  9856  002B22                     __end_of_MRF89XA_WriteFifo:
  9857                           	opt callstack 0
  9858                           
  9859 ;; *************** function _MRF89XA_ExchangeFifo *****************
  9860 ;; Defined at:
  9861 ;;		line 139 in file "MRF89XA.c"
  9862 ;; Parameters:    Size  Location     Type
  9863 ;;  Data            1    wreg     unsigned char 
  9864 ;; Auto vars:     Size  Location     Type
  9865 ;;  Data            1    2[COMRAM] unsigned char 
  9866 ;;  ret             1    3[COMRAM] unsigned char 
  9867 ;; Return value:  Size  Location     Type
  9868 ;;                  1    wreg      unsigned char 
  9869 ;; Registers used:
  9870 ;;		wreg, status,2, cstack
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9877 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9879 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9880 ;;Total ram usage:        2 bytes
  9881 ;; Hardware stack levels used:    1
  9882 ;; Hardware stack levels required when called:    2
  9883 ;; This function calls:
  9884 ;;		i2_MRF89XA_SPI_ExchangeByte
  9885 ;; This function is called by:
  9886 ;;		_MRF89XA_WriteFifo
  9887 ;;		_MRF89XA_ReadFifo
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           	psect	text100
  9892  002990                     __ptext100:
  9893                           	opt callstack 0
  9894  002990                     _MRF89XA_ExchangeFifo:
  9895                           	opt callstack 15
  9896                           
  9897                           ;incstack = 0
  9898                           ;MRF89XA_ExchangeFifo@Data stored from wreg
  9899  002990  6E33               	movwf	MRF89XA_ExchangeFifo@Data,c
  9900                           
  9901                           ;MRF89XA.c: 140: do { LATDbits.LATD4 = 1; } while(0);
  9902  002992  8886               	bsf	3974,4,c	;volatile
  9903                           
  9904                           ;MRF89XA.c: 141: do { LATDbits.LATD3 = 0; } while(0);
  9905  002994  9686               	bcf	3974,3,c	;volatile
  9906                           
  9907                           ;MRF89XA.c: 142: unsigned char ret = MRF89XA_SPI_ExchangeByte(Data);
  9908  002996  5033               	movf	MRF89XA_ExchangeFifo@Data,w,c
  9909  002998  EC91  F015         	call	i2_MRF89XA_SPI_ExchangeByte
  9910  00299C  6E34               	movwf	MRF89XA_ExchangeFifo@ret,c
  9911  00299E  8686               	bsf	3974,3,c	;volatile
  9912                           
  9913                           ;MRF89XA.c: 144: return ret;
  9914  0029A0  5034               	movf	MRF89XA_ExchangeFifo@ret,w,c
  9915  0029A2  0012               	return		;funcret
  9916  0029A4                     __end_of_MRF89XA_ExchangeFifo:
  9917                           	opt callstack 0
  9918                           
  9919 ;; *************** function _MRF89XA_IsTxDone *****************
  9920 ;; Defined at:
  9921 ;;		line 208 in file "MRF89XA.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;  reg             1    7[COMRAM] unsigned char 
  9926 ;; Return value:  Size  Location     Type
  9927 ;;                  1    wreg      unsigned char 
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9938 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9939 ;;Total ram usage:        1 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    4
  9942 ;; This function calls:
  9943 ;;		_MRF89XA_ReadConfig
  9944 ;; This function is called by:
  9945 ;;		_MRF89XA_SendData
  9946 ;;		_MRF89XA_SendCommand
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           	psect	text101
  9951  0029A4                     __ptext101:
  9952                           	opt callstack 0
  9953  0029A4                     _MRF89XA_IsTxDone:
  9954                           	opt callstack 14
  9955                           
  9956                           ;MRF89XA.c: 209: unsigned char reg = MRF89XA_ReadConfig(0x0E);
  9957                           
  9958                           ;incstack = 0
  9959  0029A4  0E0E               	movlw	14
  9960  0029A6  ECBD  F014         	call	_MRF89XA_ReadConfig
  9961  0029AA  6E38               	movwf	MRF89XA_IsTxDone@reg,c
  9962                           
  9963                           ;MRF89XA.c: 210: return (reg & 0x20) > 0;
  9964  0029AC  AA38               	btfss	MRF89XA_IsTxDone@reg,5,c
  9965  0029AE  D002               	goto	i2u291_40
  9966  0029B0  0E01               	movlw	1
  9967  0029B2  0012               	return	
  9968  0029B4                     i2u291_40:
  9969  0029B4  0E00               	movlw	0
  9970  0029B6  0012               	return		;funcret
  9971  0029B8                     __end_of_MRF89XA_IsTxDone:
  9972                           	opt callstack 0
  9973                           
  9974 ;; *************** function _MRF89XA_ReadConfig *****************
  9975 ;; Defined at:
  9976 ;;		line 127 in file "MRF89XA.c"
  9977 ;; Parameters:    Size  Location     Type
  9978 ;;  Address         1    wreg     unsigned char 
  9979 ;; Auto vars:     Size  Location     Type
  9980 ;;  Address         1    6[COMRAM] unsigned char 
  9981 ;; Return value:  Size  Location     Type
  9982 ;;                  1    wreg      unsigned char 
  9983 ;; Registers used:
  9984 ;;		wreg, status,2, status,0, cstack
  9985 ;; Tracked objects:
  9986 ;;		On entry : 0/0
  9987 ;;		On exit  : 0/0
  9988 ;;		Unchanged: 0/0
  9989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9993 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9994 ;;Total ram usage:        1 bytes
  9995 ;; Hardware stack levels used:    1
  9996 ;; Hardware stack levels required when called:    3
  9997 ;; This function calls:
  9998 ;;		i2_MRF89XA_ExchangeConfig_A
  9999 ;;		i2_MRF89XA_GetAddress
 10000 ;; This function is called by:
 10001 ;;		_MRF89XA_IsTxDone
 10002 ;;		_MRF89XA_IsCRCOK
 10003 ;;		_MRF89XA_IsFifoEmpty
 10004 ;;		_MRF89XA_IsFifoFull
 10005 ;;		_MRF89XA_IsFifoOverrun
 10006 ;; This function uses a non-reentrant model
 10007 ;;
 10008                           
 10009                           	psect	text102
 10010  00297A                     __ptext102:
 10011                           	opt callstack 0
 10012  00297A                     _MRF89XA_ReadConfig:
 10013                           	opt callstack 14
 10014                           
 10015                           ;incstack = 0
 10016                           ;MRF89XA_ReadConfig@Address stored from wreg
 10017  00297A  6E37               	movwf	MRF89XA_ReadConfig@Address,c
 10018                           
 10019                           ;MRF89XA.c: 128: return MRF89XA_ExchangeConfig_A(MRF89XA_GetAddress(Address, 1), 0xFF);
 10020  00297C  0EFF               	movlw	255
 10021  00297E  6E34               	movwf	i2MRF89XA_ExchangeConfig_A@Data,c
 10022  002980  0E01               	movlw	1
 10023  002982  6E31               	movwf	i2MRF89XA_GetAddress@Read,c
 10024  002984  5037               	movf	MRF89XA_ReadConfig@Address,w,c
 10025  002986  ECA6  F014         	call	i2_MRF89XA_GetAddress
 10026  00298A  EC81  F014         	call	i2_MRF89XA_ExchangeConfig_A
 10027  00298E  0012               	return		;funcret
 10028  002990                     __end_of_MRF89XA_ReadConfig:
 10029                           	opt callstack 0
 10030                           
 10031 ;; *************** function i2_MRF89XA_GetAddress *****************
 10032 ;; Defined at:
 10033 ;;		line 183 in file "MRF89XA.c"
 10034 ;; Parameters:    Size  Location     Type
 10035 ;;  Address         1    wreg     unsigned char 
 10036 ;;  Read            1    0[COMRAM] unsigned char 
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;  Address         1    1[COMRAM] unsigned char 
 10039 ;;  MRF89XA_GetA    1    2[COMRAM] unsigned char 
 10040 ;; Return value:  Size  Location     Type
 10041 ;;                  1    wreg      unsigned char 
 10042 ;; Registers used:
 10043 ;;		wreg, status,2, status,0
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10049 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10052 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10053 ;;Total ram usage:        3 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; This function calls:
 10056 ;;		Nothing
 10057 ;; This function is called by:
 10058 ;;		_MRF89XA_ReadConfig
 10059 ;; This function uses a non-reentrant model
 10060 ;;
 10061                           
 10062                           	psect	text103
 10063  00294C                     __ptext103:
 10064                           	opt callstack 0
 10065  00294C                     i2_MRF89XA_GetAddress:
 10066                           	opt callstack 16
 10067                           
 10068                           ;incstack = 0
 10069                           ;i2MRF89XA_GetAddress@Address stored from wreg
 10070  00294C  6E32               	movwf	i2MRF89XA_GetAddress@Address,c
 10071                           
 10072                           ;MRF89XA.c: 184: unsigned char ret = Address << 1;
 10073  00294E  5032               	movf	i2MRF89XA_GetAddress@Address,w,c
 10074  002950  2432               	addwf	i2MRF89XA_GetAddress@Address,w,c
 10075  002952  6E33               	movwf	i2MRF89XA_GetAddress@ret,c
 10076                           
 10077                           ;MRF89XA.c: 185: if(Read != 0) {
 10078  002954  5031               	movf	i2MRF89XA_GetAddress@Read,w,c
 10079  002956  B4D8               	btfsc	status,2,c
 10080  002958  D003               	goto	i2l4584
 10081                           
 10082                           ;MRF89XA.c: 186: ret = ret | 0b01000000;
 10083  00295A  5033               	movf	i2MRF89XA_GetAddress@ret,w,c
 10084  00295C  0940               	iorlw	64
 10085  00295E  6E33               	movwf	i2MRF89XA_GetAddress@ret,c
 10086  002960                     i2l4584:
 10087                           
 10088                           ;MRF89XA.c: 189: };MRF89XA.c: 190: return ret;
 10089  002960  5033               	movf	i2MRF89XA_GetAddress@ret,w,c
 10090  002962  0012               	return		;funcret
 10091  002964                     __end_ofi2_MRF89XA_GetAddress:
 10092                           	opt callstack 0
 10093                           
 10094 ;; *************** function i2_MRF89XA_ExchangeConfig_A *****************
 10095 ;; Defined at:
 10096 ;;		line 155 in file "MRF89XA.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;  Address         1    wreg     unsigned char 
 10099 ;;  Data            1    3[COMRAM] unsigned char 
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;  Address         1    4[COMRAM] unsigned char 
 10102 ;;  MRF89XA_Exch    1    5[COMRAM] unsigned char 
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  1    wreg      unsigned char 
 10105 ;; Registers used:
 10106 ;;		wreg, status,2, cstack
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10112 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10115 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10116 ;;Total ram usage:        3 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; Hardware stack levels required when called:    2
 10119 ;; This function calls:
 10120 ;;		i2_MRF89XA_SPI_ExchangeByte
 10121 ;; This function is called by:
 10122 ;;		_MRF89XA_ReadConfig
 10123 ;; This function uses a non-reentrant model
 10124 ;;
 10125                           
 10126                           	psect	text104
 10127  002902                     __ptext104:
 10128                           	opt callstack 0
 10129  002902                     i2_MRF89XA_ExchangeConfig_A:
 10130                           	opt callstack 14
 10131                           
 10132                           ;incstack = 0
 10133                           ;i2MRF89XA_ExchangeConfig_A@Address stored from wreg
 10134  002902  6E35               	movwf	i2MRF89XA_ExchangeConfig_A@Address,c
 10135                           
 10136                           ;MRF89XA.c: 156: do { LATDbits.LATD3 = 1; } while(0);
 10137  002904  8686               	bsf	3974,3,c	;volatile
 10138                           
 10139                           ;MRF89XA.c: 157: do { LATDbits.LATD4 = 0; } while(0);
 10140  002906  9886               	bcf	3974,4,c	;volatile
 10141                           
 10142                           ;MRF89XA.c: 158: MRF89XA_SPI_ExchangeByte(Address);
 10143  002908  5035               	movf	i2MRF89XA_ExchangeConfig_A@Address,w,c
 10144  00290A  EC91  F015         	call	i2_MRF89XA_SPI_ExchangeByte
 10145                           
 10146                           ;MRF89XA.c: 159: unsigned char ret = MRF89XA_SPI_ExchangeByte(Data);
 10147  00290E  5034               	movf	i2MRF89XA_ExchangeConfig_A@Data,w,c
 10148  002910  EC91  F015         	call	i2_MRF89XA_SPI_ExchangeByte
 10149  002914  6E36               	movwf	i2MRF89XA_ExchangeConfig_A@ret,c
 10150  002916  8886               	bsf	3974,4,c	;volatile
 10151                           
 10152                           ;MRF89XA.c: 161: return ret;
 10153  002918  5036               	movf	i2MRF89XA_ExchangeConfig_A@ret,w,c
 10154  00291A  0012               	return		;funcret
 10155  00291C                     __end_ofi2_MRF89XA_ExchangeConfig_A:
 10156                           	opt callstack 0
 10157                           
 10158 ;; *************** function i2_MRF89XA_SPI_ExchangeByte *****************
 10159 ;; Defined at:
 10160 ;;		line 77 in file "MRF89XA.c"
 10161 ;; Parameters:    Size  Location     Type
 10162 ;;  byte            1    wreg     unsigned char 
 10163 ;; Auto vars:     Size  Location     Type
 10164 ;;  byte            1    1[COMRAM] unsigned char 
 10165 ;; Return value:  Size  Location     Type
 10166 ;;                  1    wreg      unsigned char 
 10167 ;; Registers used:
 10168 ;;		wreg, status,2, cstack
 10169 ;; Tracked objects:
 10170 ;;		On entry : 0/0
 10171 ;;		On exit  : 0/0
 10172 ;;		Unchanged: 0/0
 10173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10178 ;;Total ram usage:        1 bytes
 10179 ;; Hardware stack levels used:    1
 10180 ;; Hardware stack levels required when called:    1
 10181 ;; This function calls:
 10182 ;;		i2_spi2_exchangeByte
 10183 ;; This function is called by:
 10184 ;;		_MRF89XA_ExchangeFifo
 10185 ;;		i2_MRF89XA_ExchangeConfig_A
 10186 ;; This function uses a non-reentrant model
 10187 ;;
 10188                           
 10189                           	psect	text105
 10190  002B22                     __ptext105:
 10191                           	opt callstack 0
 10192  002B22                     i2_MRF89XA_SPI_ExchangeByte:
 10193                           	opt callstack 15
 10194                           
 10195                           ;incstack = 0
 10196                           ;i2MRF89XA_SPI_ExchangeByte@byte stored from wreg
 10197  002B22  6E32               	movwf	i2MRF89XA_SPI_ExchangeByte@byte,c
 10198                           
 10199                           ;MRF89XA.c: 78: return spi2_exchangeByte(byte);
 10200  002B24  5032               	movf	i2MRF89XA_SPI_ExchangeByte@byte,w,c
 10201  002B26  ECDC  F014         	call	i2_spi2_exchangeByte
 10202  002B2A  0012               	return		;funcret
 10203  002B2C                     __end_ofi2_MRF89XA_SPI_ExchangeByte:
 10204                           	opt callstack 0
 10205                           
 10206 ;; *************** function i2_spi2_exchangeByte *****************
 10207 ;; Defined at:
 10208 ;;		line 69 in file "mcc_generated_files/spi2_driver.c"
 10209 ;; Parameters:    Size  Location     Type
 10210 ;;  b               1    wreg     unsigned char 
 10211 ;; Auto vars:     Size  Location     Type
 10212 ;;  b               1    0[COMRAM] unsigned char 
 10213 ;; Return value:  Size  Location     Type
 10214 ;;                  1    wreg      unsigned char 
 10215 ;; Registers used:
 10216 ;;		wreg, status,2
 10217 ;; Tracked objects:
 10218 ;;		On entry : 0/0
 10219 ;;		On exit  : 0/0
 10220 ;;		Unchanged: 0/0
 10221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10225 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10226 ;;Total ram usage:        1 bytes
 10227 ;; Hardware stack levels used:    1
 10228 ;; This function calls:
 10229 ;;		Nothing
 10230 ;; This function is called by:
 10231 ;;		i2_MRF89XA_SPI_ExchangeByte
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235                           	psect	text106
 10236  0029B8                     __ptext106:
 10237                           	opt callstack 0
 10238  0029B8                     i2_spi2_exchangeByte:
 10239                           	opt callstack 15
 10240                           
 10241                           ;incstack = 0
 10242                           ;i2spi2_exchangeByte@b stored from wreg
 10243  0029B8  6E31               	movwf	i2spi2_exchangeByte@b,c
 10244                           
 10245                           ;spi2_driver.c: 71: SSP2BUF = b;
 10246  0029BA  C031  FE92         	movff	i2spi2_exchangeByte@b,3730	;volatile
 10247  0029BE                     i2l1097:
 10248  0029BE  010E               	movlb	14	; () banked
 10249  0029C0  A5CD               	btfss	205,2,b	;volatile
 10250  0029C2  D7FD               	goto	i2l1097
 10251                           
 10252                           ; BSR set to: 14
 10253                           ;spi2_driver.c: 73: PIR3bits.SSP2IF = 0;
 10254  0029C4  95CD               	bcf	205,2,b	;volatile
 10255                           
 10256                           ;spi2_driver.c: 74: return SSP2BUF;
 10257  0029C6  5192               	movf	146,w,b	;volatile
 10258                           
 10259                           ; BSR set to: 14
 10260  0029C8  0012               	return		;funcret
 10261  0029CA                     __end_ofi2_spi2_exchangeByte:
 10262                           	opt callstack 0
 10263                           
 10264 ;; *************** function _I2C_SendCommand *****************
 10265 ;; Defined at:
 10266 ;;		line 328 in file "iic.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;  Target          1    wreg     unsigned char 
 10269 ;;  CMD             1   11[COMRAM] unsigned char 
 10270 ;; Auto vars:     Size  Location     Type
 10271 ;;  Target          1   13[COMRAM] unsigned char 
 10272 ;;  result          1   12[COMRAM] unsigned char 
 10273 ;; Return value:  Size  Location     Type
 10274 ;;                  1    wreg      unsigned char 
 10275 ;; Registers used:
 10276 ;;		wreg, status,2, status,0, cstack
 10277 ;; Tracked objects:
 10278 ;;		On entry : 0/0
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10282 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10285 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10286 ;;Total ram usage:        3 bytes
 10287 ;; Hardware stack levels used:    1
 10288 ;; Hardware stack levels required when called:    2
 10289 ;; This function calls:
 10290 ;;		_I2C_Master_Send_ACK
 10291 ;;		_I2C_Master_Start
 10292 ;;		_I2C_Master_Stop
 10293 ;;		_I2C_Master_Write
 10294 ;;		i2_Delay_Xms
 10295 ;; This function is called by:
 10296 ;;		_INT0_Custom_ISR
 10297 ;;		_ext_rf_runcmd
 10298 ;; This function uses a non-reentrant model
 10299 ;;
 10300                           
 10301                           	psect	text107
 10302  00210A                     __ptext107:
 10303                           	opt callstack 0
 10304  00210A                     _I2C_SendCommand:
 10305                           	opt callstack 17
 10306                           
 10307                           ; BSR set to: 14
 10308                           ;incstack = 0
 10309                           ;I2C_SendCommand@Target stored from wreg
 10310  00210A  6E3E               	movwf	I2C_SendCommand@Target,c
 10311                           
 10312                           ;iic.c: 330: I2C_Master_Start();
 10313  00210C  EC04  F015         	call	_I2C_Master_Start	;wreg free
 10314                           
 10315                           ;iic.c: 333: I2C_Master_Write(Target);
 10316  002110  503E               	movf	I2C_SendCommand@Target,w,c
 10317  002112  EC01  F012         	call	_I2C_Master_Write
 10318                           
 10319                           ;iic.c: 334: if(SSP1CON2bits.ACKSTAT) {
 10320  002116  AC97               	btfss	3991,6,c	;volatile
 10321  002118  D005               	goto	i2l4706
 10322                           
 10323                           ;iic.c: 336: SSP1CON2bits.PEN = 1;
 10324  00211A  8497               	bsf	3991,2,c	;volatile
 10325  00211C                     i2l1928:
 10326  00211C  B497               	btfsc	3991,2,c	;volatile
 10327  00211E  D7FE               	goto	i2l1928
 10328  002120                     i2u295_40:
 10329                           
 10330                           ;iic.c: 338: return 0xFF;
 10331  002120  0EFF               	movlw	255
 10332  002122  0012               	return	
 10333  002124                     i2l4706:
 10334                           
 10335                           ;iic.c: 339: };iic.c: 342: I2C_Master_Write(CMD);
 10336  002124  503C               	movf	I2C_SendCommand@CMD,w,c
 10337  002126  EC01  F012         	call	_I2C_Master_Write
 10338                           
 10339                           ;iic.c: 343: if(SSP1CON2bits.ACKSTAT) {
 10340  00212A  AC97               	btfss	3991,6,c	;volatile
 10341  00212C  D004               	goto	i2l4716
 10342                           
 10343                           ;iic.c: 345: SSP1CON2bits.PEN = 1;
 10344  00212E  8497               	bsf	3991,2,c	;volatile
 10345  002130                     i2l1933:
 10346  002130  A497               	btfss	3991,2,c	;volatile
 10347  002132  D7F6               	goto	i2u295_40
 10348  002134  D7FD               	goto	i2l1933
 10349  002136                     i2l4716:
 10350                           
 10351                           ;iic.c: 348: };iic.c: 350: I2C_Master_Stop();
 10352  002136  ECFE  F014         	call	_I2C_Master_Stop	;wreg free
 10353                           
 10354                           ;iic.c: 352: Delay_Xms(5);
 10355  00213A  0E05               	movlw	5
 10356  00213C  6E31               	movwf	i2Delay_Xms@delay,c
 10357  00213E  0E00               	movlw	0
 10358  002140  6E32               	movwf	i2Delay_Xms@delay+1,c
 10359  002142  0E00               	movlw	0
 10360  002144  6E33               	movwf	i2Delay_Xms@delay+2,c
 10361  002146  0E00               	movlw	0
 10362  002148  6E34               	movwf	i2Delay_Xms@delay+3,c
 10363  00214A  EC98  F011         	call	i2_Delay_Xms	;wreg free
 10364                           
 10365                           ;iic.c: 354: I2C_Master_Start();
 10366  00214E  EC04  F015         	call	_I2C_Master_Start	;wreg free
 10367                           
 10368                           ;iic.c: 356: I2C_Master_Write(Target | 0x01);
 10369  002152  503E               	movf	I2C_SendCommand@Target,w,c
 10370  002154  0901               	iorlw	1
 10371  002156  EC01  F012         	call	_I2C_Master_Write
 10372                           
 10373                           ;iic.c: 357: if(SSP1CON2bits.ACKSTAT) {
 10374  00215A  AC97               	btfss	3991,6,c	;volatile
 10375  00215C  D004               	goto	i2l1936
 10376                           
 10377                           ;iic.c: 359: SSP1CON2bits.PEN = 1;
 10378  00215E  8497               	bsf	3991,2,c	;volatile
 10379  002160                     i2l1937:
 10380  002160  A497               	btfss	3991,2,c	;volatile
 10381  002162  D7DE               	goto	i2u295_40
 10382  002164  D7FD               	goto	i2l1937
 10383  002166                     i2l1936:
 10384                           
 10385                           ;iic.c: 362: };iic.c: 365: SSP1CON2bits.RCEN = 1;
 10386  002166  8697               	bsf	3991,3,c	;volatile
 10387  002168                     i2l1940:
 10388  002168  A095               	btfss	3989,0,c	;volatile
 10389  00216A  D7FE               	goto	i2l1940
 10390                           
 10391                           ;iic.c: 369: PIR3bits.SSP1IF = 0;
 10392  00216C  010E               	movlb	14	; () banked
 10393  00216E  91CD               	bcf	205,0,b	;volatile
 10394                           
 10395                           ;iic.c: 371: unsigned char result = SSP1BUF;
 10396  002170  CF92 F03D          	movff	3986,I2C_SendCommand@result	;volatile
 10397                           
 10398                           ; BSR set to: 14
 10399                           ;iic.c: 373: I2C_Master_Send_ACK(1);
 10400  002174  0E01               	movlw	1
 10401  002176  ECD5  F012         	call	_I2C_Master_Send_ACK
 10402                           
 10403                           ;iic.c: 375: I2C_Master_Stop();
 10404  00217A  ECFE  F014         	call	_I2C_Master_Stop	;wreg free
 10405                           
 10406                           ;iic.c: 376: return result;
 10407  00217E  503D               	movf	I2C_SendCommand@result,w,c
 10408  002180  0012               	return		;funcret
 10409  002182                     __end_of_I2C_SendCommand:
 10410                           	opt callstack 0
 10411                           
 10412 ;; *************** function i2_Delay_Xms *****************
 10413 ;; Defined at:
 10414 ;;		line 21 in file "main.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;  delay           4    0[COMRAM] long 
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;  Delay_Xms       4    5[COMRAM] long 
 10419 ;; Return value:  Size  Location     Type
 10420 ;;                  1    wreg      void 
 10421 ;; Registers used:
 10422 ;;		wreg, status,2, status,0
 10423 ;; Tracked objects:
 10424 ;;		On entry : 0/0
 10425 ;;		On exit  : 0/0
 10426 ;;		Unchanged: 0/0
 10427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10428 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10429 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10430 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10431 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10432 ;;Total ram usage:        9 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; This function calls:
 10435 ;;		Nothing
 10436 ;; This function is called by:
 10437 ;;		_I2C_SendCommand
 10438 ;;		_MRF89XA_SendData
 10439 ;; This function uses a non-reentrant model
 10440 ;;
 10441                           
 10442                           	psect	text108
 10443  002330                     __ptext108:
 10444                           	opt callstack 0
 10445  002330                     i2_Delay_Xms:
 10446                           	opt callstack 18
 10447                           
 10448                           ;main.c: 22: for(long i = 0; i < delay; i++) {
 10449                           
 10450                           ;incstack = 0
 10451  002330  0E00               	movlw	0
 10452  002332  6E36               	movwf	i2Delay_Xms@i,c
 10453  002334  0E00               	movlw	0
 10454  002336  6E37               	movwf	i2Delay_Xms@i+1,c
 10455  002338  0E00               	movlw	0
 10456  00233A  6E38               	movwf	i2Delay_Xms@i+2,c
 10457  00233C  0E00               	movlw	0
 10458  00233E  6E39               	movwf	i2Delay_Xms@i+3,c
 10459  002340  D00D               	goto	i2l4692
 10460  002342                     i2l4688:
 10461                           
 10462                           ;main.c: 23: _delay((unsigned long)((1)*(24000000/4000.0)));
 10463  002342  0E08               	movlw	8
 10464  002344  6E35               	movwf	??i2_Delay_Xms& (0+255),c
 10465  002346  0ECA               	movlw	202
 10466  002348                     i2u601_47:
 10467  002348  2EE8               	decfsz	wreg,f,c
 10468  00234A  D7FE               	bra	i2u601_47
 10469  00234C  2E35               	decfsz	??i2_Delay_Xms& (0+255),f,c
 10470  00234E  D7FC               	bra	i2u601_47
 10471  002350  0E01               	movlw	1
 10472  002352  2636               	addwf	i2Delay_Xms@i,f,c
 10473  002354  0E00               	movlw	0
 10474  002356  2237               	addwfc	i2Delay_Xms@i+1,f,c
 10475  002358  2238               	addwfc	i2Delay_Xms@i+2,f,c
 10476  00235A  2239               	addwfc	i2Delay_Xms@i+3,f,c
 10477  00235C                     i2l4692:
 10478  00235C  5031               	movf	i2Delay_Xms@delay,w,c
 10479  00235E  5C36               	subwf	i2Delay_Xms@i,w,c
 10480  002360  5032               	movf	i2Delay_Xms@delay+1,w,c
 10481  002362  5837               	subwfb	i2Delay_Xms@i+1,w,c
 10482  002364  5033               	movf	i2Delay_Xms@delay+2,w,c
 10483  002366  5838               	subwfb	i2Delay_Xms@i+2,w,c
 10484  002368  5039               	movf	i2Delay_Xms@i+3,w,c
 10485  00236A  0A80               	xorlw	128
 10486  00236C  6E35               	movwf	??i2_Delay_Xms& (0+255),c
 10487  00236E  5034               	movf	i2Delay_Xms@delay+3,w,c
 10488  002370  0A80               	xorlw	128
 10489  002372  5835               	subwfb	??i2_Delay_Xms& (0+255),w,c
 10490  002374  B0D8               	btfsc	status,0,c
 10491  002376  0012               	return	
 10492  002378  D7E4               	goto	i2l4688
 10493  00237A                     __end_ofi2_Delay_Xms:
 10494                           	opt callstack 0
 10495                           
 10496 ;; *************** function _I2C_Master_Write *****************
 10497 ;; Defined at:
 10498 ;;		line 187 in file "iic.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;  data            1    wreg     unsigned char 
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;  data            1   10[COMRAM] unsigned char 
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  1    wreg      void 
 10505 ;; Registers used:
 10506 ;;		wreg, status,2, status,0, cstack
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10513 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10515 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10516 ;;Total ram usage:        1 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    1
 10519 ;; This function calls:
 10520 ;;		i2_SetLedBlink
 10521 ;; This function is called by:
 10522 ;;		_I2C_SendCommand
 10523 ;;		_I2C_WriteData
 10524 ;;		_I2C_WriteLength
 10525 ;;		_I2C_ReadData
 10526 ;;		_I2C_ReadLength
 10527 ;;		_I2C_SendCommand_L
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           	psect	text109
 10532  002402                     __ptext109:
 10533                           	opt callstack 0
 10534  002402                     _I2C_Master_Write:
 10535                           	opt callstack 17
 10536                           
 10537                           ;incstack = 0
 10538                           ;I2C_Master_Write@data stored from wreg
 10539  002402  6E3B               	movwf	I2C_Master_Write@data,c
 10540                           
 10541                           ;iic.c: 188: SSP1BUF = data;
 10542  002404  C03B  FF92         	movff	I2C_Master_Write@data,3986	;volatile
 10543                           
 10544                           ;iic.c: 189: if(SSP1CON1bits.WCOL) {
 10545  002408  AE96               	btfss	3990,7,c	;volatile
 10546  00240A  D018               	goto	i2l1892
 10547                           
 10548                           ;iic.c: 190: SSP1CON1bits.WCOL = 0;
 10549  00240C  9E96               	bcf	3990,7,c	;volatile
 10550                           
 10551                           ;iic.c: 191: SetLedBlink(R,1000,0,0,1);
 10552  00240E  0E00               	movlw	0
 10553  002410  6E32               	movwf	i2SetLedBlink@ledIndex+1,c
 10554  002412  0E00               	movlw	0
 10555  002414  6E31               	movwf	i2SetLedBlink@ledIndex,c
 10556  002416  0E03               	movlw	3
 10557  002418  6E34               	movwf	i2SetLedBlink@OnTime+1,c
 10558  00241A  0EE8               	movlw	232
 10559  00241C  6E33               	movwf	i2SetLedBlink@OnTime,c
 10560  00241E  0E00               	movlw	0
 10561  002420  6E36               	movwf	i2SetLedBlink@OffTime+1,c
 10562  002422  0E00               	movlw	0
 10563  002424  6E35               	movwf	i2SetLedBlink@OffTime,c
 10564  002426  0E00               	movlw	0
 10565  002428  6E38               	movwf	i2SetLedBlink@StartAfter+1,c
 10566  00242A  0E00               	movlw	0
 10567  00242C  6E37               	movwf	i2SetLedBlink@StartAfter,c
 10568  00242E  0E00               	movlw	0
 10569  002430  6E3A               	movwf	i2SetLedBlink@BlinkCount+1,c
 10570  002432  0E01               	movlw	1
 10571  002434  6E39               	movwf	i2SetLedBlink@BlinkCount,c
 10572  002436  EC2E  F00B         	call	i2_SetLedBlink	;wreg free
 10573                           
 10574                           ;iic.c: 192: } else {
 10575  00243A  0012               	return	
 10576  00243C                     i2l1892:
 10577  00243C  010E               	movlb	14	; () banked
 10578  00243E  B1CD               	btfsc	205,0,b	;volatile
 10579  002440  0012               	return	
 10580  002442  D7FC               	goto	i2l1892
 10581  002444                     __end_of_I2C_Master_Write:
 10582                           	opt callstack 0
 10583                           
 10584 ;; *************** function i2_SetLedBlink *****************
 10585 ;; Defined at:
 10586 ;;		line 64 in file "LedBlink.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;  ledIndex        2    0[COMRAM] int 
 10589 ;;  OnTime          2    2[COMRAM] int 
 10590 ;;  OffTime         2    4[COMRAM] int 
 10591 ;;  StartAfter      2    6[COMRAM] int 
 10592 ;;  BlinkCount      2    8[COMRAM] int 
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  1    wreg      void 
 10597 ;; Registers used:
 10598 ;;		wreg, status,2, status,0
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10604 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10607 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10608 ;;Total ram usage:       10 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; This function calls:
 10611 ;;		Nothing
 10612 ;; This function is called by:
 10613 ;;		_ext_rf_runcmd
 10614 ;;		_I2C_Master_Write
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text110
 10619  00165C                     __ptext110:
 10620                           	opt callstack 0
 10621  00165C                     i2_SetLedBlink:
 10622                           	opt callstack 19
 10623                           
 10624                           ;LedBlink.c: 65: if (ledIndex == R) {
 10625                           
 10626                           ;incstack = 0
 10627  00165C  5031               	movf	i2SetLedBlink@ledIndex,w,c
 10628  00165E  1032               	iorwf	i2SetLedBlink@ledIndex+1,w,c
 10629  001660  A4D8               	btfss	status,2,c
 10630  001662  D021               	goto	i2l4610
 10631                           
 10632                           ;LedBlink.c: 66: R_OnTime = OnTime;
 10633  001664  C033  F027         	movff	i2SetLedBlink@OnTime,_R_OnTime
 10634  001668  C034  F028         	movff	i2SetLedBlink@OnTime+1,_R_OnTime+1
 10635                           
 10636                           ;LedBlink.c: 67: R_OffTime = OffTime;
 10637  00166C  C035  F025         	movff	i2SetLedBlink@OffTime,_R_OffTime
 10638  001670  C036  F026         	movff	i2SetLedBlink@OffTime+1,_R_OffTime+1
 10639                           
 10640                           ;LedBlink.c: 68: R_StartAfter = StartAfter;
 10641  001674  C037  F01F         	movff	i2SetLedBlink@StartAfter,_R_StartAfter
 10642  001678  C038  F020         	movff	i2SetLedBlink@StartAfter+1,_R_StartAfter+1
 10643                           
 10644                           ;LedBlink.c: 69: R_Enabled = ON;
 10645  00167C  0E00               	movlw	0
 10646  00167E  6E24               	movwf	_R_Enabled+1,c
 10647  001680  0E01               	movlw	1
 10648  001682  6E23               	movwf	_R_Enabled,c
 10649                           
 10650                           ;LedBlink.c: 70: R_BlinkCount = BlinkCount;
 10651  001684  C039  F01D         	movff	i2SetLedBlink@BlinkCount,_R_BlinkCount
 10652  001688  C03A  F01E         	movff	i2SetLedBlink@BlinkCount+1,_R_BlinkCount+1
 10653                           
 10654                           ;LedBlink.c: 71: R_BlinkCounter = BlinkCount;
 10655  00168C  C039  F01B         	movff	i2SetLedBlink@BlinkCount,_R_BlinkCounter
 10656  001690  C03A  F01C         	movff	i2SetLedBlink@BlinkCount+1,_R_BlinkCounter+1
 10657                           
 10658                           ;LedBlink.c: 72: R_Counter = 0;
 10659  001694  0E00               	movlw	0
 10660  001696  6E22               	movwf	_R_Counter+1,c
 10661  001698  0E00               	movlw	0
 10662  00169A  6E21               	movwf	_R_Counter,c
 10663                           
 10664                           ;LedBlink.c: 73: R_State = UNIDENTIFIED;
 10665  00169C  0E00               	movlw	0
 10666  00169E  6E50               	movwf	_R_State+1,c
 10667  0016A0  0E03               	movlw	3
 10668  0016A2  6E4F               	movwf	_R_State,c
 10669                           
 10670                           ;LedBlink.c: 74: } else if (ledIndex == G) {
 10671  0016A4  0012               	return	
 10672  0016A6                     i2l4610:
 10673  0016A6  0431               	decf	i2SetLedBlink@ledIndex,w,c
 10674  0016A8  1032               	iorwf	i2SetLedBlink@ledIndex+1,w,c
 10675  0016AA  A4D8               	btfss	status,2,c
 10676  0016AC  D022               	goto	i2l4620
 10677                           
 10678                           ;LedBlink.c: 75: G_OnTime = OnTime;
 10679  0016AE  C033  F019         	movff	i2SetLedBlink@OnTime,_G_OnTime
 10680  0016B2  C034  F01A         	movff	i2SetLedBlink@OnTime+1,_G_OnTime+1
 10681                           
 10682                           ;LedBlink.c: 76: G_OffTime = OffTime;
 10683  0016B6  C035  F017         	movff	i2SetLedBlink@OffTime,_G_OffTime
 10684  0016BA  C036  F018         	movff	i2SetLedBlink@OffTime+1,_G_OffTime+1
 10685                           
 10686                           ;LedBlink.c: 77: G_StartAfter = StartAfter;
 10687  0016BE  C037  F0CC         	movff	i2SetLedBlink@StartAfter,_G_StartAfter
 10688  0016C2  C038  F0CD         	movff	i2SetLedBlink@StartAfter+1,_G_StartAfter+1
 10689                           
 10690                           ;LedBlink.c: 78: G_Enabled = ON;
 10691  0016C6  0E00               	movlw	0
 10692  0016C8  0100               	movlb	0	; () banked
 10693  0016CA  6FCF               	movwf	(_G_Enabled+1)& (0+255),b
 10694  0016CC  0E01               	movlw	1
 10695  0016CE  6FCE               	movwf	_G_Enabled& (0+255),b
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;LedBlink.c: 79: G_BlinkCount = BlinkCount;
 10699  0016D0  C039  F013         	movff	i2SetLedBlink@BlinkCount,_G_BlinkCount
 10700  0016D4  C03A  F014         	movff	i2SetLedBlink@BlinkCount+1,_G_BlinkCount+1
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;LedBlink.c: 80: G_BlinkCounter = BlinkCount;
 10704  0016D8  C039  F0CA         	movff	i2SetLedBlink@BlinkCount,_G_BlinkCounter
 10705  0016DC  C03A  F0CB         	movff	i2SetLedBlink@BlinkCount+1,_G_BlinkCounter+1
 10706                           
 10707                           ;LedBlink.c: 81: G_Counter = 0;
 10708  0016E0  0E00               	movlw	0
 10709  0016E2  6E16               	movwf	_G_Counter+1,c
 10710  0016E4  0E00               	movlw	0
 10711  0016E6  6E15               	movwf	_G_Counter,c
 10712                           
 10713                           ;LedBlink.c: 82: G_State = UNIDENTIFIED;
 10714  0016E8  0E00               	movlw	0
 10715  0016EA  6E4E               	movwf	_G_State+1,c
 10716  0016EC  0E03               	movlw	3
 10717  0016EE  6E4D               	movwf	_G_State,c
 10718                           
 10719                           ;LedBlink.c: 83: } else if (ledIndex == B) {
 10720  0016F0  0012               	return	
 10721  0016F2                     i2l4620:
 10722  0016F2  0E02               	movlw	2
 10723  0016F4  1831               	xorwf	i2SetLedBlink@ledIndex,w,c
 10724  0016F6  1032               	iorwf	i2SetLedBlink@ledIndex+1,w,c
 10725  0016F8  A4D8               	btfss	status,2,c
 10726  0016FA  D022               	goto	i2l4630
 10727                           
 10728                           ;LedBlink.c: 84: B_OnTime = OnTime;
 10729  0016FC  C033  F0C8         	movff	i2SetLedBlink@OnTime,_B_OnTime
 10730  001700  C034  F0C9         	movff	i2SetLedBlink@OnTime+1,_B_OnTime+1
 10731                           
 10732                           ;LedBlink.c: 85: B_OffTime = OffTime;
 10733  001704  C035  F0C6         	movff	i2SetLedBlink@OffTime,_B_OffTime
 10734  001708  C036  F0C7         	movff	i2SetLedBlink@OffTime+1,_B_OffTime+1
 10735                           
 10736                           ;LedBlink.c: 86: B_StartAfter = StartAfter;
 10737  00170C  C037  F0C2         	movff	i2SetLedBlink@StartAfter,_B_StartAfter
 10738  001710  C038  F0C3         	movff	i2SetLedBlink@StartAfter+1,_B_StartAfter+1
 10739                           
 10740                           ;LedBlink.c: 87: B_Enabled = ON;
 10741  001714  0E00               	movlw	0
 10742  001716  0100               	movlb	0	; () banked
 10743  001718  6FC5               	movwf	(_B_Enabled+1)& (0+255),b
 10744  00171A  0E01               	movlw	1
 10745  00171C  6FC4               	movwf	_B_Enabled& (0+255),b
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;LedBlink.c: 88: B_BlinkCount = BlinkCount;
 10749  00171E  C039  F00F         	movff	i2SetLedBlink@BlinkCount,_B_BlinkCount
 10750  001722  C03A  F010         	movff	i2SetLedBlink@BlinkCount+1,_B_BlinkCount+1
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;LedBlink.c: 89: B_BlinkCounter = BlinkCount;
 10754  001726  C039  F0C0         	movff	i2SetLedBlink@BlinkCount,_B_BlinkCounter
 10755  00172A  C03A  F0C1         	movff	i2SetLedBlink@BlinkCount+1,_B_BlinkCounter+1
 10756                           
 10757                           ;LedBlink.c: 90: B_Counter = 0;
 10758  00172E  0E00               	movlw	0
 10759  001730  6E12               	movwf	_B_Counter+1,c
 10760  001732  0E00               	movlw	0
 10761  001734  6E11               	movwf	_B_Counter,c
 10762                           
 10763                           ;LedBlink.c: 91: B_State = UNIDENTIFIED;
 10764  001736  0E00               	movlw	0
 10765  001738  6E4C               	movwf	_B_State+1,c
 10766  00173A  0E03               	movlw	3
 10767  00173C  6E4B               	movwf	_B_State,c
 10768                           
 10769                           ;LedBlink.c: 92: } else if (ledIndex == RGB_R) {
 10770  00173E  0012               	return	
 10771  001740                     i2l4630:
 10772  001740  0E03               	movlw	3
 10773  001742  1831               	xorwf	i2SetLedBlink@ledIndex,w,c
 10774  001744  1032               	iorwf	i2SetLedBlink@ledIndex+1,w,c
 10775  001746  A4D8               	btfss	status,2,c
 10776  001748  D022               	goto	i2l4640
 10777                           
 10778                           ;LedBlink.c: 93: RGB_R_OnTime = OnTime;
 10779  00174A  C033  F0BE         	movff	i2SetLedBlink@OnTime,_RGB_R_OnTime
 10780  00174E  C034  F0BF         	movff	i2SetLedBlink@OnTime+1,_RGB_R_OnTime+1
 10781                           
 10782                           ;LedBlink.c: 94: RGB_R_OffTime = OffTime;
 10783  001752  C035  F0BC         	movff	i2SetLedBlink@OffTime,_RGB_R_OffTime
 10784  001756  C036  F0BD         	movff	i2SetLedBlink@OffTime+1,_RGB_R_OffTime+1
 10785                           
 10786                           ;LedBlink.c: 95: RGB_R_StartAfter = StartAfter;
 10787  00175A  C037  F0B8         	movff	i2SetLedBlink@StartAfter,_RGB_R_StartAfter
 10788  00175E  C038  F0B9         	movff	i2SetLedBlink@StartAfter+1,_RGB_R_StartAfter+1
 10789                           
 10790                           ;LedBlink.c: 96: RGB_R_Enabled = ON;
 10791  001762  0E00               	movlw	0
 10792  001764  0100               	movlb	0	; () banked
 10793  001766  6FBB               	movwf	(_RGB_R_Enabled+1)& (0+255),b
 10794  001768  0E01               	movlw	1
 10795  00176A  6FBA               	movwf	_RGB_R_Enabled& (0+255),b
 10796                           
 10797                           ; BSR set to: 0
 10798                           ;LedBlink.c: 97: RGB_R_BlinkCount = BlinkCount;
 10799  00176C  C039  F00B         	movff	i2SetLedBlink@BlinkCount,_RGB_R_BlinkCount
 10800  001770  C03A  F00C         	movff	i2SetLedBlink@BlinkCount+1,_RGB_R_BlinkCount+1
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;LedBlink.c: 98: RGB_R_BlinkCounter = BlinkCount;
 10804  001774  C039  F0B6         	movff	i2SetLedBlink@BlinkCount,_RGB_R_BlinkCounter
 10805  001778  C03A  F0B7         	movff	i2SetLedBlink@BlinkCount+1,_RGB_R_BlinkCounter+1
 10806                           
 10807                           ;LedBlink.c: 99: RGB_R_Counter = 0;
 10808  00177C  0E00               	movlw	0
 10809  00177E  6E0E               	movwf	_RGB_R_Counter+1,c
 10810  001780  0E00               	movlw	0
 10811  001782  6E0D               	movwf	_RGB_R_Counter,c
 10812                           
 10813                           ;LedBlink.c: 100: RGB_R_State = UNIDENTIFIED;
 10814  001784  0E00               	movlw	0
 10815  001786  6E4A               	movwf	_RGB_R_State+1,c
 10816  001788  0E03               	movlw	3
 10817  00178A  6E49               	movwf	_RGB_R_State,c
 10818                           
 10819                           ;LedBlink.c: 101: } else if (ledIndex == RGB_G) {
 10820  00178C  0012               	return	
 10821  00178E                     i2l4640:
 10822  00178E  0E04               	movlw	4
 10823  001790  1831               	xorwf	i2SetLedBlink@ledIndex,w,c
 10824  001792  1032               	iorwf	i2SetLedBlink@ledIndex+1,w,c
 10825  001794  A4D8               	btfss	status,2,c
 10826  001796  D022               	goto	i2l4650
 10827                           
 10828                           ;LedBlink.c: 102: RGB_G_OnTime = OnTime;
 10829  001798  C033  F0B4         	movff	i2SetLedBlink@OnTime,_RGB_G_OnTime
 10830  00179C  C034  F0B5         	movff	i2SetLedBlink@OnTime+1,_RGB_G_OnTime+1
 10831                           
 10832                           ;LedBlink.c: 103: RGB_G_OffTime = OffTime;
 10833  0017A0  C035  F0B2         	movff	i2SetLedBlink@OffTime,_RGB_G_OffTime
 10834  0017A4  C036  F0B3         	movff	i2SetLedBlink@OffTime+1,_RGB_G_OffTime+1
 10835                           
 10836                           ;LedBlink.c: 104: RGB_G_StartAfter = StartAfter;
 10837  0017A8  C037  F0AE         	movff	i2SetLedBlink@StartAfter,_RGB_G_StartAfter
 10838  0017AC  C038  F0AF         	movff	i2SetLedBlink@StartAfter+1,_RGB_G_StartAfter+1
 10839                           
 10840                           ;LedBlink.c: 105: RGB_G_Enabled = ON;
 10841  0017B0  0E00               	movlw	0
 10842  0017B2  0100               	movlb	0	; () banked
 10843  0017B4  6FB1               	movwf	(_RGB_G_Enabled+1)& (0+255),b
 10844  0017B6  0E01               	movlw	1
 10845  0017B8  6FB0               	movwf	_RGB_G_Enabled& (0+255),b
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;LedBlink.c: 106: RGB_G_BlinkCount = BlinkCount;
 10849  0017BA  C039  F007         	movff	i2SetLedBlink@BlinkCount,_RGB_G_BlinkCount
 10850  0017BE  C03A  F008         	movff	i2SetLedBlink@BlinkCount+1,_RGB_G_BlinkCount+1
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;LedBlink.c: 107: RGB_G_BlinkCounter = BlinkCount;
 10854  0017C2  C039  F0AC         	movff	i2SetLedBlink@BlinkCount,_RGB_G_BlinkCounter
 10855  0017C6  C03A  F0AD         	movff	i2SetLedBlink@BlinkCount+1,_RGB_G_BlinkCounter+1
 10856                           
 10857                           ;LedBlink.c: 108: RGB_G_Counter = 0;
 10858  0017CA  0E00               	movlw	0
 10859  0017CC  6E0A               	movwf	_RGB_G_Counter+1,c
 10860  0017CE  0E00               	movlw	0
 10861  0017D0  6E09               	movwf	_RGB_G_Counter,c
 10862                           
 10863                           ;LedBlink.c: 109: RGB_G_State = UNIDENTIFIED;
 10864  0017D2  0E00               	movlw	0
 10865  0017D4  6E48               	movwf	_RGB_G_State+1,c
 10866  0017D6  0E03               	movlw	3
 10867  0017D8  6E47               	movwf	_RGB_G_State,c
 10868                           
 10869                           ;LedBlink.c: 110: } else if (ledIndex == RGB_B) {
 10870  0017DA  0012               	return	
 10871  0017DC                     i2l4650:
 10872  0017DC  0E05               	movlw	5
 10873  0017DE  1831               	xorwf	i2SetLedBlink@ledIndex,w,c
 10874  0017E0  1032               	iorwf	i2SetLedBlink@ledIndex+1,w,c
 10875  0017E2  A4D8               	btfss	status,2,c
 10876  0017E4  0012               	return	
 10877                           
 10878                           ;LedBlink.c: 111: RGB_B_OnTime = OnTime;
 10879  0017E6  C033  F0AA         	movff	i2SetLedBlink@OnTime,_RGB_B_OnTime
 10880  0017EA  C034  F0AB         	movff	i2SetLedBlink@OnTime+1,_RGB_B_OnTime+1
 10881                           
 10882                           ;LedBlink.c: 112: RGB_B_OffTime = OffTime;
 10883  0017EE  C035  F0A8         	movff	i2SetLedBlink@OffTime,_RGB_B_OffTime
 10884  0017F2  C036  F0A9         	movff	i2SetLedBlink@OffTime+1,_RGB_B_OffTime+1
 10885                           
 10886                           ;LedBlink.c: 113: RGB_B_StartAfter = StartAfter;
 10887  0017F6  C037  F0A4         	movff	i2SetLedBlink@StartAfter,_RGB_B_StartAfter
 10888  0017FA  C038  F0A5         	movff	i2SetLedBlink@StartAfter+1,_RGB_B_StartAfter+1
 10889                           
 10890                           ;LedBlink.c: 114: RGB_B_Enabled = ON;
 10891  0017FE  0E00               	movlw	0
 10892  001800  0100               	movlb	0	; () banked
 10893  001802  6FA7               	movwf	(_RGB_B_Enabled+1)& (0+255),b
 10894  001804  0E01               	movlw	1
 10895  001806  6FA6               	movwf	_RGB_B_Enabled& (0+255),b
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;LedBlink.c: 115: RGB_B_BlinkCount = BlinkCount;
 10899  001808  C039  F003         	movff	i2SetLedBlink@BlinkCount,_RGB_B_BlinkCount
 10900  00180C  C03A  F004         	movff	i2SetLedBlink@BlinkCount+1,_RGB_B_BlinkCount+1
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;LedBlink.c: 116: RGB_B_BlinkCounter = BlinkCount;
 10904  001810  C039  F0A2         	movff	i2SetLedBlink@BlinkCount,_RGB_B_BlinkCounter
 10905  001814  C03A  F0A3         	movff	i2SetLedBlink@BlinkCount+1,_RGB_B_BlinkCounter+1
 10906                           
 10907                           ;LedBlink.c: 117: RGB_B_Counter = 0;
 10908  001818  0E00               	movlw	0
 10909  00181A  6E06               	movwf	_RGB_B_Counter+1,c
 10910  00181C  0E00               	movlw	0
 10911  00181E  6E05               	movwf	_RGB_B_Counter,c
 10912                           
 10913                           ;LedBlink.c: 118: RGB_B_State = UNIDENTIFIED;
 10914  001820  0E00               	movlw	0
 10915  001822  6E46               	movwf	_RGB_B_State+1,c
 10916  001824  0E03               	movlw	3
 10917  001826  6E45               	movwf	_RGB_B_State,c
 10918  001828  0012               	return	
 10919  00182A                     __end_ofi2_SetLedBlink:
 10920                           	opt callstack 0
 10921                           
 10922 ;; *************** function _I2C_Master_Stop *****************
 10923 ;; Defined at:
 10924 ;;		line 168 in file "iic.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;		None
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;		None
 10929 ;; Return value:  Size  Location     Type
 10930 ;;                  1    wreg      void 
 10931 ;; Registers used:
 10932 ;;		None
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10942 ;;Total ram usage:        0 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; This function calls:
 10945 ;;		Nothing
 10946 ;; This function is called by:
 10947 ;;		_I2C_SendCommand
 10948 ;;		_I2C_WriteData
 10949 ;;		_I2C_WriteLength
 10950 ;;		_I2C_ReadData
 10951 ;;		_I2C_ReadLength
 10952 ;;		_I2C_SendCommand_L
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           	psect	text111
 10957  0029FC                     __ptext111:
 10958                           	opt callstack 0
 10959  0029FC                     _I2C_Master_Stop:
 10960                           	opt callstack 18
 10961                           
 10962                           ;iic.c: 169: SSP1CON2bits.PEN = 1;
 10963                           
 10964                           ;incstack = 0
 10965  0029FC  8497               	bsf	3991,2,c	;volatile
 10966  0029FE                     i2l1878:
 10967  0029FE  B497               	btfsc	3991,2,c	;volatile
 10968  002A00  D7FE               	goto	i2l1878
 10969                           
 10970                           ;iic.c: 171: PIR3bits.SSP1IF = 0;
 10971  002A02  010E               	movlb	14	; () banked
 10972  002A04  91CD               	bcf	205,0,b	;volatile
 10973                           
 10974                           ; BSR set to: 14
 10975  002A06  0012               	return		;funcret
 10976  002A08                     __end_of_I2C_Master_Stop:
 10977                           	opt callstack 0
 10978                           
 10979 ;; *************** function _I2C_Master_Start *****************
 10980 ;; Defined at:
 10981 ;;		line 159 in file "iic.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;		None
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;		None
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      void 
 10988 ;; Registers used:
 10989 ;;		None
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10999 ;;Total ram usage:        0 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; This function calls:
 11002 ;;		Nothing
 11003 ;; This function is called by:
 11004 ;;		_I2C_SendCommand
 11005 ;;		_I2C_WriteData
 11006 ;;		_I2C_WriteLength
 11007 ;;		_I2C_ReadData
 11008 ;;		_I2C_ReadLength
 11009 ;;		_I2C_SendCommand_L
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           	psect	text112
 11014  002A08                     __ptext112:
 11015                           	opt callstack 0
 11016  002A08                     _I2C_Master_Start:
 11017                           	opt callstack 18
 11018                           
 11019                           ;iic.c: 160: SSP1CON2bits.SEN = 1;
 11020                           
 11021                           ; BSR set to: 14
 11022                           ;incstack = 0
 11023  002A08  8097               	bsf	3991,0,c	;volatile
 11024  002A0A                     i2l1872:
 11025  002A0A  B097               	btfsc	3991,0,c	;volatile
 11026  002A0C  D7FE               	goto	i2l1872
 11027                           
 11028                           ;iic.c: 162: PIR3bits.SSP1IF = 0;
 11029  002A0E  010E               	movlb	14	; () banked
 11030  002A10  91CD               	bcf	205,0,b	;volatile
 11031                           
 11032                           ; BSR set to: 14
 11033  002A12  0012               	return		;funcret
 11034  002A14                     __end_of_I2C_Master_Start:
 11035                           	opt callstack 0
 11036                           
 11037 ;; *************** function _I2C_Master_Send_ACK *****************
 11038 ;; Defined at:
 11039 ;;		line 177 in file "iic.c"
 11040 ;; Parameters:    Size  Location     Type
 11041 ;;  Ack             1    wreg     unsigned char 
 11042 ;; Auto vars:     Size  Location     Type
 11043 ;;  Ack             1    1[COMRAM] unsigned char 
 11044 ;; Return value:  Size  Location     Type
 11045 ;;                  1    wreg      void 
 11046 ;; Registers used:
 11047 ;;		wreg, status,2, status,0
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11055 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11056 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11057 ;;Total ram usage:        2 bytes
 11058 ;; Hardware stack levels used:    1
 11059 ;; This function calls:
 11060 ;;		Nothing
 11061 ;; This function is called by:
 11062 ;;		_I2C_SendCommand
 11063 ;;		_I2C_ReadData
 11064 ;;		_I2C_ReadLength
 11065 ;;		_I2C_SendCommand_L
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           	psect	text113
 11070  0025AA                     __ptext113:
 11071                           	opt callstack 0
 11072  0025AA                     _I2C_Master_Send_ACK:
 11073                           	opt callstack 18
 11074                           
 11075                           ; BSR set to: 14
 11076                           ;incstack = 0
 11077                           ;I2C_Master_Send_ACK@Ack stored from wreg
 11078  0025AA  6E32               	movwf	I2C_Master_Send_ACK@Ack,c
 11079                           
 11080                           ;iic.c: 178: SSP1CON2bits.ACKDT = Ack == 0 ? 0 : 1;
 11081  0025AC  5032               	movf	I2C_Master_Send_ACK@Ack,w,c
 11082  0025AE  B4D8               	btfsc	status,2,c
 11083  0025B0  D003               	goto	i2u286_40
 11084  0025B2  6A31               	clrf	??_I2C_Master_Send_ACK& (0+255),c
 11085  0025B4  2A31               	incf	??_I2C_Master_Send_ACK& (0+255),f,c
 11086  0025B6  D001               	goto	i2u287_48
 11087  0025B8                     i2u286_40:
 11088  0025B8  6A31               	clrf	??_I2C_Master_Send_ACK& (0+255),c
 11089  0025BA                     i2u287_48:
 11090  0025BA  3A31               	swapf	??_I2C_Master_Send_ACK,f,c
 11091  0025BC  4631               	rlncf	??_I2C_Master_Send_ACK,f,c
 11092  0025BE  5097               	movf	3991,w,c	;volatile
 11093  0025C0  1831               	xorwf	??_I2C_Master_Send_ACK,w,c
 11094  0025C2  0BDF               	andlw	-33
 11095  0025C4  1831               	xorwf	??_I2C_Master_Send_ACK,w,c
 11096  0025C6  6E97               	movwf	3991,c	;volatile
 11097                           
 11098                           ;iic.c: 179: SSP1CON2bits.ACKEN = 1;
 11099  0025C8  8897               	bsf	3991,4,c	;volatile
 11100  0025CA                     i2l1884:
 11101  0025CA  B897               	btfsc	3991,4,c	;volatile
 11102  0025CC  D7FE               	goto	i2l1884
 11103                           
 11104                           ;iic.c: 181: PIR3bits.SSP1IF = 0;
 11105  0025CE  010E               	movlb	14	; () banked
 11106  0025D0  91CD               	bcf	205,0,b	;volatile
 11107                           
 11108                           ; BSR set to: 14
 11109  0025D2  0012               	return		;funcret
 11110  0025D4                     __end_of_I2C_Master_Send_ACK:
 11111                           	opt callstack 0
 11112                           
 11113 ;; *************** function _I2C_BusCollisionISR *****************
 11114 ;; Defined at:
 11115 ;;		line 439 in file "iic.c"
 11116 ;; Parameters:    Size  Location     Type
 11117 ;;		None
 11118 ;; Auto vars:     Size  Location     Type
 11119 ;;		None
 11120 ;; Return value:  Size  Location     Type
 11121 ;;                  1    wreg      void 
 11122 ;; Registers used:
 11123 ;;		None
 11124 ;; Tracked objects:
 11125 ;;		On entry : 0/0
 11126 ;;		On exit  : 0/0
 11127 ;;		Unchanged: 0/0
 11128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11133 ;;Total ram usage:        0 bytes
 11134 ;; Hardware stack levels used:    1
 11135 ;; This function calls:
 11136 ;;		Nothing
 11137 ;; This function is called by:
 11138 ;;		_INTERRUPT_InterruptManager
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           	psect	text114
 11143  002B3C                     __ptext114:
 11144                           	opt callstack 0
 11145  002B3C                     _I2C_BusCollisionISR:
 11146                           	opt callstack 23
 11147                           
 11148                           ;iic.c: 441: PIR3bits.BCL1IF = 0;
 11149                           
 11150                           ; BSR set to: 14
 11151                           ;incstack = 0
 11152  002B3C  010E               	movlb	14	; () banked
 11153  002B3E  93CD               	bcf	205,1,b	;volatile
 11154                           
 11155                           ; BSR set to: 14
 11156  002B40  0012               	return		;funcret
 11157  002B42                     __end_of_I2C_BusCollisionISR:
 11158                           	opt callstack 0
 11159                           
 11160 ;; *************** function _EUSART1_Transmit_ISR *****************
 11161 ;; Defined at:
 11162 ;;		line 195 in file "mcc_generated_files/eusart1.c"
 11163 ;; Parameters:    Size  Location     Type
 11164 ;;		None
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;		None
 11167 ;; Return value:  Size  Location     Type
 11168 ;;                  1    wreg      void 
 11169 ;; Registers used:
 11170 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11171 ;; Tracked objects:
 11172 ;;		On entry : 0/0
 11173 ;;		On exit  : 0/0
 11174 ;;		Unchanged: 0/0
 11175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11180 ;;Total ram usage:        0 bytes
 11181 ;; Hardware stack levels used:    1
 11182 ;; This function calls:
 11183 ;;		Nothing
 11184 ;; This function is called by:
 11185 ;;		_EUSART1_Initialize
 11186 ;;		_INTERRUPT_InterruptManager
 11187 ;; This function uses a non-reentrant model
 11188 ;;
 11189                           
 11190                           	psect	text115
 11191  00257E                     __ptext115:
 11192                           	opt callstack 0
 11193  00257E                     _EUSART1_Transmit_ISR:
 11194                           	opt callstack 23
 11195                           
 11196                           ;eusart1.c: 199: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 11197                           
 11198                           ; BSR set to: 14
 11199                           ;incstack = 0
 11200  00257E  0E40               	movlw	64
 11201  002580  6051               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 11202  002582  D010               	goto	i2l902
 11203                           
 11204                           ;eusart1.c: 200: {;eusart1.c: 201: TX1REG = eusart1TxBuffer[eusart1TxTail++];
 11205  002584  0E40               	movlw	low _eusart1TxBuffer
 11206  002586  242F               	addwf	_eusart1TxTail,w,c	;volatile
 11207  002588  6ED9               	movwf	fsr2l,c
 11208  00258A  6ADA               	clrf	fsr2h,c
 11209  00258C  0E01               	movlw	high _eusart1TxBuffer
 11210  00258E  22DA               	addwfc	fsr2h,f,c
 11211  002590  50DF               	movf	indf2,w,c
 11212  002592  6E9A               	movwf	3994,c	;volatile
 11213  002594  2A2F               	incf	_eusart1TxTail,f,c	;volatile
 11214                           
 11215                           ;eusart1.c: 202: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 11216  002596  0E3F               	movlw	63
 11217  002598  642F               	cpfsgt	_eusart1TxTail,c	;volatile
 11218  00259A  D002               	goto	i2l5642
 11219                           
 11220                           ;eusart1.c: 203: {;eusart1.c: 204: eusart1TxTail = 0;
 11221  00259C  0E00               	movlw	0
 11222  00259E  6E2F               	movwf	_eusart1TxTail,c	;volatile
 11223  0025A0                     i2l5642:
 11224                           
 11225                           ;eusart1.c: 205: };eusart1.c: 206: eusart1TxBufferRemaining++;
 11226  0025A0  2A51               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 11227                           
 11228                           ;eusart1.c: 207: }
 11229  0025A2  0012               	return	
 11230  0025A4                     i2l902:
 11231                           
 11232                           ;eusart1.c: 208: else;eusart1.c: 209: {;eusart1.c: 210: PIE3bits.TX1IE = 0;
 11233  0025A4  010E               	movlb	14	; () banked
 11234  0025A6  99C5               	bcf	197,4,b	;volatile
 11235  0025A8  0012               	return		;funcret
 11236  0025AA                     __end_of_EUSART1_Transmit_ISR:
 11237                           	opt callstack 0
 11238                           
 11239 ;; *************** function _EUSART1_Receive_ISR *****************
 11240 ;; Defined at:
 11241 ;;		line 214 in file "mcc_generated_files/eusart1.c"
 11242 ;; Parameters:    Size  Location     Type
 11243 ;;		None
 11244 ;; Auto vars:     Size  Location     Type
 11245 ;;		None
 11246 ;; Return value:  Size  Location     Type
 11247 ;;                  1    wreg      void 
 11248 ;; Registers used:
 11249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 11250 ;; Tracked objects:
 11251 ;;		On entry : 0/0
 11252 ;;		On exit  : 0/0
 11253 ;;		Unchanged: 0/0
 11254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11259 ;;Total ram usage:        0 bytes
 11260 ;; Hardware stack levels used:    1
 11261 ;; Hardware stack levels required when called:    2
 11262 ;; This function calls:
 11263 ;;		Absolute function
 11264 ;;		_EUSART1_DefaultErrorHandler
 11265 ;;		_EUSART1_DefaultFramingErrorHandler
 11266 ;;		_EUSART1_DefaultOverrunErrorHandler
 11267 ;;		_EUSART1_RxDataHandler
 11268 ;; This function is called by:
 11269 ;;		_EUSART1_Initialize
 11270 ;;		_INTERRUPT_InterruptManager
 11271 ;; This function uses a non-reentrant model
 11272 ;;
 11273                           
 11274                           	psect	text116
 11275  001FF2                     __ptext116:
 11276                           	opt callstack 0
 11277  001FF2                     _EUSART1_Receive_ISR:
 11278                           	opt callstack 21
 11279                           
 11280                           ;eusart1.c: 217: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
 11281                           
 11282                           ;incstack = 0
 11283  001FF2  0E60               	movlw	low _eusart1RxStatusBuffer
 11284  001FF4  242E               	addwf	_eusart1RxHead,w,c	;volatile
 11285  001FF6  6ED9               	movwf	fsr2l,c
 11286  001FF8  6ADA               	clrf	fsr2h,c
 11287  001FFA  0E00               	movlw	high _eusart1RxStatusBuffer
 11288  001FFC  22DA               	addwfc	fsr2h,f,c
 11289  001FFE  0E00               	movlw	0
 11290  002000  6EDF               	movwf	indf2,c
 11291                           
 11292                           ;eusart1.c: 219: if(RC1STAbits.FERR){
 11293  002002  A49D               	btfss	3997,2,c	;volatile
 11294  002004  D013               	goto	i2u468_49
 11295                           
 11296                           ;eusart1.c: 220: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
 11297  002006  0E60               	movlw	low _eusart1RxStatusBuffer
 11298  002008  242E               	addwf	_eusart1RxHead,w,c	;volatile
 11299  00200A  6ED9               	movwf	fsr2l,c
 11300  00200C  6ADA               	clrf	fsr2h,c
 11301  00200E  0E00               	movlw	high _eusart1RxStatusBuffer
 11302  002010  22DA               	addwfc	fsr2h,f,c
 11303  002012  0100               	movlb	0	; () banked
 11304  002014  82DF               	bsf	indf2,1,c
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;eusart1.c: 221: EUSART1_FramingErrorHandler();
 11308  002016  D801               	call	i2u468_48
 11309  002018  D009               	goto	i2u468_49
 11310  00201A                     i2u468_48:
 11311  00201A  0005               	push	
 11312  00201C  6EFA               	movwf	pclath,c
 11313  00201E  51D6               	movf	_EUSART1_FramingErrorHandler& (0+255),w,b
 11314  002020  6EFD               	movwf	tosl,c
 11315  002022  51D7               	movf	(_EUSART1_FramingErrorHandler+1)& (0+255),w,b
 11316  002024  6EFE               	movwf	tosh,c
 11317  002026  6AFF               	clrf	tosu,c
 11318  002028  50FA               	movf	pclath,w,c
 11319  00202A  0012               	return		;indir
 11320  00202C                     i2u468_49:
 11321                           
 11322                           ;eusart1.c: 222: };eusart1.c: 224: if(RC1STAbits.OERR){
 11323  00202C  A29D               	btfss	3997,1,c	;volatile
 11324  00202E  D013               	goto	i2u470_49
 11325                           
 11326                           ;eusart1.c: 225: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
 11327  002030  0E60               	movlw	low _eusart1RxStatusBuffer
 11328  002032  242E               	addwf	_eusart1RxHead,w,c	;volatile
 11329  002034  6ED9               	movwf	fsr2l,c
 11330  002036  6ADA               	clrf	fsr2h,c
 11331  002038  0E00               	movlw	high _eusart1RxStatusBuffer
 11332  00203A  22DA               	addwfc	fsr2h,f,c
 11333  00203C  0100               	movlb	0	; () banked
 11334  00203E  84DF               	bsf	indf2,2,c
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;eusart1.c: 226: EUSART1_OverrunErrorHandler();
 11338  002040  D801               	call	i2u470_48
 11339  002042  D009               	goto	i2u470_49
 11340  002044                     i2u470_48:
 11341  002044  0005               	push	
 11342  002046  6EFA               	movwf	pclath,c
 11343  002048  51D4               	movf	_EUSART1_OverrunErrorHandler& (0+255),w,b
 11344  00204A  6EFD               	movwf	tosl,c
 11345  00204C  51D5               	movf	(_EUSART1_OverrunErrorHandler+1)& (0+255),w,b
 11346  00204E  6EFE               	movwf	tosh,c
 11347  002050  6AFF               	clrf	tosu,c
 11348  002052  50FA               	movf	pclath,w,c
 11349  002054  0012               	return		;indir
 11350  002056                     i2u470_49:
 11351                           
 11352                           ;eusart1.c: 227: };eusart1.c: 229: if(eusart1RxStatusBuffer[eusart1RxHead].status){
 11353  002056  0E60               	movlw	low _eusart1RxStatusBuffer
 11354  002058  242E               	addwf	_eusart1RxHead,w,c	;volatile
 11355  00205A  6ED9               	movwf	fsr2l,c
 11356  00205C  6ADA               	clrf	fsr2h,c
 11357  00205E  0E00               	movlw	high _eusart1RxStatusBuffer
 11358  002060  22DA               	addwfc	fsr2h,f,c
 11359  002062  50DF               	movf	indf2,w,c
 11360  002064  B4D8               	btfsc	status,2,c
 11361  002066  D00C               	goto	i2l5662
 11362                           
 11363                           ;eusart1.c: 230: EUSART1_ErrorHandler();
 11364  002068  D801               	call	i2u472_48
 11365  00206A  0012               	return	
 11366  00206C                     i2u472_48:
 11367  00206C  0005               	push	
 11368  00206E  6EFA               	movwf	pclath,c
 11369  002070  0100               	movlb	0	; () banked
 11370  002072  51D2               	movf	_EUSART1_ErrorHandler& (0+255),w,b
 11371  002074  6EFD               	movwf	tosl,c
 11372  002076  51D3               	movf	(_EUSART1_ErrorHandler+1)& (0+255),w,b
 11373  002078  6EFE               	movwf	tosh,c
 11374  00207A  6AFF               	clrf	tosu,c
 11375  00207C  50FA               	movf	pclath,w,c
 11376  00207E  0012               	return		;indir
 11377  002080                     i2l5662:
 11378                           
 11379                           ;eusart1.c: 232: EUSART1_RxDataHandler();
 11380  002080  EC2D  F014         	call	_EUSART1_RxDataHandler	;wreg free
 11381  002084  0012               	return		;funcret
 11382  002086                     __end_of_EUSART1_Receive_ISR:
 11383                           	opt callstack 0
 11384                           
 11385 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
 11386 ;; Defined at:
 11387 ;;		line 251 in file "mcc_generated_files/eusart1.c"
 11388 ;; Parameters:    Size  Location     Type
 11389 ;;		None
 11390 ;; Auto vars:     Size  Location     Type
 11391 ;;		None
 11392 ;; Return value:  Size  Location     Type
 11393 ;;                  1    wreg      void 
 11394 ;; Registers used:
 11395 ;;		None
 11396 ;; Tracked objects:
 11397 ;;		On entry : 0/0
 11398 ;;		On exit  : 0/0
 11399 ;;		Unchanged: 0/0
 11400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11405 ;;Total ram usage:        0 bytes
 11406 ;; Hardware stack levels used:    1
 11407 ;; This function calls:
 11408 ;;		Nothing
 11409 ;; This function is called by:
 11410 ;;		_EUSART1_Initialize
 11411 ;;		_EUSART1_Receive_ISR
 11412 ;; This function uses a non-reentrant model
 11413 ;;
 11414                           
 11415                           	psect	text117
 11416  002B42                     __ptext117:
 11417                           	opt callstack 0
 11418  002B42                     _EUSART1_DefaultOverrunErrorHandler:
 11419                           	opt callstack 22
 11420                           
 11421                           ;eusart1.c: 254: RC1STAbits.CREN = 0;
 11422                           
 11423                           ;incstack = 0
 11424  002B42  989D               	bcf	3997,4,c	;volatile
 11425                           
 11426                           ;eusart1.c: 255: RC1STAbits.CREN = 1;
 11427  002B44  889D               	bsf	3997,4,c	;volatile
 11428  002B46  0012               	return		;funcret
 11429  002B48                     __end_of_EUSART1_DefaultOverrunErrorHandler:
 11430                           	opt callstack 0
 11431                           
 11432 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
 11433 ;; Defined at:
 11434 ;;		line 249 in file "mcc_generated_files/eusart1.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;		None
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;		None
 11439 ;; Return value:  Size  Location     Type
 11440 ;;                  1    wreg      void 
 11441 ;; Registers used:
 11442 ;;		None
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11452 ;;Total ram usage:        0 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; This function calls:
 11455 ;;		Nothing
 11456 ;; This function is called by:
 11457 ;;		_EUSART1_Initialize
 11458 ;;		_EUSART1_Receive_ISR
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           	psect	text118
 11463  002B78                     __ptext118:
 11464                           	opt callstack 0
 11465  002B78                     _EUSART1_DefaultFramingErrorHandler:
 11466                           	opt callstack 22
 11467                           
 11468                           ;incstack = 0
 11469  002B78  0012               	return		;funcret
 11470  002B7A                     __end_of_EUSART1_DefaultFramingErrorHandler:
 11471                           	opt callstack 0
 11472                           
 11473 ;; *************** function _EUSART1_DefaultErrorHandler *****************
 11474 ;; Defined at:
 11475 ;;		line 259 in file "mcc_generated_files/eusart1.c"
 11476 ;; Parameters:    Size  Location     Type
 11477 ;;		None
 11478 ;; Auto vars:     Size  Location     Type
 11479 ;;		None
 11480 ;; Return value:  Size  Location     Type
 11481 ;;                  1    wreg      void 
 11482 ;; Registers used:
 11483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11484 ;; Tracked objects:
 11485 ;;		On entry : 0/0
 11486 ;;		On exit  : 0/0
 11487 ;;		Unchanged: 0/0
 11488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11493 ;;Total ram usage:        0 bytes
 11494 ;; Hardware stack levels used:    1
 11495 ;; Hardware stack levels required when called:    1
 11496 ;; This function calls:
 11497 ;;		_EUSART1_RxDataHandler
 11498 ;; This function is called by:
 11499 ;;		_EUSART1_Initialize
 11500 ;;		_EUSART1_Receive_ISR
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           	psect	text119
 11505  002B48                     __ptext119:
 11506                           	opt callstack 0
 11507  002B48                     _EUSART1_DefaultErrorHandler:
 11508                           	opt callstack 21
 11509                           
 11510                           ;eusart1.c: 260: EUSART1_RxDataHandler();
 11511                           
 11512                           ;incstack = 0
 11513  002B48  EC2D  F014         	call	_EUSART1_RxDataHandler	;wreg free
 11514  002B4C  0012               	return		;funcret
 11515  002B4E                     __end_of_EUSART1_DefaultErrorHandler:
 11516                           	opt callstack 0
 11517                           
 11518 ;; *************** function _EUSART1_RxDataHandler *****************
 11519 ;; Defined at:
 11520 ;;		line 239 in file "mcc_generated_files/eusart1.c"
 11521 ;; Parameters:    Size  Location     Type
 11522 ;;		None
 11523 ;; Auto vars:     Size  Location     Type
 11524 ;;		None
 11525 ;; Return value:  Size  Location     Type
 11526 ;;                  1    wreg      void 
 11527 ;; Registers used:
 11528 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11538 ;;Total ram usage:        0 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; This function calls:
 11541 ;;		Nothing
 11542 ;; This function is called by:
 11543 ;;		_EUSART1_Receive_ISR
 11544 ;;		_EUSART1_DefaultErrorHandler
 11545 ;; This function uses a non-reentrant model
 11546 ;;
 11547                           
 11548                           	psect	text120
 11549  00285A                     __ptext120:
 11550                           	opt callstack 0
 11551  00285A                     _EUSART1_RxDataHandler:
 11552                           	opt callstack 22
 11553                           
 11554                           ;eusart1.c: 241: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
 11555                           
 11556                           ;incstack = 0
 11557  00285A  0E00               	movlw	low _eusart1RxBuffer
 11558  00285C  242E               	addwf	_eusart1RxHead,w,c	;volatile
 11559  00285E  6ED9               	movwf	fsr2l,c
 11560  002860  6ADA               	clrf	fsr2h,c
 11561  002862  0E01               	movlw	high _eusart1RxBuffer
 11562  002864  22DA               	addwfc	fsr2h,f,c
 11563  002866  CF99 FFDF          	movff	3993,indf2	;volatile
 11564  00286A  2A2E               	incf	_eusart1RxHead,f,c	;volatile
 11565                           
 11566                           ;eusart1.c: 242: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 11567  00286C  0E3F               	movlw	63
 11568  00286E  642E               	cpfsgt	_eusart1RxHead,c	;volatile
 11569  002870  D002               	goto	i2l4872
 11570                           
 11571                           ;eusart1.c: 243: {;eusart1.c: 244: eusart1RxHead = 0;
 11572  002872  0E00               	movlw	0
 11573  002874  6E2E               	movwf	_eusart1RxHead,c	;volatile
 11574  002876                     i2l4872:
 11575                           
 11576                           ;eusart1.c: 245: };eusart1.c: 246: eusart1RxCount++;
 11577  002876  2A2C               	incf	_eusart1RxCount,f,c	;volatile
 11578  002878  0012               	return		;funcret
 11579  00287A                     __end_of_EUSART1_RxDataHandler:
 11580                           	opt callstack 0
 11581                           
 11582                           	psect	text121
 11583  000000                     __ptext121:
 11584                           	opt callstack 0
 11585                           
 11586                           	psect	rparam
 11587  0000                     
 11588                           	psect	temp
 11589  000052                     btemp:
 11590                           	opt callstack 0
 11591  000052                     	ds	1
 11592  0000                     int$flags	set	btemp
 11593  0000                     wtemp8	set	btemp+1
 11594  0000                     ttemp5	set	btemp+1
 11595  0000                     ttemp6	set	btemp+4
 11596  0000                     ttemp7	set	btemp+8
 11597                           tosu	equ	0xFFF
 11598                           tosh	equ	0xFFE
 11599                           tosl	equ	0xFFD
 11600                           stkptr	equ	0xFFC
 11601                           pclatu	equ	0xFFB
 11602                           pclath	equ	0xFFA
 11603                           pcl	equ	0xFF9
 11604                           tblptru	equ	0xFF8
 11605                           tblptrh	equ	0xFF7
 11606                           tblptrl	equ	0xFF6
 11607                           tablat	equ	0xFF5
 11608                           prodh	equ	0xFF4
 11609                           prodl	equ	0xFF3
 11610                           indf0	equ	0xFEF
 11611                           postinc0	equ	0xFEE
 11612                           postdec0	equ	0xFED
 11613                           preinc0	equ	0xFEC
 11614                           plusw0	equ	0xFEB
 11615                           fsr0h	equ	0xFEA
 11616                           fsr0l	equ	0xFE9
 11617                           wreg	equ	0xFE8
 11618                           indf1	equ	0xFE7
 11619                           postinc1	equ	0xFE6
 11620                           postdec1	equ	0xFE5
 11621                           preinc1	equ	0xFE4
 11622                           plusw1	equ	0xFE3
 11623                           fsr1h	equ	0xFE2
 11624                           fsr1l	equ	0xFE1
 11625                           bsr	equ	0xFE0
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           preinc2	equ	0xFDC
 11630                           plusw2	equ	0xFDB
 11631                           fsr2h	equ	0xFDA
 11632                           fsr2l	equ	0xFD9
 11633                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    28
    Data        12
    BSS         288
    Persistent  41
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     20      81
    BANK0           160      8     160
    BANK1           256     10     138
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    S35$3$0	PTR void  size(2) Largest target is 0

    S35$4$0	PTR void  size(2) Largest target is 0

    S35$5$0	PTR void  size(2) Largest target is 0

    S35$8$0	PTR FTN()void  size(2) Largest target is 0

    spi2_interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), Absolute function(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), Absolute function(), 

    IOCCF7_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF7_DefaultInterruptHandler(), 

    IOCCF7_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF7_DefaultInterruptHandler(), Absolute function(), 

    IOCCF6_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF6_DefaultInterruptHandler(), 

    IOCCF6_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF6_DefaultInterruptHandler(), Absolute function(), 

    IOCCF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), 

    IOCCF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), Absolute function(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), Absolute function(), 

    IOCCF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF3_DefaultInterruptHandler(), 

    IOCCF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF3_DefaultInterruptHandler(), Absolute function(), 

    IOCBF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF5_DefaultInterruptHandler(), 

    IOCBF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF5_DefaultInterruptHandler(), Absolute function(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), 

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), Absolute function(), 

    IOCAF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF3_DefaultInterruptHandler(), 

    IOCAF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF3_DefaultInterruptHandler(), Absolute function(), 

    IOCAF1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF1_DefaultInterruptHandler(), 

    IOCAF1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF1_DefaultInterruptHandler(), Absolute function(), 

    IOCAF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF0_DefaultInterruptHandler(), 

    IOCAF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF0_DefaultInterruptHandler(), Absolute function(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_Custom_ISR(), INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_Custom_ISR(), INT0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Custom_ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Custom_ISR(), Absolute function(), TMR2_DefaultInterruptHandler(), 

    S35$spiISR	PTR FTN()void  size(2) Largest target is 1
		 -> spi2_isr(), 

    spiMaster.spiISR	PTR FTN()void  size(2) Largest target is 1
		 -> spi2_isr(), 

    S35$setSpiISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> spi2_setSpiISR(), 

    spiMaster.setSpiISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> spi2_setSpiISR(), 

    S35$readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> spi2_readByte(), 

    spiMaster.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> spi2_readByte(), 

    S35$writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> spi2_writeByte(), 

    spiMaster.writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> spi2_writeByte(), 

    S35$readBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> spi2_readBlock(), 

    spiMaster.readBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> spi2_readBlock(), 

    S35$writeBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> spi2_writeBlock(), 

    spiMaster.writeBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> spi2_writeBlock(), 

    S35$exchangeBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> spi2_exchangeBlock(), 

    spiMaster.exchangeBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> spi2_exchangeBlock(), 

    S35$exchangeByte	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> spi2_exchangeByte(), 

    spiMaster.exchangeByte	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> i2_spi2_exchangeByte(), spi2_exchangeByte(), 

    S35$spiOpen	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> MASTER_open(), 

    spiMaster.spiOpen	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> MASTER_open(), 

    S35$spiClose	PTR FTN()void  size(2) Largest target is 1
		 -> spi2_close(), 

    spiMaster.spiClose	PTR FTN()void  size(2) Largest target is 1
		 -> spi2_close(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR2_Custom_ISR->i2_SetLed
    _INT0_CallBack->_INT0_Custom_ISR
    _INT0_Custom_ISR->_ext_rf_runcmd
    _ext_rf_runcmd->_I2C_SendCommand
    _MRF89XA_SendData->i2_Delay_Xms
    _MRF89XA_WriteFifo->_MRF89XA_ExchangeFifo
    _MRF89XA_ExchangeFifo->i2_MRF89XA_SPI_ExchangeByte
    _MRF89XA_IsTxDone->_MRF89XA_ReadConfig
    _MRF89XA_ReadConfig->i2_MRF89XA_ExchangeConfig_A
    i2_MRF89XA_ExchangeConfig_A->i2_MRF89XA_GetAddress
    i2_MRF89XA_SPI_ExchangeByte->i2_spi2_exchangeByte
    _I2C_SendCommand->_I2C_Master_Write
    _I2C_Master_Write->i2_SetLedBlink

Critical Paths under _main in BANK0

    _ext_rf_initialize->_GetTarget
    _SYSTEM_Initialize->_SetLed
    _MASTER_open->_spi2_open
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF3_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF5_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF3_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF5_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF6_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF7_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _RunLoop->_EUSART1_Read
    _RunLoop->_EUSART1_Write
    _MRF89XA_Initialize->_MRF89XA_WriteConfig
    _MRF89XA_SetModulation->_MRF89XA_WriteConfig
    _MRF89XA_SetMode->_MRF89XA_WriteConfig
    _MRF89XA_WriteConfig->_MRF89XA_ExchangeConfig_A
    _MRF89XA_ExchangeConfig_A->_MRF89XA_GetAddress
    _MRF89XA_SPI_ExchangeByte->_spi2_exchangeByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_SetLedBlink
    _RunLoop->_SetLedBlink
    _MRF89XA_Initialize->_MRF89XA_SetMode
    _MRF89XA_Initialize->_MRF89XA_SetModulation

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   27667
                          _Delay_Xms
           _INT0_SetInterruptHandler
                 _MRF89XA_Initialize
                            _RunLoop
                  _SYSTEM_Initialize
                        _SetLedBlink
           _TMR2_SetInterruptHandler
                  _ext_rf_initialize
 ---------------------------------------------------------------------------------
 (1) _ext_rf_initialize                                    0     0      0      68
                          _GetTarget
 ---------------------------------------------------------------------------------
 (2) _GetTarget                                            2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    6359
                  _CLKREF_Initialize
                    _DAC1_Initialize
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
                     _FVR_Initialize
                    _I2C_Master_Init
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                             _SetLed
                    _TMR2_Initialize
                    _TMR4_Initialize
                    _spi_master_open
 ---------------------------------------------------------------------------------
 (2) _spi_master_open                                      1     1      0     110
                                              2 BANK0      1     1      0
                        _MASTER_open
 ---------------------------------------------------------------------------------
 (3) _MASTER_open                                          0     0      0      88
                          _spi2_open
 ---------------------------------------------------------------------------------
 (4) _spi2_open                                            2     2      0      88
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     121
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SetLed                                               6     2      4    3649
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0    1210
         _IOCAF0_SetInterruptHandler
         _IOCAF1_SetInterruptHandler
         _IOCAF3_SetInterruptHandler
         _IOCAF4_SetInterruptHandler
         _IOCBF5_SetInterruptHandler
         _IOCCF3_SetInterruptHandler
         _IOCCF4_SetInterruptHandler
         _IOCCF5_SetInterruptHandler
         _IOCCF6_SetInterruptHandler
         _IOCCF7_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF7_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF6_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF5_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF3_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCBF5_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF3_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF1_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF0_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     453
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     605
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CLKREF_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunLoop                                              0     0      0    5640
                       _EUSART1_Read
                      _EUSART1_Write
                _EUSART1_is_rx_ready
                _EUSART1_is_tx_ready
                        _SetLedBlink
 ---------------------------------------------------------------------------------
 (1) _SetLedBlink                                         10     0     10    5541
                                              0 BANK1     10     0     10
 ---------------------------------------------------------------------------------
 (2) _EUSART1_is_tx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Write                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MRF89XA_Initialize                                   3     1      2    8829
                                              2 BANK1      3     1      2
                    _MRF89XA_SetMode
              _MRF89XA_SetModulation
                _MRF89XA_WriteConfig
 ---------------------------------------------------------------------------------
 (2) _MRF89XA_SetModulation                                2     2      0    2853
                                              0 BANK1      2     2      0
                _MRF89XA_WriteConfig
 ---------------------------------------------------------------------------------
 (2) _MRF89XA_SetMode                                      2     2      0    2921
                                              0 BANK1      2     2      0
                _MRF89XA_WriteConfig
 ---------------------------------------------------------------------------------
 (2) _MRF89XA_WriteConfig                                  2     1      1    2782
                                              6 BANK0      2     1      1
           _MRF89XA_ExchangeConfig_A
                 _MRF89XA_GetAddress
 ---------------------------------------------------------------------------------
 (3) _MRF89XA_GetAddress                                   3     2      1     275
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _MRF89XA_ExchangeConfig_A                             3     2      1     285
                                              3 BANK0      3     2      1
                 _MRF89XA_GetAddress (ARG)
           _MRF89XA_SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (4) _MRF89XA_SPI_ExchangeByte                             1     1      0      44
                                              1 BANK0      1     1      0
                  _spi2_exchangeByte
 ---------------------------------------------------------------------------------
 (5) _spi2_exchangeByte                                    1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Delay_Xms                                            9     5      4     808
                                              0 BANK0      5     1      4
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           4     4      0    6635
                                             16 COMRAM     4     4      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _I2C_BusCollisionISR
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                           _TMR4_ISR
                           _spi2_isr
 ---------------------------------------------------------------------------------
 (8) _spi2_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR4_ISR                                             0     0      0       0
                      _TMR4_CallBack
 ---------------------------------------------------------------------------------
 (9) _TMR4_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR4_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR2_ISR                                             0     0      0    1224
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (9) _TMR2_CallBack                                        0     0      0    1224
                   Absolute function *
                    _TMR2_Custom_ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR2_Custom_ISR                                     0     0      0    1224
                           i2_SetLed
 ---------------------------------------------------------------------------------
 (11) i2_SetLed                                            6     2      4    1224
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF0_ISR
                         _IOCAF1_ISR
                         _IOCAF3_ISR
                         _IOCAF4_ISR
                         _IOCBF5_ISR
                         _IOCCF3_ISR
                         _IOCCF4_ISR
                         _IOCCF5_ISR
                         _IOCCF6_ISR
                         _IOCCF7_ISR
 ---------------------------------------------------------------------------------
 (9) _IOCCF7_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF7_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCCF7_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCCF6_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF6_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCCF6_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCCF5_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCCF5_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCCF4_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCCF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCCF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCCF3_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCBF5_ISR                                           0     0      0       0
                   Absolute function *
     _IOCBF5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCBF5_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCAF4_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCAF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCAF3_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCAF1_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCAF1_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCAF0_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCAF0_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT2_ISR                                             0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (9) _INT2_CallBack                                        0     0      0       0
                   Absolute function *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT1_ISR                                             0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (9) _INT1_CallBack                                        0     0      0       0
                   Absolute function *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0_ISR                                             0     0      0    5411
                      _INT0_CallBack
 ---------------------------------------------------------------------------------
 (9) _INT0_CallBack                                        0     0      0    5411
                   Absolute function *
                    _INT0_Custom_ISR *
       _INT0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _INT0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_Custom_ISR                                     1     1      0    5411
                                             15 COMRAM     1     1      0
                    _I2C_SendCommand
                      _ext_rf_runcmd
 ---------------------------------------------------------------------------------
 (11) _ext_rf_runcmd                                       1     1      0    3823
                                             14 COMRAM     1     1      0
                    _I2C_SendCommand
                   _MRF89XA_SendData
                          _ToggleLed
                      i2_SetLedBlink
 ---------------------------------------------------------------------------------
 (12) _ToggleLed                                           3     1      2     360
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (12) _MRF89XA_SendData                                    2     1      1     627
                                              9 COMRAM     2     1      1
                   _MRF89XA_IsTxDone
                  _MRF89XA_WriteFifo
                        i2_Delay_Xms
 ---------------------------------------------------------------------------------
 (13) _MRF89XA_WriteFifo                                   1     1      0     111
                                              4 COMRAM     1     1      0
               _MRF89XA_ExchangeFifo
 ---------------------------------------------------------------------------------
 (14) _MRF89XA_ExchangeFifo                                2     2      0      89
                                              2 COMRAM     2     2      0
         i2_MRF89XA_SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (13) _MRF89XA_IsTxDone                                    1     1      0     298
                                              7 COMRAM     1     1      0
                 _MRF89XA_ReadConfig
 ---------------------------------------------------------------------------------
 (14) _MRF89XA_ReadConfig                                  1     1      0     275
                                              6 COMRAM     1     1      0
         i2_MRF89XA_ExchangeConfig_A
               i2_MRF89XA_GetAddress
 ---------------------------------------------------------------------------------
 (15) i2_MRF89XA_GetAddress                                3     2      1     116
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (15) i2_MRF89XA_ExchangeConfig_A                          3     2      1     137
                                              3 COMRAM     3     2      1
               i2_MRF89XA_GetAddress (ARG)
         i2_MRF89XA_SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (15) i2_MRF89XA_SPI_ExchangeByte                          1     1      0      44
                                              1 COMRAM     1     1      0
                i2_spi2_exchangeByte
 ---------------------------------------------------------------------------------
 (16) i2_spi2_exchangeByte                                 1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _I2C_SendCommand                                     3     2      1    1565
                                             11 COMRAM     3     2      1
                _I2C_Master_Send_ACK
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                        i2_Delay_Xms
 ---------------------------------------------------------------------------------
 (13) i2_Delay_Xms                                         9     5      4      98
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (13) _I2C_Master_Write                                    1     1      0    1204
                                             10 COMRAM     1     1      0
                      i2_SetLedBlink
 ---------------------------------------------------------------------------------
 (12) i2_SetLedBlink                                      10     0     10    1182
                                              0 COMRAM    10     0     10
 ---------------------------------------------------------------------------------
 (13) _I2C_Master_Stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_Master_Start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_Master_Send_ACK                                 2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  0     0      0       0
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART1_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_DefaultErrorHandler                          0     0      0       0
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART1_RxDataHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_Xms
   _INT0_SetInterruptHandler
   _MRF89XA_Initialize
     _MRF89XA_SetMode
       _MRF89XA_WriteConfig
         _MRF89XA_ExchangeConfig_A
           _MRF89XA_GetAddress (ARG)
           _MRF89XA_SPI_ExchangeByte (ARG)
             _spi2_exchangeByte
         _MRF89XA_GetAddress
     _MRF89XA_SetModulation
       _MRF89XA_WriteConfig
         _MRF89XA_ExchangeConfig_A
           _MRF89XA_GetAddress (ARG)
           _MRF89XA_SPI_ExchangeByte (ARG)
             _spi2_exchangeByte
         _MRF89XA_GetAddress
     _MRF89XA_WriteConfig
       _MRF89XA_ExchangeConfig_A
         _MRF89XA_GetAddress (ARG)
         _MRF89XA_SPI_ExchangeByte (ARG)
           _spi2_exchangeByte
       _MRF89XA_GetAddress
   _RunLoop
     _EUSART1_Read
     _EUSART1_Write
     _EUSART1_is_rx_ready
     _EUSART1_is_tx_ready
     _SetLedBlink
   _SYSTEM_Initialize
     _CLKREF_Initialize
     _DAC1_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
     _FVR_Initialize
     _I2C_Master_Init
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF0_SetInterruptHandler
       _IOCAF1_SetInterruptHandler
       _IOCAF3_SetInterruptHandler
       _IOCAF4_SetInterruptHandler
       _IOCBF5_SetInterruptHandler
       _IOCCF3_SetInterruptHandler
       _IOCCF4_SetInterruptHandler
       _IOCCF5_SetInterruptHandler
       _IOCCF6_SetInterruptHandler
       _IOCCF7_SetInterruptHandler
     _PMD_Initialize
     _SetLed
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _spi_master_open
       _MASTER_open
         _spi2_open
   _SetLedBlink
   _TMR2_SetInterruptHandler
   _ext_rf_initialize
     _GetTarget

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _EUSART1_Transmit_ISR *
   _I2C_BusCollisionISR *
   _INT0_ISR *
     _INT0_CallBack
       Absolute function(Fake) *
       _INT0_Custom_ISR *
         _I2C_SendCommand
           _I2C_Master_Send_ACK
           _I2C_Master_Start
           _I2C_Master_Stop
           _I2C_Master_Write
             i2_SetLedBlink
           i2_Delay_Xms
         _ext_rf_runcmd
           _I2C_SendCommand
             _I2C_Master_Send_ACK
             _I2C_Master_Start
             _I2C_Master_Stop
             _I2C_Master_Write
               i2_SetLedBlink
             i2_Delay_Xms
           _MRF89XA_SendData
             _MRF89XA_IsTxDone
               _MRF89XA_ReadConfig
                 i2_MRF89XA_ExchangeConfig_A
                   i2_MRF89XA_GetAddress (ARG)
                   i2_MRF89XA_SPI_ExchangeByte (ARG)
                     i2_spi2_exchangeByte
                 i2_MRF89XA_GetAddress
             _MRF89XA_WriteFifo
               _MRF89XA_ExchangeFifo
                 i2_MRF89XA_SPI_ExchangeByte
                   i2_spi2_exchangeByte
             i2_Delay_Xms
           _ToggleLed
           i2_SetLedBlink
       _INT0_DefaultInterruptHandler *
   _INT1_ISR *
     _INT1_CallBack
       Absolute function(Fake) *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR *
     _INT2_CallBack
       Absolute function(Fake) *
       _INT2_DefaultInterruptHandler *
   _PIN_MANAGER_IOC *
     _IOCAF0_ISR
       Absolute function(Fake) *
       _IOCAF0_DefaultInterruptHandler *
     _IOCAF1_ISR
       Absolute function(Fake) *
       _IOCAF1_DefaultInterruptHandler *
     _IOCAF3_ISR
       Absolute function(Fake) *
       _IOCAF3_DefaultInterruptHandler *
     _IOCAF4_ISR
       Absolute function(Fake) *
       _IOCAF4_DefaultInterruptHandler *
     _IOCBF5_ISR
       Absolute function(Fake) *
       _IOCBF5_DefaultInterruptHandler *
     _IOCCF3_ISR
       Absolute function(Fake) *
       _IOCCF3_DefaultInterruptHandler *
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
     _IOCCF5_ISR
       Absolute function(Fake) *
       _IOCCF5_DefaultInterruptHandler *
     _IOCCF6_ISR
       Absolute function(Fake) *
       _IOCCF6_DefaultInterruptHandler *
     _IOCCF7_ISR
       Absolute function(Fake) *
       _IOCCF7_DefaultInterruptHandler *
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_Custom_ISR *
         i2_SetLed
       _TMR2_DefaultInterruptHandler *
   _TMR4_ISR *
     _TMR4_CallBack
       Absolute function(Fake) *
       _TMR4_DefaultInterruptHandler *
   _spi2_isr *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      A      8A       8       53.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      8      A0       5      100.0%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     14      51       1       86.2%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17B       6        0.0%
DATA                 0      0     17B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Jul 09 00:46:36 2019

            __end_ofi2_MRF89XA_ExchangeConfig_A 291C                      i2_MRF89XA_ExchangeConfig_A 2902  
              __end_of_TMR2_SetInterruptHandler 2A32                        _eusart1TxBufferRemaining 0051  
                   __end_ofi2_spi2_exchangeByte 29CA          __end_of_IOCCF4_DefaultInterruptHandler 2B66  
       __size_of_IOCCF4_DefaultInterruptHandler 0002                  _IOCCF4_DefaultInterruptHandler 2B64  
                             ??_INT0_Custom_ISR 0040                                     __CFG_CP$OFF 000000  
                                _spi2_setSpiISR 000000                          __end_of_FVR_Initialize 2B3C  
                         SetLedBlink@StartAfter 0186                    __size_of_I2C_Master_Send_ACK 002A  
                                   __CFG_LVP$ON 000000                                 _DAC1_Initialize 29E4  
                                           l896 2494                                             _PR2 000FBC  
                                           _PR4 000FB6                                    __CFG_CPD$OFF 000000  
                    ??_INT0_SetInterruptHandler 00FA                         __size_of_PMD_Initialize 001C  
                               _TMR2_Initialize 2550                                             tosl 000FFD  
                               _TMR2_Custom_ISR 0F1E                                             wreg 000FE8  
                                 _INT0_CallBack 283A          __end_of_IOCCF7_DefaultInterruptHandler 2B60  
       __size_of_IOCCF7_DefaultInterruptHandler 0002                  _IOCCF7_DefaultInterruptHandler 2B5E  
                                  ?_MASTER_open 0031              __end_of_IOCCF3_SetInterruptHandler 2A64  
                    _IOCCF3_SetInterruptHandler 2A5A              __end_of_IOCCF6_SetInterruptHandler 2A46  
                    _IOCCF6_SetInterruptHandler 2A3C                                   _INT1_CallBack 281A  
                  MRF89XA_ExchangeConfig_A@Data 00FB                                    __CFG_ZCD$OFF 000000  
                      __size_of_MRF89XA_SetMode 003A                                            l1097 28F6  
                                          l6020 1E14                                            l6030 28CA  
                                          l6102 288A                                            l6302 1F2E  
                                          l6330 23F4                                            l6306 1F44  
                                          l6340 2482                                            l6092 2880  
                                          l6430 24C8                                            l6408 160E  
                                          l6096 2886                                            l6434 24D2  
                                          l6354 24B2                                            l6290 1EEE  
                                          l6356 24B4                                            l6438 24DE  
                                          l6294 1F02                                            l6286 1EDA  
                                          l6448 25E6                                            l6368 14D8  
                                          l6482 2196                                            l6378 1524  
                                          l6298 1F18                                            l6388 1572  
                                          l6492 221C                                            l6580 19D6  
                                          l6486 21B6                                            l6398 15C0  
                                          l6496 222E                         i2SetLedBlink@BlinkCount 0039  
                                          _LATA 000F83                                            _LATB 000F84  
                                          _LATC 000F85                                            _LATD 000F86  
                                          _LATE 000F87                                            _T2PR 000FBC  
                                          _T4PR 000FB6                                            u6007 219E  
                                          _PMD0 000EE1                                            _PMD1 000EE2  
                                          _PMD2 000EE3                                            u5415 1EEA  
                                          _PMD3 000EE4                                            u5416 1EEC  
                                          _PMD4 000EE5                                            _PMD5 000EE6  
                                          u5515 1F56                                            u5435 1EFE  
                                          u5516 1F58                                            u5436 1F00  
                                          u5455 1F14                                            u5456 1F16  
                                          u5475 1F2A                                            u5476 1F2C  
                                          u5495 1F40                                            u5496 1F42  
                                          _TMR2 000FBB                                            _TMR4 000FB5  
                                          _WPUA 000F10                                            _WPUB 000F18  
                                          _WPUC 000F20                                            _WPUD 000F25  
                                          _WPUE 000F2D                                   _INT2_CallBack 27FA  
                                 _EUSART1_Write 247E                                   __CFG_FCMEN$ON 000000  
                        MRF89XA_Initialize@Mode 0182                                            _main 182A  
                                 ?_EUSART1_Read 0031                                            fsr2h 000FDA  
                                          indf2 000FDF                                            fsr1l 000FE1  
                                          fsr2l 000FD9                                            btemp 0052  
              ??_IOCCF5_DefaultInterruptHandler 0031                 ?_IOCCF5_DefaultInterruptHandler 0031  
             __size_of_INT2_SetInterruptHandler 000A                       ?_INT2_SetInterruptHandler 00F8  
                                          prodh 000FF4                                            prodl 000FF3  
                                          start 00C8                                  _spi2_writeByte 000000  
                  MRF89XA_SPI_ExchangeByte@byte 00F9                                   __CFG_CSWEN$ON 000000  
                    ??_TMR4_SetInterruptHandler 00FA                                    ___param_bank 000000  
                                  _G_StartAfter 00CC                                   __CFG_SCANE$ON 000000  
                              __end_of_INT0_ISR 2B18                                __end_of_INT1_ISR 2B0E  
                              ?_I2C_Master_Init 0031                                __end_of_INT2_ISR 2B04  
                               ?_FVR_Initialize 0031                             __size_of_IOCAF0_ISR 0026  
                           __size_of_IOCAF1_ISR 0026                                ?_I2C_Master_Stop 0031  
                __size_of_OSCILLATOR_Initialize 0018                             __size_of_IOCAF3_ISR 0026  
                    __end_of_MRF89XA_GetAddress 28CE               i2MRF89XA_ExchangeConfig_A@Address 0035  
               MRF89XA_ExchangeConfig_A@Address 00FC                             __size_of_IOCAF4_ISR 0026  
                 __end_of_OSCILLATOR_Initialize 2934                                 __end_of_RunLoop 223A  
                    __size_of_spi2_exchangeByte 001A                             __size_of_IOCBF5_ISR 0026  
                           __size_of_IOCCF3_ISR 0026                             __size_of_IOCCF4_ISR 0026  
                           __size_of_IOCCF5_ISR 0026                             __size_of_IOCCF6_ISR 0026  
                         _eusart1RxStatusBuffer 0060                             __size_of_IOCCF7_ISR 0026  
                                         ?_main 0031                                   __CFG_WDTE$OFF 000000  
                                         _T2CON 000FBD                                           _T4CON 000FB7  
                                         _T2HLT 000FBE                                           _T4HLT 000FB8  
                                __CFG_DEBUG$OFF 000000                                           _T2TMR 000FBB  
                                         _T2RST 000FC0                                           _T4TMR 000FB5  
                                         i2l222 0028                                           i2l231 005C  
                                         i2l224 0034                                           i2l233 0074  
                                         i2l226 0040                                           _T4RST 000FBA  
                                         i2l235 0092                                           i2l228 004C  
                                         i2l237 009E                                           i2l238 00B4  
                                         i2l239 00AA                        __end_of_MRF89XA_IsTxDone 29B8  
                                         i2l902 25A4                          ?_MRF89XA_SetModulation 0031  
                                         _OSCEN 000EDC                                           _TRISA 000F88  
                                         _TRISB 000F89                                  ?_INT0_CallBack 0031  
                                         _TRISC 000F8A                                           _TRISD 000F8B  
                                         _TRISE 000F8C                                   __CFG_WRT0$OFF 000000  
                               _TMR4_Initialize 2522                                   __CFG_WRT1$OFF 000000  
                                 __CFG_WRT2$OFF 000000                                   __CFG_WRT3$OFF 000000  
                          _EUSART1_Transmit_ISR 257E                                  __CFG_EBTR0$OFF 000000  
                                __CFG_EBTR1$OFF 000000                                  __CFG_EBTR2$OFF 000000  
                                __CFG_EBTR3$OFF 000000                                  _R_BlinkCounter 001B  
                              __end_of_TMR2_ISR 2AFA                                   __CFG_WRTB$OFF 000000  
                                 __CFG_WRTC$OFF 000000                                __end_of_TMR4_ISR 27BA  
                                 __CFG_WRTD$OFF 000000                                  ?_INT1_CallBack 0031  
                                __CFG_EBTRB$OFF 000000                        __end_of_MRF89XA_SendData 2522  
                       __end_of_PIN_MANAGER_IOC 22E2                  ??_INT1_DefaultInterruptHandler 0031  
                              __end_ofi2_SetLed 1FF2                              __CFG_MCLRE$EXTMCLR 000000  
                                ?_INT2_CallBack 0031                        _INT1_SetInterruptHandler 2AA0  
                                ?_EUSART1_Write 0031                                      SetLed@Mode 00FA  
                                         pclath 000FFA                                           tablat 000FF5  
                                ??_EUSART1_Read 00F8                                 _spi2_writeBlock 000000  
                                         ttemp5 0053                                           ttemp6 0056  
                                         ttemp7 005A                                           status 000FD8  
                            _RGB_R_BlinkCounter 00B6                                           wtemp8 0053  
    __end_of_EUSART1_DefaultFramingErrorHandler 2B7A     __size_of_EUSART1_DefaultFramingErrorHandler 0002  
          ??_EUSART1_DefaultFramingErrorHandler 0031             ?_EUSART1_DefaultFramingErrorHandler 0031  
            _EUSART1_DefaultFramingErrorHandler 2B78                __end_of_MRF89XA_ExchangeConfig_A 2798  
                               ??i2_SetLedBlink 003B                           spi_master_open@config 00FA  
                              ?_I2C_SendCommand 003C                                   ??_SetLedBlink 00F8  
                             _ext_rf_initialize 2A14                                 __initialization 22E2  
               spi2_open@spiUniqueConfiguration 00F9                           MRF89XA_GetAddress@ret 00FA  
                    __end_of_EUSART1_Initialize 210A                                    __end_of_main 19F2  
                       __end_of_DAC1_Initialize 29F0                              ?_ext_rf_initialize 0031  
                       __end_of_TMR2_Initialize 257E                     ?_INTERRUPT_InterruptManager 0031  
                       __end_of_TMR2_Custom_ISR 148C                              __size_of_Delay_Xms 0060  
                   ?i2_MRF89XA_SPI_ExchangeByte 0031                        _MRF89XA_SPI_ExchangeByte 29CA  
                       MRF89XA_WriteConfig@Data 00FE                        _TMR2_SetInterruptHandler 2A28  
                                        ??_main 0100                                   __activetblptr 000003  
                    __end_of_MRF89XA_ReadConfig 2990                             ??_ext_rf_initialize 00FA  
                            __size_of_GetTarget 0016                         _IOCAF4_InterruptHandler 00E4  
                         ?_EUSART1_Transmit_ISR 0031                               ?_I2C_Master_Start 0031  
                             ?_I2C_Master_Write 0031                                      _SentI2CCmd 0029  
                  ??_IOCAF0_SetInterruptHandler 00FA                      __end_of_MRF89XA_Initialize 1C7A  
                  ??_IOCAF3_SetInterruptHandler 00FA                              ??_I2C_Master_Start 0031  
                            ??_I2C_Master_Write 003B                    ??_IOCBF5_SetInterruptHandler 00FA  
                  ??_IOCCF4_SetInterruptHandler 00FA                             _MRF89XA_WriteConfig 28CE  
                                        _ANSELA 000F11                                          _ANSELB 000F19  
                                        _ANSELC 000F21                                          _ANSELD 000F26  
                                        _ANSELE 000F2E                    ??_IOCCF7_SetInterruptHandler 00FA  
                                        _RC1REG 000F99                                          _RB1PPS 000EF0  
                                        _RB2PPS 000EF1                                          _RB3PPS 000EF2  
                                        _RC1STA 000F9D                                          _RB4PPS 000EF3  
                                        _RD0PPS 000EFF                                          _RD2PPS 000F01  
                                        _ODCONA 000F0F                                          _ODCONB 000F17  
                                        _ODCONC 000F1F                                          _ODCOND 000F24  
                                        _ODCONE 000F2C                    __size_of_EUSART1_is_rx_ready 0004  
                                        i2l1097 29BE                                  __CFG_WDTCCS$SC 000000  
                                        i2l2069 2516                                          i2l1574 148A  
                                        i2l5022 1218                                          i2l5006 11CC  
                                        i2l5032 1256                                          i2l5008 11D2  
                                        i2l5106 13E8                                          i2l5050 12BA  
                                        i2l1940 2168                                          i2l1692 1E36  
                                        i2l5116 1426                                          i2l5132 1484  
                                        i2l1933 2130                                          i2l1694 1E48  
                                        i2l1872 2A0A                                          i2l1936 2166  
                                        i2l1928 211C                                          i2l1696 1E5A  
                                        i2l5064 1300                                          i2l5048 12B4  
                                        i2l1937 2160                                          i2l4610 16A6  
                                        i2l5074 133E                                          i2l5090 139C  
                                        i2l1884 25CA                                          i2l4620 16F2  
                                        i2l1892 243C                                          i2l5092 13A2  
                                        i2l1878 29FE                                          i2l4630 1740  
                                        i2l4640 178E                                          i2l4650 17DC  
                                        i2l4706 2124                                          i2l4810 1F9A  
                                        i2l4802 1F72                                          i2l4716 2136  
                                        i2l4750 1CEA                                          i2l4742 1C9E  
                                        i2l4822 1FDC                                          i2l4814 1FB0  
                                        i2l4806 1F86                                          i2l4584 2960  
                                        i2l5642 25A0                                          i2l4754 1D10  
                                        i2l4746 1CC4                                          i2l4818 1FC6  
                                        i2l4906 0FA0                                          i2l4922 0FFC  
                                        i2l4692 235C                                          i2l4764 2502  
                                        i2l4924 1002                                          i2l5662 2080  
                                        i2l4758 1D34                                          i2l4872 2876  
                                        i2l4688 2342                                          i2l4938 1048  
                                        i2l4980 1130                                          i2l4948 1086  
                                        i2l4964 10E4                                          i2l4990 116E  
                                        i2l4966 10EA                                          i2l4896 0F62  
                                        _FVRCON 000F31                     i2MRF89XA_GetAddress@Address 0032  
                                        _OSCFRQ 000EDE                    __size_of_EUSART1_is_tx_ready 0004  
                                        _RX1PPS 000EB5                                          _TX1REG 000F9A  
                                        _TX1STA 000F9E                       __end_of_ext_rf_initialize 2A1E  
                             ??_MRF89XA_SetMode 0100                                i2Delay_Xms@delay 0031  
                                __CFG_PWRTE$OFF 000000                                    ?i2_Delay_Xms 0031  
                                __CFG_XINST$OFF 000000                                          _SetLed 1EC0  
                             _CLKREF_Initialize 29F0                                       ??_RunLoop 00F9  
                              _EXT_TARGET_RF_RX 002A                              ?_CLKREF_Initialize 0031  
                          ?_MRF89XA_WriteConfig 00FE                                  __CFG_STVREN$ON 000000  
                            spi2_exchangeByte@b 00F8                        ?_EUSART1_SetErrorHandler 00F8  
                       i2SetLedBlink@StartAfter 0037                         __end_of_TMR4_Initialize 2550  
                                        clear_0 2308                                          clear_1 2314  
                                        clear_2 2320                             __end_of_SetLedBlink 165C  
           __size_of_IOCAF0_SetInterruptHandler 000A             __size_of_IOCAF3_SetInterruptHandler 000A  
              ??_EUSART1_SetOverrunErrorHandler 00FA                 ?_EUSART1_SetOverrunErrorHandler 00F8  
                               ??_INT0_CallBack 0041                                __end_of_spi2_isr 2AF0  
           __size_of_IOCBF5_SetInterruptHandler 000A             __size_of_IOCCF4_SetInterruptHandler 000A  
                           ??_CLKREF_Initialize 00F8             __size_of_IOCCF7_SetInterruptHandler 000A  
          __end_of_TMR4_DefaultInterruptHandler 2B5C           __size_of_TMR4_DefaultInterruptHandler 0002  
                  _TMR4_DefaultInterruptHandler 2B5A                                  _PMD_Initialize 2896  
          __end_of_INT2_DefaultInterruptHandler 2B74           __size_of_INT2_DefaultInterruptHandler 0002  
                  _INT2_DefaultInterruptHandler 2B72                                    __pdataCOMRAM 0045  
                               ??_INT1_CallBack 0031                              __size_of_ToggleLed 00DC  
                                  __mediumconst 0000                                     SetLed@mode2 00FC  
                                        tblptrh 000FF7                                          tblptrl 000FF6  
                                        tblptru 000FF8                                 ??_INT2_CallBack 0031  
                               ??_EUSART1_Write 00F8                                _RGB_B_BlinkCount 0003  
      TMR4_SetInterruptHandler@InterruptHandler 00F8      IOCCF7_SetInterruptHandler@InterruptHandler 00F8  
    IOCCF6_SetInterruptHandler@InterruptHandler 00F8      IOCCF5_SetInterruptHandler@InterruptHandler 00F8  
    IOCCF4_SetInterruptHandler@InterruptHandler 00F8      IOCCF3_SetInterruptHandler@InterruptHandler 00F8  
    IOCBF5_SetInterruptHandler@InterruptHandler 00F8      IOCAF4_SetInterruptHandler@InterruptHandler 00F8  
    IOCAF3_SetInterruptHandler@InterruptHandler 00F8      IOCAF1_SetInterruptHandler@InterruptHandler 00F8  
    IOCAF0_SetInterruptHandler@InterruptHandler 00F8        INT2_SetInterruptHandler@InterruptHandler 00F8  
      INT1_SetInterruptHandler@InterruptHandler 00F8        INT0_SetInterruptHandler@InterruptHandler 00F8  
      TMR2_SetInterruptHandler@InterruptHandler 00F8                                ?_PIN_MANAGER_IOC 0031  
                               _eusart1RxBuffer 0100                                    ??_IOCAF0_ISR 0031  
                                  ??_IOCAF1_ISR 0031                                    ??_IOCAF3_ISR 0031  
                           MRF89XA_SetMode@Mode 0181                                    ??_IOCAF4_ISR 0031  
                          __size_of_MASTER_open 0008                                    ??_IOCBF5_ISR 0031  
                 __size_of_INTERRUPT_Initialize 0004                                    ??_IOCCF3_ISR 0031  
                                  ??_IOCCF4_ISR 0031                                    ??_IOCCF5_ISR 0031  
                                  ??_IOCCF6_ISR 0031                                 _eusart1TxBuffer 0140  
                                  ??_IOCCF7_ISR 0031                             MRF89XA_SetMode@mask 0180  
                             ToggleLed@ledIndex 0031                               _SYSTEM_Initialize 223A  
                             __end_of_Delay_Xms 21E2                                      __accesstop 0060  
                       __end_of__initialization 2326                                GetTarget@Address 00F8  
                           _I2C_Master_Send_ACK 25AA                                       ?_INT0_ISR 0031  
                                     ?_INT1_ISR 0031                                       ?_INT2_ISR 0031  
        __end_of_IOCAF1_DefaultInterruptHandler 2B70         __size_of_IOCAF1_DefaultInterruptHandler 0002  
                               _INT0_Custom_ISR 2934                  _IOCAF1_DefaultInterruptHandler 2B6E  
                         __end_of_TMR2_CallBack 27FA                              ?_SYSTEM_Initialize 0031  
                     __end_of_CLKREF_Initialize 29FC                                   ___rparam_used 000001  
                             __end_of_GetTarget 297A                            i2SetLedBlink@OffTime 0035  
                __size_of_EUSART1_RxDataHandler 0020                   __end_of_EUSART1_RxDataHandler 287A  
                        MRF89XA_GetAddress@Read 00F8                      __end_of_spi2_configuration 0F1D  
                                __pcstackCOMRAM 0031                           ??_MRF89XA_WriteConfig 00FF  
                         __end_of_TMR4_CallBack 27DA                             ??_SYSTEM_Initialize 00FE  
                   ?i2_MRF89XA_ExchangeConfig_A 0034                        _MRF89XA_ExchangeConfig_A 2776  
                              ?_DAC1_Initialize 0031                                       ?_TMR2_ISR 0031  
                                     ?_TMR4_ISR 0031                                    _R_BlinkCount 001D  
        __end_of_IOCAF4_DefaultInterruptHandler 2B6C         __size_of_IOCAF4_DefaultInterruptHandler 0002  
                _IOCAF4_DefaultInterruptHandler 2B6A                                ?_TMR2_Initialize 0031  
                                     ?i2_SetLed 0031                                ?_TMR2_Custom_ISR 0031  
                          ?_I2C_Master_Send_ACK 0031                          __end_of_PMD_Initialize 28B2  
                            __end_of_IOCAF0_ISR 2776                              __end_of_IOCAF1_ISR 2750  
                            __end_of_IOCAF3_ISR 272A                              __end_of_IOCAF4_ISR 2704  
                          __end_of_EUSART1_Read 2402                              __end_of_IOCBF5_ISR 26DE  
                            __end_of_IOCCF3_ISR 26B8                              __end_of_IOCCF4_ISR 2692  
                            __end_of_IOCCF5_ISR 266C                              __end_of_IOCCF6_ISR 2646  
                            __end_of_IOCCF7_ISR 2620                          ??_EUSART1_Transmit_ISR 0031  
                   __size_of_EXT_INT_Initialize 0046                __end_of_INT2_SetInterruptHandler 2AA0  
                   __end_of_EUSART1_Receive_ISR 2086                   ?_TMR4_DefaultInterruptHandler 0031  
                 __size_of_MRF89XA_ExchangeFifo 0014                   ?_INT2_DefaultInterruptHandler 0031  
                   ?_IOCCF3_SetInterruptHandler 00F8                          I2C_Master_Send_ACK@Ack 0032  
                   ?_IOCCF6_SetInterruptHandler 00F8                       __end_of_SYSTEM_Initialize 228E  
                 __size_ofi2_MRF89XA_GetAddress 0018                                   _eusart1RxHead 002E  
                                 _eusart1TxHead 0030                                   _eusart1RxTail 002D  
                                    __pbssBANK0 0060                                      __pbssBANK1 0100  
                                 _eusart1TxTail 002F               _EUSART1_TxDefaultInterruptHandler 00EE  
               ??_EUSART1_SetRxInterruptHandler 00FA                           _INT0_InterruptHandler 00F4  
                                    ??_INT0_ISR 0041                                      ??_INT1_ISR 0031  
                                    ??_INT2_ISR 0031                                      __pnvCOMRAM 0051  
                         _TMR4_InterruptHandler 00D0                        __size_of_spi_master_open 001C  
                    __size_of_ext_rf_initialize 000A                    __size_of_I2C_BusCollisionISR 0006  
                       _IOCCF3_InterruptHandler 00E0                         i2MRF89XA_GetAddress@ret 0033  
                                       ?_SetLed 00F8                 __end_of_EUSART1_SetErrorHandler 2AE6  
                             __end_of_ToggleLed 1D56                                ??_FVR_Initialize 00F8  
                                   _SetLedBlink 148C                              __size_of_spi2_open 00C2  
                               __CFG_PPS1WAY$ON 000000                                      ??_TMR2_ISR 0037  
                                    ??_TMR4_ISR 0031                         ??_MRF89XA_SetModulation 0100  
                         ??_I2C_Master_Send_ACK 0031                                      ??i2_SetLed 0035  
                              ?_TMR4_Initialize 0031          __end_of_IOCCF5_DefaultInterruptHandler 2B64  
       __size_of_IOCCF5_DefaultInterruptHandler 0002                  _IOCCF5_DefaultInterruptHandler 2B62  
                               ?_PMD_Initialize 0031                                         _CLKRCLK 000F3F  
                                       _CLKRCON 000F3E                          __size_of_ext_rf_runcmd 00A8  
        __end_of_EUSART1_SetFramingErrorHandler 2ADC         __size_of_EUSART1_SetFramingErrorHandler 000A  
                _EUSART1_SetFramingErrorHandler 2AD2                                  Delay_Xms@delay 00F8  
                  __size_ofi2_spi2_exchangeByte 0012                      ??_INT1_SetInterruptHandler 00FA  
                                       _INT0PPS 000EA1                                         _INT1PPS 000EA2  
                                       _INT2PPS 000EA3                               ?_MRF89XA_IsTxDone 0031  
                  ?_EUSART1_DefaultErrorHandler 0031                                         _SP1BRGH 000F9C  
            __end_of_IOCAF0_SetInterruptHandler 2A96                      _IOCAF0_SetInterruptHandler 2A8C  
                                       _SP1BRGL 000F9B              __end_of_IOCAF3_SetInterruptHandler 2A82  
                    _IOCAF3_SetInterruptHandler 2A78                                         _OSCCON1 000ED8  
                                       _OSCCON3 000EDA              __end_of_IOCBF5_SetInterruptHandler 2A6E  
                    _IOCBF5_SetInterruptHandler 2A64                                         _OSCTUNE 000EDD  
                            ??_MRF89XA_IsTxDone 0038              __end_of_IOCCF4_SetInterruptHandler 2A5A  
                    _IOCCF4_SetInterruptHandler 2A50                                         _SSP1ADD 000F93  
                                       _SSP2ADD 000E93                                         _SLRCONA 000F0E  
                                       _SLRCONB 000F16                                         _SLRCONC 000F1E  
                                       _SLRCOND 000F23                                         _SLRCONE 000F2B  
                                       _SSP1BUF 000F92                                         _SSP2BUF 000E92  
                       __end_of_INT0_Custom_ISR 294C                      MRF89XA_WriteConfig@Address 00FF  
            __end_of_IOCCF7_SetInterruptHandler 2A3C                      _IOCCF7_SetInterruptHandler 2A32  
                                       _SSP1MSK 000F94                                         _B_State 004B  
              ??_IOCCF3_DefaultInterruptHandler 0031                 ?_IOCCF3_DefaultInterruptHandler 0031  
                             ?_MRF89XA_SendData 003A                              _MRF89XA_GetAddress 28B2  
                                       _G_State 004D                              ??_MRF89XA_SendData 003B  
             __size_of_INT0_SetInterruptHandler 000A                                         _R_State 004F  
                    __size_of_CLKREF_Initialize 000C                       ?_INT0_SetInterruptHandler 00F8  
                           ?_MRF89XA_GetAddress 00F8                                       ?_spi2_isr 0031  
                    ??_MRF89XA_SPI_ExchangeByte 00F9                                         __Hparam 0000  
              ??_IOCCF6_DefaultInterruptHandler 0031                 ?_IOCCF6_DefaultInterruptHandler 0031  
                                       __Lparam 0000                      ??_TMR2_SetInterruptHandler 00FA  
                               __size_of_SetLed 009A                      __CFG_RSTOSC$HFINTOSC_64MHZ 000000  
                                       _RunLoop 21E2                            __size_ofi2_Delay_Xms 004A  
                              _RGB_B_StartAfter 00A4                                   _RGB_B_Enabled 00A6  
                              _RGB_G_BlinkCount 0007                                    __psmallconst 0F00  
                                 _RGB_B_OffTime 00A8                                   _RGB_B_Counter 0005  
                           _EUSART1_is_rx_ready 2B56                                         __pcinit 22E2  
                          MRF89XA_SendData@Data 003A                                         __ramtop 0F00  
                           _EUSART1_is_tx_ready 2B52                                         __ptext0 182A  
                                       __ptext1 2A14                                         __ptext2 2964  
                                       __ptext3 223A                                         __ptext4 287A  
                                       __ptext5 2B2C                                         __ptext6 1D56  
                                       __ptext7 2522                                         __ptext8 2A1E  
                                       __ptext9 2550                            ??_MRF89XA_GetAddress 00F9  
                         _OSCILLATOR_Initialize 291C                                       _T2CONbits 000FBD  
                                 _RGB_G_Enabled 00B0                                       _T4CONbits 000FB7  
                            _EUSART1_Initialize 2086                        ??_PIN_MANAGER_Initialize 00FA  
             __size_of_TMR4_SetInterruptHandler 000A                                       _T2HLTbits 000FBE  
                                     _IOCAFbits 000F0A                                       _IOCBFbits 000F12  
                                     _IOCCFbits 000F1A                       ?_TMR4_SetInterruptHandler 00F8  
                      __size_of_I2C_Master_Init 003A                                   _RGB_G_OffTime 00B2  
                                 _RGB_G_Counter 0009                                       _IOCANbits 000F0B  
                                     _IOCAPbits 000F0C                                       _IOCBNbits 000F13  
                                     _IOCBPbits 000F14                                       _IOCCNbits 000F1B  
                                     _IOCCPbits 000F1C                        __size_of_I2C_Master_Stop 000C  
                                     _T4HLTbits 000FB8                                      _spi2_close 000000  
                 ??_EUSART1_DefaultErrorHandler 0031                                 _MRF89XA_SetMode 24B8  
                             __end_of_spi2_open 1E18                      __size_of_SYSTEM_Initialize 0054  
                                  _R_StartAfter 001F                            end_of_initialization 2326  
                          ?_EUSART1_is_rx_ready 0031                                       _T2RSTbits 000FC0  
                      _INT2_SetInterruptHandler 2A96                  ??_TMR4_DefaultInterruptHandler 0031  
                           ?_EUSART1_Initialize 0031                  ??_INT2_DefaultInterruptHandler 0031  
                            _MRF89XA_ReadConfig 297A                            ?_EUSART1_is_tx_ready 0031  
                                     _T4RSTbits 000FBA                                   _ext_rf_runcmd 1E18  
                   _EUSART1_OverrunErrorHandler 00D4                               __end_of_spiMaster 0F15  
                                    ??_spi2_isr 0031                       __size_of_I2C_Master_Start 000C  
                     __size_of_I2C_Master_Write 0042           __end_of_EUSART1_SetRxInterruptHandler 2AC8  
        __size_of_EUSART1_SetRxInterruptHandler 000A                   _EUSART1_SetRxInterruptHandler 2ABE  
                            _MRF89XA_Initialize 1B5E                             ?_MRF89XA_ReadConfig 0031  
                         __end_ofi2_SetLedBlink 182A                                       _B_Enabled 00C4  
                                       postdec1 000FE5                                         postinc0 000FEE  
                         __size_of_EUSART1_Read 0042                                   _RGB_R_Enabled 00BA  
                                     _B_OffTime 00C6                                       _B_Counter 0011  
                             ??_spi_master_open 00FA                             ?_MRF89XA_Initialize 0182  
                          ??_EUSART1_Initialize 00FA                                   _RGB_R_OffTime 00BC  
                                 _RGB_R_Counter 000D                           __CFG_WDTCPS$WDTCPS_31 000000  
                      __size_of_I2C_SendCommand 0078                           _INT1_InterruptHandler 00F2  
                                     _PORTCbits 000F8F                                       _G_Enabled 00CE  
                       _IOCAF0_InterruptHandler 00EA                                       _G_OffTime 0017  
                       _IOCCF4_InterruptHandler 00DE                                       _G_Counter 0015  
                                 _spi2_readByte 000000                            ??_MRF89XA_ReadConfig 0037  
                                     _TRISBbits 000F89                                       _TRISDbits 000F8B  
                  ??_IOCAF1_SetInterruptHandler 00FA                    ??_IOCAF4_SetInterruptHandler 00FA  
                              ?_INT0_Custom_ISR 0031                __size_of_EUSART1_SetErrorHandler 000A  
                           EUSART1_Write@txData 00F8                                __CFG_FEXTOSC$OFF 000000  
                  ??_IOCCF5_SetInterruptHandler 00FA                           ??_EUSART1_is_rx_ready 00F8  
                          ??_MRF89XA_Initialize 0100                     _spi2_exchangeByte$intlevel0 28EE  
                         I2C_SendCommand@Target 003E                           ??_EUSART1_is_tx_ready 00F8  
                                ?_ext_rf_runcmd 0031                      ??_MRF89XA_ExchangeConfig_A 00FC  
                         MRF89XA_WriteFifo@Data 0035                                    _EUSART1_Read 23C0  
                                     _Delay_Xms 2182                               __size_of_INT0_ISR 000A  
                             __size_of_INT1_ISR 000A                               __size_of_INT2_ISR 000A  
                         I2C_SendCommand@result 003D            __size_of_EUSART1_DefaultErrorHandler 0006  
                                     _R_Enabled 0023                                  __end_of_SetLed 1F5A  
                                     _GetTarget 2964                    __end_of_INTERRUPT_Initialize 2B52  
                                     _R_OffTime 0025                                       _R_Counter 0021  
          __end_of_TMR2_DefaultInterruptHandler 2B5E           __size_of_TMR2_DefaultInterruptHandler 0002  
                  _TMR2_DefaultInterruptHandler 2B5C            __end_of_INT0_DefaultInterruptHandler 2B78  
         __size_of_INT0_DefaultInterruptHandler 0002                    _INT0_DefaultInterruptHandler 2B76  
                                 __pidataCOMRAM 29D8             __size_of_IOCAF1_SetInterruptHandler 000A  
                             __size_of_TMR2_ISR 000A                               __size_of_TMR4_ISR 0022  
           __size_of_IOCAF4_SetInterruptHandler 000A                          ?_OSCILLATOR_Initialize 0031  
                       __end_of_MRF89XA_SetMode 24F2             __size_of_IOCCF5_SetInterruptHandler 000A  
                             __size_ofi2_SetLed 0098                           __end_of_INT0_CallBack 285A  
                           _I2C_BusCollisionISR 2B3C                              _spi2_configuration 0F15  
                           start_initialization 22E2                                   ??_MASTER_open 00FA  
               __size_of_PIN_MANAGER_Initialize 016C                           __end_of_INT1_CallBack 283A  
 EUSART1_SetRxInterruptHandler@interruptHandler 00F8   EUSART1_SetTxInterruptHandler@interruptHandler 00F8  
                              _RGB_G_StartAfter 00AE                           __end_of_INT2_CallBack 281A  
                         __end_of_EUSART1_Write 24B8                   i2MRF89XA_ExchangeConfig_A@ret 0036  
               MRF89XA_SetModulation@Modulation 0180                           i2SetLedBlink@ledIndex 0031  
                             ??_I2C_Master_Init 00F8                               ??_I2C_Master_Stop 0031  
                   __end_of_MRF89XA_WriteConfig 28E8                             i2_spi2_exchangeByte 29B8  
                          ?_I2C_BusCollisionISR 0031                        __size_of_PIN_MANAGER_IOC 0054  
                                    ?_Delay_Xms 00F8                    __end_of_MRF89XA_ExchangeFifo 29A4  
                                      ??_SetLed 00FC                                __CFG_LPBOREN$OFF 000000  
                                  ?_SetLedBlink 0180                    __end_ofi2_MRF89XA_GetAddress 2964  
                              ??_PMD_Initialize 00F8                                      ?_GetTarget 0031  
                         _EUSART1_RxDataHandler 285A                            i2spi2_exchangeByte@b 0031  
                ?_EUSART1_SetRxInterruptHandler 00F8                                  _G_BlinkCounter 00CA  
                                     _ToggleLed 1C7A                      __end_of_EXT_INT_Initialize 23C0  
                 ?_TMR2_DefaultInterruptHandler 0031                   ?_INT0_DefaultInterruptHandler 0031  
              ??_IOCAF0_DefaultInterruptHandler 0031                 ?_IOCAF0_DefaultInterruptHandler 0031  
                __size_of_MRF89XA_SetModulation 0026                   __end_of_MRF89XA_SetModulation 25FA  
                                _eusart1RxCount 002C                            ?i2_spi2_exchangeByte 0031  
                        __size_of_TMR2_CallBack 0020                        __size_of_DAC1_Initialize 000C  
                         TMR4_ISR@CountCallBack 0001                                     __pbssCOMRAM 0001  
             _EUSART1_RxDefaultInterruptHandler 00EC                __end_of_INT0_SetInterruptHandler 2AB4  
                            _RGB_G_BlinkCounter 00AC                   __size_of_EUSART1_Transmit_ISR 002C  
                   ?_IOCAF0_SetInterruptHandler 00F8                                   __pcstackBANK0 00F8  
                                 __pcstackBANK1 0180                             i2SetLedBlink@OnTime 0033  
                   ?_IOCAF3_SetInterruptHandler 00F8                               ??_I2C_SendCommand 003D  
                      __size_of_TMR2_Initialize 002E                        __size_of_TMR2_Custom_ISR 056E  
                   ?_IOCBF5_SetInterruptHandler 00F8                     ?_IOCCF4_SetInterruptHandler 00F8  
                   ?_IOCCF7_SetInterruptHandler 00F8                                 ??_ext_rf_runcmd 003F  
              ??_IOCAF3_DefaultInterruptHandler 0031                 ?_IOCAF3_DefaultInterruptHandler 0031  
                        __size_of_TMR4_CallBack 0020                 ??_EUSART1_SetTxInterruptHandler 00FA  
              ??_EUSART1_SetFramingErrorHandler 00FA                 ?_EUSART1_SetFramingErrorHandler 00F8  
                  __size_of_EUSART1_Receive_ISR 0094                             __end_of_MASTER_open 2B34  
                         _INT2_InterruptHandler 00F0                        MRF89XA_ExchangeFifo@Data 0033  
                      i2MRF89XA_GetAddress@Read 0031                           ??_I2C_BusCollisionISR 0031  
                     __size_of_MRF89XA_IsTxDone 0014                                       __pnvBANK0 00D0  
                              _I2C_Master_Start 2A08                                _I2C_Master_Write 2402  
                       _IOCAF1_InterruptHandler 00E8                       MRF89XA_SetModulation@mask 0181  
                       _IOCCF5_InterruptHandler 00DC                          _PIN_MANAGER_Initialize 19F2  
                   __end_of_I2C_Master_Send_ACK 25D4          __end_of_IOCCF3_DefaultInterruptHandler 2B68  
       __size_of_IOCCF3_DefaultInterruptHandler 0002                  _IOCCF3_DefaultInterruptHandler 2B66  
                             __size_of_spi2_isr 000A                                        ?_RunLoop 0031  
                                     __pintcode 0008                       __size_of_MRF89XA_SendData 0030  
              __end_of_TMR4_SetInterruptHandler 2A28                                       __ptext100 2990  
                                     __ptext101 29A4                                       __ptext110 165C  
                                     __ptext102 297A                                       __ptext111 29FC  
                                     __ptext103 294C                                       __ptext120 285A  
                                     __ptext112 2A08                                       __ptext104 2902  
                                     __ptext121 0000                                       __ptext113 25AA  
                                     __ptext105 2B22                                       __ptext114 2B3C  
                                     __ptext106 29B8                                       __ptext115 257E  
                                     __ptext107 210A                                       __ptext116 1FF2  
                                     __ptext108 2330                                       __ptext117 2B42  
                                     __ptext109 2402                                       __ptext118 2B78  
                                     __ptext119 2B48                                      ?_ToggleLed 0031  
                                      _DAC1CON0 000F33                                        _DAC1CON1 000F34  
                          I2C_Master_Write@data 003B                    ??_INTERRUPT_InterruptManager 0041  
                              i2SetLed@ledIndex 0031                    ??i2_MRF89XA_SPI_ExchangeByte 0032  
                         _spi2_interruptHandler 00A0                              I2C_SendCommand@CMD 003C  
                         ??i2_spi2_exchangeByte 0031                                ?_MRF89XA_SetMode 0031  
                                      _BAUD1CON 000F9F                ??_IOCBF5_DefaultInterruptHandler 0031  
               ?_IOCBF5_DefaultInterruptHandler 0031                                     __smallconst 0F00  
                    ??_INT2_SetInterruptHandler 00FA          __end_of_IOCCF6_DefaultInterruptHandler 2B62  
       __size_of_IOCCF6_DefaultInterruptHandler 0002                  _IOCCF6_DefaultInterruptHandler 2B60  
    __end_of_EUSART1_DefaultOverrunErrorHandler 2B48     __size_of_EUSART1_DefaultOverrunErrorHandler 0006  
          ??_EUSART1_DefaultOverrunErrorHandler 0031             ?_EUSART1_DefaultOverrunErrorHandler 0031  
            _EUSART1_DefaultOverrunErrorHandler 2B42                                 ext_rf_runcmd@dx 003F  
                          _EUSART1_ErrorHandler 00D2              __end_of_IOCAF1_SetInterruptHandler 2A8C  
                    _IOCAF1_SetInterruptHandler 2A82              __end_of_IOCAF4_SetInterruptHandler 2A78  
                    _IOCAF4_SetInterruptHandler 2A6E                                    i2Delay_Xms@i 0036  
                       _EUSART1_SetErrorHandler 2ADC                        __size_of_TMR4_Initialize 002E  
                 MRF89XA_SendData@TargetAddress 003B              __end_of_IOCCF5_SetInterruptHandler 2A50  
                    _IOCCF5_SetInterruptHandler 2A46                    MRF89XA_Initialize@Modulation 0183  
                                  _RGB_B_OnTime 00AA                                        _T2CLKCON 000FBF  
                                      _T4CLKCON 000FB9                            _INTERRUPT_Initialize 2B4E  
              ??_IOCCF4_DefaultInterruptHandler 0031                 ?_IOCCF4_DefaultInterruptHandler 0031  
                                  _RGB_G_OnTime 00B4                       MRF89XA_GetAddress@Address 00F9  
                               _spi_master_open 287A                                       _spi2_open 1D56  
                                      _INT0_ISR 2B0E                                        _INT1_ISR 2B04  
                                      _INT2_ISR 2AFA         EUSART1_SetErrorHandler@interruptHandler 00F8  
                                      _LATCbits 000F85                                        _LATDbits 000F86  
                                      _LATEbits 000F87               __size_of_INT1_SetInterruptHandler 000A  
                     ?_INT1_SetInterruptHandler 00F8                                   _TMR2_CallBack 27DA  
                                      _PIE0bits 000EC2                                        _PIE3bits 000EC5  
                                      _PIE4bits 000EC6                                   ??i2_Delay_Xms 0035  
                   MRF89XA_ExchangeConfig_A@ret 00FD                                     ??_Delay_Xms 00FC  
                                      i2u302_40 1C8C                                        i2u311_40 1CFE  
           __size_of_INTERRUPT_InterruptManager 00C0                                        i2u303_48 1C8E  
                                      i2u312_48 1D00                                        i2u305_40 1CB0  
                                      i2u314_40 1D24                                        i2u401_48 2808  
                                      i2u306_48 1CB2                                        i2u331_45 1FAC  
                                      i2u331_46 1FAE                                        i2u315_48 1D26  
                                      i2u308_40 1CD8                                        i2u317_40 1D48  
                                      i2u420_48 2712                                        i2u420_49 2724  
                                      i2u333_45 1FC2                                        i2u333_46 1FC4  
                                      i2u309_48 1CDA                                        i2u318_48 1D4A  
                                      i2u422_48 26EC                                        i2u430_48 2654  
                                      i2u422_49 26FE                                        i2u430_49 2666  
                                      _PIR0bits 000ECA                                        i2u335_45 1FD8  
                                      i2u327_45 1F82                                        i2u335_46 1FDA  
                                      i2u327_46 1F84                                        i2u416_48 275E  
                                      i2u424_48 26C6                                        i2u432_48 262E  
                                      i2u416_49 2770                                        i2u424_49 26D8  
                                      i2u432_49 2640                                        i2u337_45 1FEE  
                                      i2u329_45 1F96                                        i2u337_46 1FF0  
                                      i2u329_46 1F98                                        i2u601_47 2348  
                                      i2u441_48 27C8                                        i2u291_40 29B4  
                                      i2u418_48 2738                                        i2u426_48 26A0  
                                      i2u434_48 2608                                        i2u347_40 0FE4  
           __size_ofi2_MRF89XA_SPI_ExchangeByte 000A                                        i2u418_49 274A  
                                      i2u426_49 26B2                                        i2u434_49 261A  
                                      i2u356_40 10CA                                        i2u428_48 267A  
                                      i2u365_40 11B2                                        i2u428_49 268C  
                                      _PIR3bits 000ECD                                        i2u286_40 25B8  
                                      i2u374_40 129A                                        i2u470_48 2044  
                                      i2u295_40 2120                                        i2u383_40 1382  
                                      i2u463_40 27AC                                        i2u470_49 2056  
                                      _PIR4bits 000ECE                                        i2u287_48 25BA  
                                      i2u392_40 146A                                        i2u472_48 206C  
                                  _B_BlinkCount 000F                                        i2u490_48 0066  
                                      i2u395_48 27E8                                        i2u468_48 201A  
                                      i2u468_49 202C                                        i2u397_48 2848  
                                      i2u493_48 007E                                        i2u399_48 2828  
                                     _spiMaster 0F01                          ?_EUSART1_RxDataHandler 0031  
                                      _B_OnTime 00C8                ??_IOCCF7_DefaultInterruptHandler 0031  
               ?_IOCCF7_DefaultInterruptHandler 0031                                     ??_GetTarget 00F8  
                                      _SSP1CON1 000F96                                        _SSP1CON2 000F97  
                                      _SSP1CON3 000F98                                        _SSP2CON1 000E96  
                                      _SSP2CON2 000E97                                    _RGB_R_OnTime 00BE  
                                      _TMR2_ISR 2AF0                                        _TMR4_ISR 2798  
                                 _TMR4_CallBack 27BA                                        _SSP1STAT 000F95  
                                      _SSP2STAT 000E95                               ??_PIN_MANAGER_IOC 0031  
                i2MRF89XA_ExchangeConfig_A@Data 0034                                        i2_SetLed 1F5A  
                                      _G_OnTime 0019                         __size_of_FVR_Initialize 0008  
                   __size_of_MRF89XA_GetAddress 001C               __size_of_MRF89XA_SPI_ExchangeByte 000E  
                     ?_MRF89XA_SPI_ExchangeByte 0031                       MRF89XA_ReadConfig@Address 0037  
                ??_TMR2_DefaultInterruptHandler 0031               __size_of_TMR2_SetInterruptHandler 000A  
                ??_INT0_DefaultInterruptHandler 0031                       ?_TMR2_SetInterruptHandler 00F8  
                i2MRF89XA_SPI_ExchangeByte@byte 0032                            _MRF89XA_ExchangeFifo 2990  
                                  GetTarget@ret 00F9                                     _MASTER_open 2B2C  
                                      _R_OnTime 0027                            i2_MRF89XA_GetAddress 294C  
                                     copy_data0 22F6                           ?_INTERRUPT_Initialize 0031  
                             ??_DAC1_Initialize 00F8                        _INT0_SetInterruptHandler 2AAA  
                              _RGB_R_BlinkCount 000B                              _spi2_exchangeBlock 000000  
                           SetLedBlink@ledIndex 0180                               ??_TMR2_Initialize 00FA  
                                    ?_spi2_open 0031                           EUSART1_Read@readValue 00F8  
                             ??_TMR2_Custom_ISR 0037                                  ?_TMR2_CallBack 0031  
                             _MRF89XA_WriteFifo 2B18           __end_of_EUSART1_SetTxInterruptHandler 2ABE  
        __size_of_EUSART1_SetTxInterruptHandler 000A                   _EUSART1_SetTxInterruptHandler 2AB4  
                                      __Hrparam 0000                                        __Lrparam 0000  
                          INT0_Custom_ISR@index 0040                              ?_MRF89XA_WriteFifo 0031  
                            __CFG_BOREN$SBORDIS 000000                                  ?_TMR4_CallBack 0031  
                              __size_of_RunLoop 0058                            __size_of_SetLedBlink 01D0  
                       ??_OSCILLATOR_Initialize 00F8                    ??i2_MRF89XA_ExchangeConfig_A 0035  
                                   ??_ToggleLed 0033                             __end_ofi2_Delay_Xms 237A  
                   __size_of_EUSART1_Initialize 0084                             ??_MRF89XA_WriteFifo 0035  
                      _TMR4_SetInterruptHandler 2A1E                                      _ANSELBbits 000F19  
                     ??_EUSART1_SetErrorHandler 00FA             __end_of_EUSART1_DefaultErrorHandler 2B4E  
                   _EUSART1_DefaultErrorHandler 2B48                     __end_of_EUSART1_is_rx_ready 2B5A  
                               _I2C_Master_Init 2444                         _IOCCF6_InterruptHandler 00DA  
                               _I2C_Master_Stop 29FC                         MRF89XA_ExchangeFifo@ret 0034  
                         ?_MRF89XA_ExchangeFifo 0031                     __end_of_EUSART1_is_tx_ready 2B56  
                   __size_of_MRF89XA_ReadConfig 0016                         __end_of_spi_master_open 2896  
                                 i2SetLed@mode2 0035                                        __ptext10 2A28  
                                      __ptext11 1EC0                                        __ptext20 2A6E  
                                      __ptext12 2896                                        __ptext21 2A78  
                                      __ptext13 19F2                                        __ptext30 2AA0  
                                      __ptext22 2A82                                        __ptext14 2A32  
                                      __ptext31 2AAA                                        __ptext23 2A8C  
                                      __ptext15 2A3C                                        __ptext40 21E2  
                                      __ptext32 2086                                        __ptext24 291C  
                                      __ptext16 2A46                                        __ptext41 148C  
                                      __ptext33 2AB4                                        __ptext25 2B4E  
                                      __ptext17 2A50                                        __ptext50 28B2  
                                      __ptext42 2B52                                        __ptext34 2ABE  
                                      __ptext26 2444                                        __ptext18 2A5A  
                                      __ptext51 2776                                        __ptext43 2B56  
                                      __ptext35 2AC8                                        __ptext27 2B34  
                                      __ptext19 2A64                                        __ptext60 2AF0  
                                      __ptext52 29CA                                        __ptext44 247E  
                                      __ptext36 2AD2                                        __ptext28 237A  
                                      __ptext61 27DA                                        __ptext53 28E8  
                                      __ptext45 23C0                                        __ptext37 2ADC  
                                      __ptext29 2A96                                        __ptext70 2646  
                                      __ptext62 0F1E                                        __ptext54 2182  
                                      __ptext46 1B5E                                        __ptext38 29E4  
                                      __ptext71 2B62                                        __ptext63 2B5C  
                                      __ptext47 25D4                                        __ptext39 29F0  
                                      __ptext80 2704                                        __ptext72 266C  
                                      __ptext64 1F5A                                        __ptext56 2AE6  
                                      __ptext48 24B8                                        __ptext81 2B6C  
                                      __ptext73 2B64                                        __ptext65 228E  
                                      __ptext57 2798                                        __ptext49 28CE  
                                      __ptext90 281A                                        __ptext82 272A  
                                      __ptext74 2692                                        __ptext66 25FA  
                                      __ptext58 27BA                                        __ptext91 2B74  
                                      __ptext83 2B6E                                        __ptext75 2B66  
                                      __ptext67 2B5E                                        __ptext59 2B5A  
                                      __ptext92 2B0E                                        __ptext84 2750  
                                      __ptext76 26B8                                        __ptext68 2620  
                                      __ptext93 283A                                        __ptext85 2B70  
                                      __ptext77 2B68                                        __ptext69 2B60  
                                      __ptext94 2934                                        __ptext86 2AFA  
                                      __ptext78 26DE                                        __ptext95 2B76  
                                      __ptext87 27FA                                        __ptext79 2B6A  
                                      __ptext96 1E18                                        __ptext88 2B72  
                                      __ptext97 1C7A                                        __ptext89 2B04  
                                      __ptext98 24F2                                        __ptext99 2B18  
                         ?i2_MRF89XA_GetAddress 0031                                    _SSP1CON1bits 000F96  
                                  _SSP1CON2bits 000F97                          __size_ofi2_SetLedBlink 01CE  
                                  _SSP1CON3bits 000F98                    ??_IOCCF3_SetInterruptHandler 00FA  
                  ??_IOCCF6_SetInterruptHandler 00FA                                    _SSP2CON1bits 000E96  
                                    _IOCAF0_ISR 2750                                      _IOCAF1_ISR 272A  
                                    _IOCAF3_ISR 2704                                      _IOCAF4_ISR 26DE  
                   __size_of_MRF89XA_Initialize 011C                                      _IOCBF5_ISR 26B8  
                                    _IOCCF3_ISR 2692                                      _IOCCF4_ISR 266C  
                                    _IOCCF5_ISR 2646                                  SetLed@ledIndex 00F8  
                                    _IOCCF6_ISR 2620                                      _IOCCF7_ISR 25FA  
                         SetLedBlink@BlinkCount 0188                       __end_of_MRF89XA_WriteFifo 2B22  
                             ??_TMR4_Initialize 00FA                                   __size_of_main 01C8  
                                   _RGB_B_State 0045                                _MRF89XA_IsTxDone 29A4  
           __size_ofi2_MRF89XA_ExchangeConfig_A 001A                        __size_of_INT0_Custom_ISR 0018  
                                      _spi2_isr 2AE6                            __CFG_WDTCWS$WDTCWS_7 000000  
                                   _RGB_G_State 0047                              __CFG_BORV$VBOR_190 000000  
                            SetLedBlink@OffTime 0184                                      _RC1STAbits 000F9D  
EUSART1_SetOverrunErrorHandler@interruptHandler 00F8                                _MRF89XA_SendData 24F2  
                                   _RGB_R_State 0049                                        int$flags 0052  
                               _I2C_SendCommand 210A              __end_of_INTERRUPT_InterruptManager 00C8  
                    _INTERRUPT_InterruptManager 0008              __end_ofi2_MRF89XA_SPI_ExchangeByte 2B2C  
                    i2_MRF89XA_SPI_ExchangeByte 2B22                                    _SSP1STATbits 000F95  
             __size_of_MRF89XA_ExchangeConfig_A 0022                     _EUSART1_FramingErrorHandler 00D6  
                           _EUSART1_Receive_ISR 1FF2            __end_of_INT1_DefaultInterruptHandler 2B76  
         __size_of_INT1_DefaultInterruptHandler 0002                    _INT1_DefaultInterruptHandler 2B74  
                     ?_MRF89XA_ExchangeConfig_A 00FB             __size_of_IOCCF3_SetInterruptHandler 000A  
           __size_of_IOCCF6_SetInterruptHandler 000A                               _spi2_exchangeByte 28E8  
                      __end_of_I2C_Master_Start 2A14                        __end_of_I2C_Master_Write 2444  
                                    _INTCONbits 000FF2                                      Delay_Xms@i 0180  
                                    _FVRCONbits 000F31                              ?_spi2_exchangeByte 0031  
                                  _B_StartAfter 00C2                                    _G_BlinkCount 0013  
                        ??_INTERRUPT_Initialize 00F8                              _EXT_INT_Initialize 237A  
                                      intlevel2 0000          __end_of_IOCAF0_DefaultInterruptHandler 2B72  
       __size_of_IOCAF0_DefaultInterruptHandler 0002                  _IOCAF0_DefaultInterruptHandler 2B70  
                               ??_TMR2_CallBack 0037                                    i2SetLed@Mode 0033  
                           ??_spi2_exchangeByte 00F8                            ?_EUSART1_Receive_ISR 0031  
                                   ??_spi2_open 00F8                         ?_PIN_MANAGER_Initialize 0031  
                             __CFG_CLKOUTEN$OFF 000000                             ?_EXT_INT_Initialize 0031  
        __end_of_EUSART1_SetOverrunErrorHandler 2AD2         __size_of_EUSART1_SetOverrunErrorHandler 000A  
                _EUSART1_SetOverrunErrorHandler 2AC8                    __end_of_EUSART1_Transmit_ISR 25AA  
                                   i2_Delay_Xms 2330                                 ??_TMR4_CallBack 0031  
                        __size_of_INT0_CallBack 0020                               SetLedBlink@OnTime 0182  
                                _B_BlinkCounter 00C0          __end_of_IOCAF3_DefaultInterruptHandler 2B6E  
       __size_of_IOCAF3_DefaultInterruptHandler 0002                  _IOCAF3_DefaultInterruptHandler 2B6C  
                                 i2_SetLedBlink 165C                          __size_of_INT1_CallBack 0020  
                  __size_of_MRF89XA_WriteConfig 001A  EUSART1_SetFramingErrorHandler@interruptHandler 00F8  
                ?_EUSART1_SetTxInterruptHandler 00F8                         __end_of_I2C_Master_Init 247E  
                       __end_of_I2C_Master_Stop 2A08                                _RGB_R_StartAfter 00B8  
                        __size_of_INT2_CallBack 0020                          __size_of_EUSART1_Write 003A  
                            _eusart1RxLastError 002B                       __end_of_spi2_exchangeByte 2902  
                            _RGB_B_BlinkCounter 00A2                                  _FVR_Initialize 2B34  
                          ??_EXT_INT_Initialize 00FA                                      _SSP1DATPPS 000EB8  
                        ??_MRF89XA_ExchangeFifo 0033                   ?_INT1_DefaultInterruptHandler 0031  
              ??_IOCAF1_DefaultInterruptHandler 0031                 ?_IOCAF1_DefaultInterruptHandler 0031  
                                    _SSP2DATPPS 000E90                                      _SSP1CLKPPS 000EB7  
                                    _SSP2CLKPPS 000E8F                           _MRF89XA_SetModulation 25D4  
              __end_of_INT1_SetInterruptHandler 2AAA                     ?_IOCAF1_SetInterruptHandler 00F8  
                        ??i2_MRF89XA_GetAddress 0032                     ?_IOCAF4_SetInterruptHandler 00F8  
                              ?_spi_master_open 0031                     ?_IOCCF5_SetInterruptHandler 00F8  
                                    _TX1STAbits 000F9E                     __end_of_I2C_BusCollisionISR 2B42  
                                   ?_IOCAF0_ISR 0031                                     ?_IOCAF1_ISR 0031  
                                   ?_IOCAF3_ISR 0031                                     ?_IOCAF4_ISR 0031  
                                   ?_IOCBF5_ISR 0031                                     ?_IOCCF3_ISR 0031  
                                   ?_IOCCF4_ISR 0031                           ??_EUSART1_Receive_ISR 0031  
                                   ?_IOCCF5_ISR 0031                  __end_of_PIN_MANAGER_Initialize 1B5E  
                                   ?_IOCCF6_ISR 0031                                     ?_IOCCF7_ISR 0031  
                         __end_of_ext_rf_runcmd 1EC0                ??_IOCAF4_DefaultInterruptHandler 0031  
               ?_IOCAF4_DefaultInterruptHandler 0031                      __size_of_MRF89XA_WriteFifo 000A  
        __end_of_IOCBF5_DefaultInterruptHandler 2B6A         __size_of_IOCBF5_DefaultInterruptHandler 0002  
                _IOCBF5_DefaultInterruptHandler 2B68                             MRF89XA_IsTxDone@reg 0038  
                               _PIN_MANAGER_IOC 228E                                  _spi2_readBlock 000000  
                         _TMR2_InterruptHandler 00F6                         ??_EUSART1_RxDataHandler 0031  
                       _IOCAF3_InterruptHandler 00E6                         _IOCBF5_InterruptHandler 00E2  
                     MRF89XA_Initialize@Address 0184                         __end_of_I2C_SendCommand 2182  
                       _IOCCF7_InterruptHandler 00D8                __end_of_MRF89XA_SPI_ExchangeByte 29D8  
                                ?i2_SetLedBlink 0031  
